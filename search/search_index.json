{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Pait is a lightweight Python Api development tool, with parameter type checking, type conversion, providing document output and gRPC GateWay and other functions, very suitable for back-end interface development, it is designed to be used for multiple Pythons Web application development framework (currently adapted to Flask , Starlette , Sanic , Tornado ). Note type hint check 100% test coverage 95%+ (no include api_doc) python version >= 3.7 (support postponed annotations) The following code does not specify, all default to use the starlette framework. The current document is generated by Google Translate, if there are any errors, please contact us and we will fix them as soon as possible. Vision 1.Code is Documentation\u3002 2.Enables developers to achieve the most complete functionality with the least amount of code\u3002 Feature Enables developers to achieve the most complete functionality with the least amount of code Parameter dependency verification Automatically generate openapi files Swagger, Redoc route gRPC Gateway route TestClient support, support response result verification Support for plugin extensions, such as the Mock plugin Require Python3.7+ Use Type Hints in your project Install pip3 install pait Example Parameter verification and API document generation The usage of Pait is very simple, taking the starlette framework as an example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait , add_doc_route from pait.field import Body from pait.model.response import PaitResponseModel from pydantic import BaseModel , Field class DemoResponseModel ( PaitResponseModel ): \"\"\"Responsive struct model that can be used by Pait\"\"\" class ResponseModel ( BaseModel ): uid : int = Field () user_name : str = Field () description : str = \"demo response\" response_data : Type [ BaseModel ] = ResponseModel # Decorate a function with the pait decorator @pait ( response_model_list = [ DemoResponseModel ]) async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : # Get the corresponding value and return it return JSONResponse ({ 'uid' : uid , 'user_name' : user_name }) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # Register Open API interface add_doc_route ( app ) uvicorn . run ( app ) This code adds the highlighted part of the code to complete the use of a simple Pait , of which line 24 uses the pait decorator, so that Pait can manage the input and output of the route, At the same time, declare what the output format of this routing function is through response model list . Lines 26 and 27 declare the parameters required by this route, where to get their parameters, and what are the restriction rules for the parameters. Line 35 registers a Swagger route, then runs the code, and in the Browser access: http:127.0.0.1:8000swagger , you can see a SwaggerUI page, which currently has two sets of interfaces: One group is the 3 interfaces that come with Pait doc , and the other group is default , which contains the /api interface we just created, click on the /api interface, and the details of the interface will pop up: The data in the details is generated by Pait by reading the function signature and the incoming DemoResponseModel , then you can click try it out , enter the parameters and click Execute , you can see the result generated by the Curl command And the server response result: As can be seen from the results, the routing function works normally, and the parameters of the routing function are Pait automatically extract the values of uid and user_name from the Json Body and pass in. Plugin In addition to parameter verification and API document generation, Pait also has a plugin system, through which other feature can be extended, such as the Mock response, which can automatically return data according to the Response Model, even if the route has no data to return, such as the following the code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait , add_doc_route from pait.app.starlette.plugin.mock_response import MockPlugin from pait.field import Body from pait.model.response import PaitResponseModel from pydantic import BaseModel , Field class DemoResponseModel ( PaitResponseModel ): \"\"\"Responsive struct model that can be used by Pait\"\"\" class ResponseModel ( BaseModel ): uid : int = Field ( example = 999 ) user_name : str = Field () description : str = \"demo response\" response_data : Type [ BaseModel ] = ResponseModel # Decorate a function with the pait decorator @pait ( post_plugin_list = [ MockPlugin . build ()], response_model_list = [ DemoResponseModel ] ) async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : pass app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # Register Open API interface add_doc_route ( app ) uvicorn . run ( app ) The code is modified from the above code, it removes the return response, and introduces the highlighted part of the code, where uid: int = Field(example=999) in line 17 specifies that the example value is 999, then run the code and run the Curl command returned by Swagger above: \u279c ~ curl -X 'POST' \\ 'http://127.0.0.1:8000/api' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"uid\": 666, \"user_name\": \"so1n\" }' { \"uid\" :999, \"user_name\" : \"\" } As you can see, the interface can still return a response, which is automatically generated by the Mock plugin. The value of uid in the response is 999, which is the same as the uid: int = Field(example=999) set in our code, and the value of user_name is the default empty string. In addition, Pait has other plugins and other feature, which will be described in detail in subsequent documents. Performance Pait implements function signature extraction based on inspect that comes with Python , implements parameter verification and type conversion based on Pydantic , and also uses a lot of preloading designs, so the runtime performance of Pait is so good\u3002 However, the current Pait is still growing, and there are still many areas that need to be optimized. Welcome to optimize together through issues \u3002 Example of use Pait has complete code samples for each supported web framework, you can learn best practices by visiting the sample code: flask example sanic example starlette example tornado example","title":"Introduction"},{"location":"#introduction","text":"Pait is a lightweight Python Api development tool, with parameter type checking, type conversion, providing document output and gRPC GateWay and other functions, very suitable for back-end interface development, it is designed to be used for multiple Pythons Web application development framework (currently adapted to Flask , Starlette , Sanic , Tornado ). Note type hint check 100% test coverage 95%+ (no include api_doc) python version >= 3.7 (support postponed annotations) The following code does not specify, all default to use the starlette framework. The current document is generated by Google Translate, if there are any errors, please contact us and we will fix them as soon as possible.","title":"Introduction"},{"location":"#vision","text":"1.Code is Documentation\u3002 2.Enables developers to achieve the most complete functionality with the least amount of code\u3002","title":"Vision"},{"location":"#feature","text":"Enables developers to achieve the most complete functionality with the least amount of code Parameter dependency verification Automatically generate openapi files Swagger, Redoc route gRPC Gateway route TestClient support, support response result verification Support for plugin extensions, such as the Mock plugin","title":"Feature"},{"location":"#require","text":"Python3.7+ Use Type Hints in your project","title":"Require"},{"location":"#install","text":"pip3 install pait","title":"Install"},{"location":"#example","text":"","title":"Example"},{"location":"#parameter-verification-and-api-document-generation","text":"The usage of Pait is very simple, taking the starlette framework as an example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait , add_doc_route from pait.field import Body from pait.model.response import PaitResponseModel from pydantic import BaseModel , Field class DemoResponseModel ( PaitResponseModel ): \"\"\"Responsive struct model that can be used by Pait\"\"\" class ResponseModel ( BaseModel ): uid : int = Field () user_name : str = Field () description : str = \"demo response\" response_data : Type [ BaseModel ] = ResponseModel # Decorate a function with the pait decorator @pait ( response_model_list = [ DemoResponseModel ]) async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : # Get the corresponding value and return it return JSONResponse ({ 'uid' : uid , 'user_name' : user_name }) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # Register Open API interface add_doc_route ( app ) uvicorn . run ( app ) This code adds the highlighted part of the code to complete the use of a simple Pait , of which line 24 uses the pait decorator, so that Pait can manage the input and output of the route, At the same time, declare what the output format of this routing function is through response model list . Lines 26 and 27 declare the parameters required by this route, where to get their parameters, and what are the restriction rules for the parameters. Line 35 registers a Swagger route, then runs the code, and in the Browser access: http:127.0.0.1:8000swagger , you can see a SwaggerUI page, which currently has two sets of interfaces: One group is the 3 interfaces that come with Pait doc , and the other group is default , which contains the /api interface we just created, click on the /api interface, and the details of the interface will pop up: The data in the details is generated by Pait by reading the function signature and the incoming DemoResponseModel , then you can click try it out , enter the parameters and click Execute , you can see the result generated by the Curl command And the server response result: As can be seen from the results, the routing function works normally, and the parameters of the routing function are Pait automatically extract the values of uid and user_name from the Json Body and pass in.","title":"Parameter verification and API document generation"},{"location":"#plugin","text":"In addition to parameter verification and API document generation, Pait also has a plugin system, through which other feature can be extended, such as the Mock response, which can automatically return data according to the Response Model, even if the route has no data to return, such as the following the code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait , add_doc_route from pait.app.starlette.plugin.mock_response import MockPlugin from pait.field import Body from pait.model.response import PaitResponseModel from pydantic import BaseModel , Field class DemoResponseModel ( PaitResponseModel ): \"\"\"Responsive struct model that can be used by Pait\"\"\" class ResponseModel ( BaseModel ): uid : int = Field ( example = 999 ) user_name : str = Field () description : str = \"demo response\" response_data : Type [ BaseModel ] = ResponseModel # Decorate a function with the pait decorator @pait ( post_plugin_list = [ MockPlugin . build ()], response_model_list = [ DemoResponseModel ] ) async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : pass app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # Register Open API interface add_doc_route ( app ) uvicorn . run ( app ) The code is modified from the above code, it removes the return response, and introduces the highlighted part of the code, where uid: int = Field(example=999) in line 17 specifies that the example value is 999, then run the code and run the Curl command returned by Swagger above: \u279c ~ curl -X 'POST' \\ 'http://127.0.0.1:8000/api' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"uid\": 666, \"user_name\": \"so1n\" }' { \"uid\" :999, \"user_name\" : \"\" } As you can see, the interface can still return a response, which is automatically generated by the Mock plugin. The value of uid in the response is 999, which is the same as the uid: int = Field(example=999) set in our code, and the value of user_name is the default empty string. In addition, Pait has other plugins and other feature, which will be described in detail in subsequent documents.","title":"Plugin"},{"location":"#performance","text":"Pait implements function signature extraction based on inspect that comes with Python , implements parameter verification and type conversion based on Pydantic , and also uses a lot of preloading designs, so the runtime performance of Pait is so good\u3002 However, the current Pait is still growing, and there are still many areas that need to be optimized. Welcome to optimize together through issues \u3002","title":"Performance"},{"location":"#example-of-use","text":"Pait has complete code samples for each supported web framework, you can learn best practices by visiting the sample code: flask example sanic example starlette example tornado example","title":"Example of use"},{"location":"1_1_introduction/","text":"Introduction Using Pait for parameter type conversion and parameter verification is very simple, for example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait.field import Body # Decorate function with the pait decorator @pait () async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : # get value and return return JSONResponse ({ 'result' : { 'uid' : uid , 'user_name' : user_name }}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ]), ] ) uvicorn . run ( app ) Line 11 of the above code is the running core of Pait , and all the running functions of Pait are implemented in this decorator\u3002 Line 11 of the above code is the running core of Pait . All running functions of Pait are implemented in this decorator. In this core, the function signature corresponding to the function will be obtained through inspect , and generate a pydantic.BaseModel object through the function signature, and then use the object checksum to convert the requested value and return it to the corresponding parameters of the function according to the function signature. The 13 and 14 lines of code are the parameters filled in by the developer. When the developer writes the function, only needs to write the parameters of the function as key parameters in the format similar to <name>:<type>=<default> . in addition to conforming to the key parameter standard of Python , Pait will also give other meanings: name The parameter name, in most cases, will be used as the Key to request the resource to obtain the corresponding value. type The type corresponding to the value, which Pait will use for parameter verification and conversion. default The field object of Pait , different field represent getting values from different request types, and the properties of the object tell Pait how to preprocess the value obtained from the request. Taking the uid parameter above as an example, Pait will obtain the Json data from the request through the Body, and then use the Key as the uid to obtain the corresponding value from the Json data and convert or verify whether it is an int type, and finally Then judge whether the value is between 10-1000, if not, report an error directly, if so, assign it to the variable uid . Note When using Body() directly, mypy will check the type mismatch, and Body.i() is compatible with this problem. In general, it is recommended to use Body.i() directly.","title":"Introduction"},{"location":"1_1_introduction/#introduction","text":"Using Pait for parameter type conversion and parameter verification is very simple, for example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait.field import Body # Decorate function with the pait decorator @pait () async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : # get value and return return JSONResponse ({ 'result' : { 'uid' : uid , 'user_name' : user_name }}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ]), ] ) uvicorn . run ( app ) Line 11 of the above code is the running core of Pait , and all the running functions of Pait are implemented in this decorator\u3002 Line 11 of the above code is the running core of Pait . All running functions of Pait are implemented in this decorator. In this core, the function signature corresponding to the function will be obtained through inspect , and generate a pydantic.BaseModel object through the function signature, and then use the object checksum to convert the requested value and return it to the corresponding parameters of the function according to the function signature. The 13 and 14 lines of code are the parameters filled in by the developer. When the developer writes the function, only needs to write the parameters of the function as key parameters in the format similar to <name>:<type>=<default> . in addition to conforming to the key parameter standard of Python , Pait will also give other meanings: name The parameter name, in most cases, will be used as the Key to request the resource to obtain the corresponding value. type The type corresponding to the value, which Pait will use for parameter verification and conversion. default The field object of Pait , different field represent getting values from different request types, and the properties of the object tell Pait how to preprocess the value obtained from the request. Taking the uid parameter above as an example, Pait will obtain the Json data from the request through the Body, and then use the Key as the uid to obtain the corresponding value from the Json data and convert or verify whether it is an int type, and finally Then judge whether the value is between 10-1000, if not, report an error directly, if so, assign it to the variable uid . Note When using Body() directly, mypy will check the type mismatch, and Body.i() is compatible with this problem. In general, it is recommended to use Body.i() directly.","title":"Introduction"},{"location":"1_2_how_to_use_field/","text":"field plays a crucial role in Pait . In addition to using field to obtain data sources, Pait also uses it to achieve many other functions. In this chapter, only parameter validation is emphasized. this piece. 1.Kind of Field In addition to the Body mentioned above, Field also has other types, their names and functions are as follows: Body: Get the json data of the current request Cookie: Get the cookie data of the current request (note that the current cookie data will be converted into a Python dictionary, which means that the key of the cookie cannot be repeated. At the same time, when the Field is a cookie, the type is preferably str) File\uff1aGet the file object of the current request, which is consistent with the file object of the web framework Form\uff1aGet the form data of the current request. If there are multiple duplicate Keys, only the first value will be returned Header: Get the header data of the current request Path: Get the path data of the current request, such as /api/{version}/test , will get the version data Query: Get the data corresponding to the Url parameter of the current request. If there are multiple duplicate keys, only the first value will be returned MultiForm\uff1aGet the form data of the current request, and return the data list corresponding to the Key MultiQuery\uff1aGet the data corresponding to the Url parameter of the current request, and return the data list corresponding to the Key The specific usage of each type is very simple, just fill in the default position in <name>:<type>=<default> , take this code as an example (in order to ensure that it can be copied and pasted and run, no demo field.File): from typing import List , Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( form_a : str = field . Form . i (), form_b : str = field . Form . i (), multi_form_c : List [ str ] = field . MultiForm . i (), cookie : dict = field . Cookie . i ( raw_return = True ), multi_user_name : List [ str ] = field . MultiQuery . i ( min_length = 2 , max_length = 4 ), age : int = field . Path . i ( gt = 1 , lt = 100 ), uid : int = field . Query . i ( gt = 10 , lt = 1000 ), user_name : str = field . Query . i ( min_length = 2 , max_length = 4 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" ), accept : str = field . Header . i () ) -> JSONResponse : \"\"\"Test the use of all BaseField-based\"\"\" return JSONResponse ( { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"accept\" : accept , \"form_a\" : form_a , \"form_b\" : form_b , \"form_c\" : multi_form_c , \"cookie\" : cookie , \"multi_user_name\" : multi_user_name , \"age\" : age , \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } ) app = Starlette ( routes = [ Route ( \"/api/demo/ {age} \" , demo , methods = [ \"POST\" ]), ] ) uvicorn . run ( app ) This code comes from pait base field example , And made some small changes, the main responsibility of this interface is to return the parameters to the caller in json format. Next, use the curl command to perform a request test. Through the output results, it can be found that Pait can accurately get the corresponding value through the type of field , and assign it to the variable\u3002 curl -X 'POST' \\ 'http://127.0.0.1:8000/api/demo/12?uid=99&user_name=so1n&multi_user_name=so1n' \\ -H 'accept: application/json' \\ -H 'Cookie: cookie=cookie=test cookie' \\ -H 'Content-Type: multipart/form-data' \\ -F 'form_a=a' \\ -F 'form_b=b' \\ -F 'multi_form_c=string,string' { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"accept\" : \"application/json\" , \"form_a\" : \"a\" , \"form_b\" : \"b\" , \"form_c\" : [ \"string,string\" ] , \"cookie\" : { \"cookie\" : \"cookie=test cookie\" } , \"multi_user_name\" : [ \"so1n\" ] , \"age\" : 12 , \"uid\" : 99 , \"user_name\" : \"so1n\" , \"email\" : \"example@xxx.com\" } } 2.Field feature As can be seen from the above example, the email parameter is not included in the request, but the value of email in the response value returned by the interface is example@xxx.com \uff0c This is because when I fill in the field of email , I fill in example@xxx.com into the default value, so that Pait can not get the corresponding value of the variable, but also can The default value is assigned to the corresponding variable\u3002 In addition to default values, field also has many feature, most of which are derived from pydantic.Field , which field inherits. 2.1.default Pait supports default value through this parameter. If there is no default value, you can simply leave the value of this parameter blank. The sample code is as follows, both interfaces directly return the obtained value demo_value , where the demo interface has a default value, the default value is string 123, and the demo1 interface has no default value: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException async def api_exception ( request : Request , exc : Exception ) -> PlainTextResponse : \"\"\"Extract exception information and return it as a response\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return PlainTextResponse ( str ( exc )) @pait () async def demo ( demo_value : str = field . Query . i ( default = \"123\" )) -> PlainTextResponse : return PlainTextResponse ( demo_value ) @pait () async def demo1 ( demo_value : str = field . Query . i ()) -> PlainTextResponse : return PlainTextResponse ( demo_value ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"GET\" ]), ] ) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Using curl call, can find that for the interface /api/demo with a default value, when no parameter demo_value is passed, the default return value is 123, and when the parameter 456 is passed, the return value is 456: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 123 \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=456\" 456 And the request without parameters will see an error, indicating that the value of demo_value is not found: \u279c curl \"http://127.0.0.1:8000/api/demo1\" Can not found demo_value value 2.2.default_factory This parameter is used when the default value is a function, and can be used to fill in a default value similar to datetime.datetime.now that is generated after receiving a request. The sample code is as follows. The default value of the first interface is the current time, and the default value of the second interface is uuid. The return value of each call is generated when the request is received.: import datetime import uuid import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( now : datetime . datetime = field . Query . i ( default_factory = datetime . datetime . now ) ) -> PlainTextResponse : return PlainTextResponse ( now ) @pait () async def demo1 ( demo_value : str = field . Query . i ( default_factory = lambda : uuid . uuid4 () . hex ) ) -> PlainTextResponse : return PlainTextResponse ( demo_value ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"GET\" ]), ] ) uvicorn . run ( app ) Using curl calls can find that the results returned each time are different: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 2022 -02-07T14:54:29.127519 \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 2022 -02-07T14:54:33.789994 \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" 7e4659e18103471da9db91ed4843d962 \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" ef84f04fa9fc4ea9a8b44449c76146b8 2.3.alias Aliases for parameters, some parameters may be named Content-Type , but Python does not support this naming method, you can use aliases in this case\u3002 The sample code is as follows: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( content_type : str = field . Header . i ( alias = \"Content-Type\" ) ) -> PlainTextResponse : return PlainTextResponse ( content_type ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) Using the curl call, it can be found that Pait normally extracts the Content-Type value from the Header and assigns it to the content type: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" -H \"Content-Type:123\" 123 2.4.gt, ge, lt, le, multiple of digital check These values are all check digits for legality and are only used for numeric types, but their functions are different\uff1a gt\uff1aFor numeric types only, it will check if the numeric value is greater than this value, and also add the exclusiveMinimum property in the Open API. ge\uff1aOnly used for numeric types, it will check whether the value is greater than or equal to this value, and also add the exclusiveMinimum attribute in the Open API\u3002 lt\uff1aOnly used for numeric types, it will check whether the value is less than this value, and also add the exclusiveMaximum attribute in the Open API\u3002 le\uff1aOnly used for numeric types, it will check whether the value is less than or equal to this value, and also add the exclusiveMaximum attribute in the Open API\u3002 multiple_of\uff1aFor numbers only, checks if the number is a multiple of the specified value. The sample code is as follows, this sample code has only one interface, but accepts three parameters demo_value1 , demo_value2 , demo_value3 , they only accept three numbers that are greater than 1 and less than 10; equal to 1 and a multiple of 3: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"Extract exception information and return it as a response\"\"\" if isinstance ( exc , ValidationError ): # parsingPydanticSErrorThrow return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value1 : int = field . Query . i ( gt = 1 , lt = 10 ), demo_value2 : int = field . Query . i ( ge = 1 , le = 1 ), demo_value3 : int = field . Query . i ( multiple_of = 3 ), ) -> JSONResponse : return JSONResponse ({ \"data\" : [ demo_value1 , demo_value2 , demo_value3 ]}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Using the curl call, you can find that the first request meets the requirements and gets the desired response result. The second request has all three parameters wrong, and returns the error message of Pydantic.ValidationError . From the error message, you can It is simple to see that the three parameters do not meet the qualifications of the interface settings\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value1=2&demo_value2=1&demo_value3=3\" { \"data\" : [ 2 ,1,3 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value1=11&demo_value2=2&demo_value3=2\" { \"data\" : [ { \"loc\" : [ \"demo_value1\" ] , \"msg\" : \"ensure this value is less than 10\" , \"type\" : \"value_error.number.not_lt\" , \"ctx\" : { \"limit_value\" : 10 } } , { \"loc\" : [ \"demo_value2\" ] , \"msg\" : \"ensure this value is less than or equal to 1\" , \"type\" : \"value_error.number.not_le\" , \"ctx\" : { \"limit_value\" : 1 } } , { \"loc\" : [ \"demo_value3\" ] , \"msg\" : \"ensure this value is a multiple of 3\" , \"type\" : \"value_error.number.not_multiple\" , \"ctx\" : { \"multiple_of\" : 3 } } ] } 2.5. array check(min_items\uff0cmax_items) These values are used to check whether the array is legal or not. They are only used for the type of the array. Their feature are different.\uff1a min_items\uff1aFor array types only, it will check whether the word list is greater than or equal to the specified value. max_items\uff1a Only for array types, it will check whether the word list is less than or equal to the specified value\u3002 The sample code is as follows, the interface obtains the array of parameter demo value from the request Url through field.MultiQuery , and returns it to the calling end, where the length of the array is limited to greater than or equal to 1 and less than or equal to 2\uff1a from typing import List import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"Extract exception information and return it as a response\"\"\" if isinstance ( exc , TipException ): exc = exc . exc if isinstance ( exc , ValidationError ): return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value : List [ int ] = field . MultiQuery . i ( min_items = 1 , max_items = 2 ) ) -> JSONResponse : return JSONResponse ({ \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) As in 2.4, through the curl call, it can be found that the legal parameters will be released, and the illegal parameters will throw an error\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1\" { \"data\" : [ 1 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1&demo_value=2\" { \"data\" : [ 1 ,2 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1&demo_value=2&demo_value=3\" { \"data\" : [ { \"loc\" : [ \"demo_value\" ] , \"msg\" : \"ensure this value has at most 2 items\" , \"type\" : \"value_error.list.max_items\" , \"ctx\" : { \"limit_value\" : 2 } } ] } 2.6.String check(min_length\uff0cmax_length\uff0cregex) These values are used to check whether the string is legal or not. They are only used for the type of string, and their feature are different: min_length\uff1aOnly used for string type, it will check whether the length of the string is greater than or equal to the specified value\u3002 max_length\uff1aFor string type only, it will check whether the length of the string is less than or equal to the specified value. regex\uff1aFor string type only, it will check whether the string matches the regular expression. The sample code is as follows, the interface needs to get a value from Url, the length of this value is 6, and it must start with the English letter u: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"Extract exception information and return it as a response\"\"\" if isinstance ( exc , TipException ): exc = exc . exc if isinstance ( exc , ValidationError ): return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value : str = field . Query . i ( min_length = 6 , max_length = 6 , regex = \"^u\" ) ) -> JSONResponse : return JSONResponse ({ \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Use curl to make three requests, the first is normal data, the second is not conforming to the regular expression, and the third is that the length does not conform\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=u66666\" { \"data\" : \"u66666\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=666666\" { \"data\" : [{ \"loc\" : [ \"demo_value\" ] , \"msg\" : \"string does not match regex \\\"^u\\\"\" , \"type\" : \"value_error.str.regex\" , \"ctx\" : { \"pattern\" : \"^u\" }}]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1\" { \"data\" : [{ \"loc\" : [ \"demo_value\" ] , \"msg\" : \"ensure this value has at least 6 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" :6 }}]} 2.7.raw_return The default value of this parameter is False . If it is True , Pait will not obtain the value from the request data according to the parameter name or alias as the key, but will return the entire request value to the corresponding variable\u3002 The sample code is as follows, the interface is a POST interface, it requires two values, the first value is the Json parameter passed by the entire client, and the second value is the value of Key in the Json parameter passed by the client: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( demo_value1 : dict = field . Body . i ( raw_return = True ), a : str = field . Body . i (), ) -> JSONResponse : return JSONResponse ({ \"demo_value\" : demo_value1 , \"a\" : a }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"POST\" ])]) uvicorn . run ( app ) Called with curl , you can see that the result is as expected: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" -X POST -d '{\"a\": \"1\", \"b\": \"2\"}' --header \"Content-Type: application/json\" { \"demo_value\" : { \"a\" : \"1\" , \"b\" : \"2\" } , \"a\" : \"1\" } 2.8.Other Feature In addition to the above functions, Pait has other properties, but they are only related to OpenAPI, so this chapter only briefly introduces: link\uff1aThe link feature used to support Open Api. media_type\uff1aThe media_type corresponding to Field is used for the parameter media type classification of OpenAPI Scheme. example\uff1aExample values for documentation, and Mock features like Mock Request and Response, supporting both variables and callables, for example datetime.datetim.now . Recommended for use with faker . openapi_serialization\uff1aThe serialization method used for this value in the Open API Schema\u3002 description: Parameter description for Open API","title":"How to use Field"},{"location":"1_2_how_to_use_field/#1kind-of-field","text":"In addition to the Body mentioned above, Field also has other types, their names and functions are as follows: Body: Get the json data of the current request Cookie: Get the cookie data of the current request (note that the current cookie data will be converted into a Python dictionary, which means that the key of the cookie cannot be repeated. At the same time, when the Field is a cookie, the type is preferably str) File\uff1aGet the file object of the current request, which is consistent with the file object of the web framework Form\uff1aGet the form data of the current request. If there are multiple duplicate Keys, only the first value will be returned Header: Get the header data of the current request Path: Get the path data of the current request, such as /api/{version}/test , will get the version data Query: Get the data corresponding to the Url parameter of the current request. If there are multiple duplicate keys, only the first value will be returned MultiForm\uff1aGet the form data of the current request, and return the data list corresponding to the Key MultiQuery\uff1aGet the data corresponding to the Url parameter of the current request, and return the data list corresponding to the Key The specific usage of each type is very simple, just fill in the default position in <name>:<type>=<default> , take this code as an example (in order to ensure that it can be copied and pasted and run, no demo field.File): from typing import List , Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( form_a : str = field . Form . i (), form_b : str = field . Form . i (), multi_form_c : List [ str ] = field . MultiForm . i (), cookie : dict = field . Cookie . i ( raw_return = True ), multi_user_name : List [ str ] = field . MultiQuery . i ( min_length = 2 , max_length = 4 ), age : int = field . Path . i ( gt = 1 , lt = 100 ), uid : int = field . Query . i ( gt = 10 , lt = 1000 ), user_name : str = field . Query . i ( min_length = 2 , max_length = 4 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" ), accept : str = field . Header . i () ) -> JSONResponse : \"\"\"Test the use of all BaseField-based\"\"\" return JSONResponse ( { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"accept\" : accept , \"form_a\" : form_a , \"form_b\" : form_b , \"form_c\" : multi_form_c , \"cookie\" : cookie , \"multi_user_name\" : multi_user_name , \"age\" : age , \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } ) app = Starlette ( routes = [ Route ( \"/api/demo/ {age} \" , demo , methods = [ \"POST\" ]), ] ) uvicorn . run ( app ) This code comes from pait base field example , And made some small changes, the main responsibility of this interface is to return the parameters to the caller in json format. Next, use the curl command to perform a request test. Through the output results, it can be found that Pait can accurately get the corresponding value through the type of field , and assign it to the variable\u3002 curl -X 'POST' \\ 'http://127.0.0.1:8000/api/demo/12?uid=99&user_name=so1n&multi_user_name=so1n' \\ -H 'accept: application/json' \\ -H 'Cookie: cookie=cookie=test cookie' \\ -H 'Content-Type: multipart/form-data' \\ -F 'form_a=a' \\ -F 'form_b=b' \\ -F 'multi_form_c=string,string' { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"accept\" : \"application/json\" , \"form_a\" : \"a\" , \"form_b\" : \"b\" , \"form_c\" : [ \"string,string\" ] , \"cookie\" : { \"cookie\" : \"cookie=test cookie\" } , \"multi_user_name\" : [ \"so1n\" ] , \"age\" : 12 , \"uid\" : 99 , \"user_name\" : \"so1n\" , \"email\" : \"example@xxx.com\" } }","title":"1.Kind of Field"},{"location":"1_2_how_to_use_field/#2field-feature","text":"As can be seen from the above example, the email parameter is not included in the request, but the value of email in the response value returned by the interface is example@xxx.com \uff0c This is because when I fill in the field of email , I fill in example@xxx.com into the default value, so that Pait can not get the corresponding value of the variable, but also can The default value is assigned to the corresponding variable\u3002 In addition to default values, field also has many feature, most of which are derived from pydantic.Field , which field inherits.","title":"2.Field feature"},{"location":"1_2_how_to_use_field/#21default","text":"Pait supports default value through this parameter. If there is no default value, you can simply leave the value of this parameter blank. The sample code is as follows, both interfaces directly return the obtained value demo_value , where the demo interface has a default value, the default value is string 123, and the demo1 interface has no default value: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException async def api_exception ( request : Request , exc : Exception ) -> PlainTextResponse : \"\"\"Extract exception information and return it as a response\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return PlainTextResponse ( str ( exc )) @pait () async def demo ( demo_value : str = field . Query . i ( default = \"123\" )) -> PlainTextResponse : return PlainTextResponse ( demo_value ) @pait () async def demo1 ( demo_value : str = field . Query . i ()) -> PlainTextResponse : return PlainTextResponse ( demo_value ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"GET\" ]), ] ) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Using curl call, can find that for the interface /api/demo with a default value, when no parameter demo_value is passed, the default return value is 123, and when the parameter 456 is passed, the return value is 456: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 123 \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=456\" 456 And the request without parameters will see an error, indicating that the value of demo_value is not found: \u279c curl \"http://127.0.0.1:8000/api/demo1\" Can not found demo_value value","title":"2.1.default"},{"location":"1_2_how_to_use_field/#22default_factory","text":"This parameter is used when the default value is a function, and can be used to fill in a default value similar to datetime.datetime.now that is generated after receiving a request. The sample code is as follows. The default value of the first interface is the current time, and the default value of the second interface is uuid. The return value of each call is generated when the request is received.: import datetime import uuid import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( now : datetime . datetime = field . Query . i ( default_factory = datetime . datetime . now ) ) -> PlainTextResponse : return PlainTextResponse ( now ) @pait () async def demo1 ( demo_value : str = field . Query . i ( default_factory = lambda : uuid . uuid4 () . hex ) ) -> PlainTextResponse : return PlainTextResponse ( demo_value ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"GET\" ]), ] ) uvicorn . run ( app ) Using curl calls can find that the results returned each time are different: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 2022 -02-07T14:54:29.127519 \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 2022 -02-07T14:54:33.789994 \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" 7e4659e18103471da9db91ed4843d962 \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" ef84f04fa9fc4ea9a8b44449c76146b8","title":"2.2.default_factory"},{"location":"1_2_how_to_use_field/#23alias","text":"Aliases for parameters, some parameters may be named Content-Type , but Python does not support this naming method, you can use aliases in this case\u3002 The sample code is as follows: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( content_type : str = field . Header . i ( alias = \"Content-Type\" ) ) -> PlainTextResponse : return PlainTextResponse ( content_type ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) Using the curl call, it can be found that Pait normally extracts the Content-Type value from the Header and assigns it to the content type: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" -H \"Content-Type:123\" 123","title":"2.3.alias"},{"location":"1_2_how_to_use_field/#24gt-ge-lt-le-multiple-of-digital-check","text":"These values are all check digits for legality and are only used for numeric types, but their functions are different\uff1a gt\uff1aFor numeric types only, it will check if the numeric value is greater than this value, and also add the exclusiveMinimum property in the Open API. ge\uff1aOnly used for numeric types, it will check whether the value is greater than or equal to this value, and also add the exclusiveMinimum attribute in the Open API\u3002 lt\uff1aOnly used for numeric types, it will check whether the value is less than this value, and also add the exclusiveMaximum attribute in the Open API\u3002 le\uff1aOnly used for numeric types, it will check whether the value is less than or equal to this value, and also add the exclusiveMaximum attribute in the Open API\u3002 multiple_of\uff1aFor numbers only, checks if the number is a multiple of the specified value. The sample code is as follows, this sample code has only one interface, but accepts three parameters demo_value1 , demo_value2 , demo_value3 , they only accept three numbers that are greater than 1 and less than 10; equal to 1 and a multiple of 3: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"Extract exception information and return it as a response\"\"\" if isinstance ( exc , ValidationError ): # parsingPydanticSErrorThrow return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value1 : int = field . Query . i ( gt = 1 , lt = 10 ), demo_value2 : int = field . Query . i ( ge = 1 , le = 1 ), demo_value3 : int = field . Query . i ( multiple_of = 3 ), ) -> JSONResponse : return JSONResponse ({ \"data\" : [ demo_value1 , demo_value2 , demo_value3 ]}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Using the curl call, you can find that the first request meets the requirements and gets the desired response result. The second request has all three parameters wrong, and returns the error message of Pydantic.ValidationError . From the error message, you can It is simple to see that the three parameters do not meet the qualifications of the interface settings\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value1=2&demo_value2=1&demo_value3=3\" { \"data\" : [ 2 ,1,3 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value1=11&demo_value2=2&demo_value3=2\" { \"data\" : [ { \"loc\" : [ \"demo_value1\" ] , \"msg\" : \"ensure this value is less than 10\" , \"type\" : \"value_error.number.not_lt\" , \"ctx\" : { \"limit_value\" : 10 } } , { \"loc\" : [ \"demo_value2\" ] , \"msg\" : \"ensure this value is less than or equal to 1\" , \"type\" : \"value_error.number.not_le\" , \"ctx\" : { \"limit_value\" : 1 } } , { \"loc\" : [ \"demo_value3\" ] , \"msg\" : \"ensure this value is a multiple of 3\" , \"type\" : \"value_error.number.not_multiple\" , \"ctx\" : { \"multiple_of\" : 3 } } ] }","title":"2.4.gt, ge, lt, le, multiple of digital check"},{"location":"1_2_how_to_use_field/#25-array-checkmin_itemsmax_items","text":"These values are used to check whether the array is legal or not. They are only used for the type of the array. Their feature are different.\uff1a min_items\uff1aFor array types only, it will check whether the word list is greater than or equal to the specified value. max_items\uff1a Only for array types, it will check whether the word list is less than or equal to the specified value\u3002 The sample code is as follows, the interface obtains the array of parameter demo value from the request Url through field.MultiQuery , and returns it to the calling end, where the length of the array is limited to greater than or equal to 1 and less than or equal to 2\uff1a from typing import List import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"Extract exception information and return it as a response\"\"\" if isinstance ( exc , TipException ): exc = exc . exc if isinstance ( exc , ValidationError ): return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value : List [ int ] = field . MultiQuery . i ( min_items = 1 , max_items = 2 ) ) -> JSONResponse : return JSONResponse ({ \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) As in 2.4, through the curl call, it can be found that the legal parameters will be released, and the illegal parameters will throw an error\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1\" { \"data\" : [ 1 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1&demo_value=2\" { \"data\" : [ 1 ,2 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1&demo_value=2&demo_value=3\" { \"data\" : [ { \"loc\" : [ \"demo_value\" ] , \"msg\" : \"ensure this value has at most 2 items\" , \"type\" : \"value_error.list.max_items\" , \"ctx\" : { \"limit_value\" : 2 } } ] }","title":"2.5. array check(min_items\uff0cmax_items)"},{"location":"1_2_how_to_use_field/#26string-checkmin_lengthmax_lengthregex","text":"These values are used to check whether the string is legal or not. They are only used for the type of string, and their feature are different: min_length\uff1aOnly used for string type, it will check whether the length of the string is greater than or equal to the specified value\u3002 max_length\uff1aFor string type only, it will check whether the length of the string is less than or equal to the specified value. regex\uff1aFor string type only, it will check whether the string matches the regular expression. The sample code is as follows, the interface needs to get a value from Url, the length of this value is 6, and it must start with the English letter u: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"Extract exception information and return it as a response\"\"\" if isinstance ( exc , TipException ): exc = exc . exc if isinstance ( exc , ValidationError ): return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value : str = field . Query . i ( min_length = 6 , max_length = 6 , regex = \"^u\" ) ) -> JSONResponse : return JSONResponse ({ \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Use curl to make three requests, the first is normal data, the second is not conforming to the regular expression, and the third is that the length does not conform\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=u66666\" { \"data\" : \"u66666\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=666666\" { \"data\" : [{ \"loc\" : [ \"demo_value\" ] , \"msg\" : \"string does not match regex \\\"^u\\\"\" , \"type\" : \"value_error.str.regex\" , \"ctx\" : { \"pattern\" : \"^u\" }}]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1\" { \"data\" : [{ \"loc\" : [ \"demo_value\" ] , \"msg\" : \"ensure this value has at least 6 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" :6 }}]}","title":"2.6.String check(min_length\uff0cmax_length\uff0cregex)"},{"location":"1_2_how_to_use_field/#27raw_return","text":"The default value of this parameter is False . If it is True , Pait will not obtain the value from the request data according to the parameter name or alias as the key, but will return the entire request value to the corresponding variable\u3002 The sample code is as follows, the interface is a POST interface, it requires two values, the first value is the Json parameter passed by the entire client, and the second value is the value of Key in the Json parameter passed by the client: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( demo_value1 : dict = field . Body . i ( raw_return = True ), a : str = field . Body . i (), ) -> JSONResponse : return JSONResponse ({ \"demo_value\" : demo_value1 , \"a\" : a }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"POST\" ])]) uvicorn . run ( app ) Called with curl , you can see that the result is as expected: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" -X POST -d '{\"a\": \"1\", \"b\": \"2\"}' --header \"Content-Type: application/json\" { \"demo_value\" : { \"a\" : \"1\" , \"b\" : \"2\" } , \"a\" : \"1\" }","title":"2.7.raw_return"},{"location":"1_2_how_to_use_field/#28other-feature","text":"In addition to the above functions, Pait has other properties, but they are only related to OpenAPI, so this chapter only briefly introduces: link\uff1aThe link feature used to support Open Api. media_type\uff1aThe media_type corresponding to Field is used for the parameter media type classification of OpenAPI Scheme. example\uff1aExample values for documentation, and Mock features like Mock Request and Response, supporting both variables and callables, for example datetime.datetim.now . Recommended for use with faker . openapi_serialization\uff1aThe serialization method used for this value in the Open API Schema\u3002 description: Parameter description for Open API","title":"2.8.Other Feature"},{"location":"1_3_how_to_use_type/","text":"Type \u7528\u4e8e\u6307\u660e\u8be5\u53c2\u6570\u503c\u7684\u6700\u7ec8\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c Pait \u5728\u5185\u90e8\u4f1a\u628a\u7528\u6237\u586b\u5199\u7684\u503c\u8f6c\u6362\u4e3a Pydantic.BaseModel \uff0c\u5e76\u901a\u8fc7 pydantic \u8fdb\u884c\u6821\u9a8c\uff0c \u5982\u4e0b\u9762\u7684\u63a5\u53e3: @pait () async def demo ( a : str = field . Body . i (), b : int = field . Body . i (), ) -> JSONResponse : return JSONResponse ({ \"a\" : a , \"b\" : b }) \u5728 Pait \u5185\u90e8\uff0c \u4f1a\u8ba4\u4e3a\u8be5\u63a5\u53e3\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5982\u4e0b\u7684 Pydantic.BaseModel : from pydantic import BaseModel , Field class Demo ( BaseModel ): a : str = Field () b : int = Field () \u6240\u4ee5\u5728\u63a5\u53e3\u4e2d Type \u53ef\u4ee5\u53d8\u5f97\u975e\u5e38\u7075\u6d3b\uff0c\u4f60\u53ef\u4ee5\u50cf Pydantic Field Types \u4e00\u6837\u4f7f\u7528\u4ee5\u53ca\u76f4\u63a5\u4f7f\u7528 Pydantic Field Types \u7684\u62d3\u5c55Type\u3002 \u6b64\u5916\uff0c Pait \u7684 Type \u8fd8\u652f\u6301\u5176\u5b83\u7684\u529f\u80fd\u3002 1.\u4f7f\u7528Pydantic.BaseModel \u5728\u4f7f\u7528\u4e86 Pait \u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u53d1\u73b0\u6709\u4e9b\u63a5\u53e3\u7684\u53c2\u6570\u53ef\u80fd\u53ef\u4ee5\u590d\u7528\uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528 Type \u4e3aPydantic.BaseModel\u7684\u65b9\u6848\uff0c\u628a\u4e24\u4e2a\u63a5\u53e3\u91cd\u590d\u7684\u53c2\u6570\u62bd\u8c61\u4e3a\u4e00\u4e2apydantic.Basemodel \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c \u9996\u5148\u662f12\u884c\u7684 DemoModel \uff0c\u5b83\u7ee7\u627f\u4e8e Pydantic.BaseModel \u4e14\u6709\u4e09\u4e2a\u5c5e\u6027\u5206\u522b\u4e3a uid , name \u4ee5\u53ca age \uff0c\u7136\u540e\u6709\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u63a5\u53e3\uff0c \u63a5\u53e3 demo \u4eceUrl\u4e2d\u83b7\u53d6\u6240\u6709\u7684\u503c\uff0c\u5e76\u4ea4\u7ed9 DemoModel \u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u901a\u8fc7 .dict \u65b9\u6cd5\u751f\u6210dict\u5e76\u8fd4\u56de\u3002\u63a5\u53e3 demo1 \u4e0e\u63a5\u53e3 demo \u5f88\u50cf\uff0c \u53ea\u4e0d\u8fc7\u662f\u4eceJson Body\u83b7\u53d6\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait from pydantic import BaseModel class demomodel ( basemodel ): uid : str name : str age : int @pait () async def demo ( demo_model : DemoModel = field . Query . i ( raw_return = True )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) @pait () async def demo1 ( demo_model : DemoModel = field . Body . i ( raw_return = True )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"POST\" ])]) uvicorn . run ( app ) \u63a5\u4e0b\u6765\u4f7f\u7528 curl \u5bf9\u4e24\u4e2a\u63a5\u53e3\u8fdb\u884c\u6d4b\u8bd5\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=u12345&name=so1n&age=10\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" -X POST -d '{\"uid\": \"u12345\", \"name\": \"so1n\", \"age\": 10}' --header \"Content-Type: application/json\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a\u63a5\u53e3\u90fd\u80fd\u6b63\u5e38\u7684\u5de5\u4f5c\uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u7528\u6cd5\u4e0b\uff0cField\u7684\u4f5c\u7528\u662f\u9650\u5b9a\u4e8e\u6574\u4e2aBaseModel\u7684\uff0c\u65e0\u6cd5\u4e3a\u6bcf\u4e00\u4e2a\u5c5e\u6027\u4f7f\u7528\u5355\u72ec\u7684 field \uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u3002 2.\u4f7f\u7528\u7279\u6b8a\u7684Pydantic.BaseModel \u7531\u4e8e Pait \u7684 field \u662f\u7ee7\u627f\u4e8e pydantic.FieldInfo \uff0c\u540c\u65f6\u4e5f\u5185\u7f6e\u4e86\u8f6c\u53d8\u4e3a pydantic.FieldInfo \u7684\u65b9\u6cd5\uff0c \u6240\u4ee5\u5728\u4f7f\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u4e0a\u4e2a\u793a\u4f8b\u7684DemoModel\u8fdb\u884c\u8f6c\u53d8\uff0c \u6bd4\u5982\u5bf9\u4e8e\u63a5\u53e3 demo \uff0cDemoModel\u53ef\u4ee5\u53d8\u4e3a\u5982\u4e0b\u4ee3\u7801: from pait import field from pydantic import BaseModel class DemoModel ( BaseModel ): uid : str = field . Query . i ( max_length = 6 , min_length = 6 , regex = \"^u\" ) name : str = field . Query . i ( min_length = 4 , max_length = 10 ) age : int = field . Query . i ( ge = 0 , le = 100 ) request_id : str = field . Header . i ( default = \"\" ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u90fd\u4f7f\u7528\u4e0d\u4e00\u6837\u7684 field \u4e86\uff0c\u540c\u65f6\u8fd8\u589e\u52a0\u4e86\u4e00\u4e2a request_id \u7684\u5c5e\u6027\uff0c\u5b83\u4f1a\u4eceHeader\u83b7\u53d6\u6570\u636e\uff0c\u7136\u540e\u63a5\u53e3 demo \u9700\u8981\u8fdb\u884c\u5bf9\u5e94\u7684\u66f4\u6539\uff0c\u7531\u4e8eDemoModel\u5df2\u7ecf\u5e26\u6709\u4e86 pait.field \uff0c \u6240\u4ee5\u63a5\u53e3\u53c2\u6570\u4e0d\u9700\u8981\u6309\u7167\u4e4b\u524d\u7684\u683c\u5f0f\uff0c \u53ef\u4ee5\u76f4\u63a5\u7701\u7565 field \u7684\u586b\u5199\uff0c \u53d8\u4e3a: @pait () async def demo ( demo_model : DemoModel ) -> JSONResponse : return JSONResponse ( demo_model . dict ()) \u8fd9\u6837 Pait \u4e5f\u80fd\u591f\u8ddf\u4e4b\u524d\u4e00\u6837\u6b63\u786e\u5730\u8bc6\u522b\u5e76\u5904\u7406\u4e86\uff0c\u5728\u8003\u8651\u590d\u7528\u540e\u5b9e\u9645\u7684\u4ee3\u7801\u53ef\u4ee5\u7f16\u5199\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait from pydantic import BaseModel , ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u7684\u629b\u9519 return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) def create_demo_model ( pait_field : Type [ field . BaseField ]) -> Type [ BaseModel ]: class DemoModel ( BaseModel ): uid : str = pait_field . i ( max_length = 6 , min_length = 6 , regex = \"^u\" ) name : str = pait_field . i ( min_length = 4 , max_length = 10 ) age : int = pait_field . i ( ge = 0 , le = 100 ) request_id : str = field . Header . i ( default = \"\" ) return DemoModel @pait () async def demo ( demo_model : create_demo_model ( field . Query )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) @pait () async def demo1 ( demo_model : create_demo_model ( field . Body )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"POST\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u7531\u4e8e\u8981\u652f\u6301\u590d\u7528\uff0c\u572822\u884c\u4f7f\u7528\u51fd\u6570 create_demo_model \u6765\u6839\u636e\u4f20\u5165\u7684 pait.field \u521b\u5efaDemoModel\uff0c\u7136\u540e34\u884c\u548c39\u884c\u7684\u63a5\u53e3\u51fd\u6570\u8fdb\u884c\u5bf9\u5e94\u7684\u66f4\u6539\uff0c \u6700\u540e\u4f7f\u7528 curl \u8fdb\u884c\u8c03\u7528\u53d1\u73b0\u54cd\u5e94\u7684\u7ed3\u679c\u662f\u6b63\u5e38\u7684\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=u12345&name=so1n&age=10\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10, \"request_id\" : \"\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" -X POST -d '{\"uid\": \"u12345\", \"name\": \"so1n\", \"age\": 10}' --header \"Content-Type: application/json\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10, \"request_id\" : \"\" } \u800c\u4e14\u8fd9\u6837\u7f16\u5199\u7684\u4ee3\u7801\u80fd\u9488\u5bf9\u6bcf\u4e2a\u5c5e\u6027\u8fdb\u884c\u5355\u72ec\u5730\u6821\u9a8c\uff0c\u6bd4\u5982\u4f20\u5165\u4e86\u4e0d\u5408\u6cd5\u7684\u53c2\u6570\uff0c Pait \u4ecd\u7136\u53ef\u4ee5\u628a\u53c2\u6570\u4ea4\u7ed9pydantic\u6821\u9a8c\u5e76\u628a\u9519\u8bef\u629b\u51fa\u6765\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=12345&name=so1&age=-1\" { \"data\" : [ { \"loc\" : [ \"uid\" ] , \"msg\" : \"ensure this value has at least 6 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" : 6 } } , { \"loc\" : [ \"name\" ] , \"msg\" : \"ensure this value has at least 4 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" : 4 } } , { \"loc\" : [ \"age\" ] , \"msg\" : \"ensure this value is greater than or equal to 0\" , \"type\" : \"value_error.number.not_ge\" , \"ctx\" : { \"limit_value\" : 0 } } ] } 3.\u5176\u5b83 3.1.Request\u5bf9\u8c61 \u5728\u4f7f\u7528 Pait \u65f6\uff0c Request \u5bf9\u8c61\u4f7f\u7528\u7684\u9891\u7387\u4f1a\u5927\u5e45\u7684\u964d\u4f4e\uff0c\u6240\u4ee5 Pait \u4f1a\u81ea\u52a8\u628a Request \u5bf9\u8c61\u8fdb\u884c\u7701\u7565\uff0c\u6bd4\u5982\u539f\u672c\u7684 Starlette \u7684\u63a5\u53e3\u5199\u6cd5\u662f\uff1a from starlette.requests import Request async def demo ( request : Request ): pass \u800c\u5728\u4f7f\u7528\u4e86 Pait \u540e\u4f1a\u53d8\u4e3a\u5982\u4e0b\u4ee3\u7801\uff1a from pait.app.starlette import pait @pait () async def demo (): pass \u8fd9\u65f6\uff0c\u5982\u679c\u5f00\u53d1\u8005\u9700\u8981 Request \u5bf9\u8c61\u6216\u8005\u4f7f\u7528\u4e86 Sanic \u6846\u67b6\uff0c\u5b83\u4e0d\u652f\u6301\u51fd\u6570\u7b7e\u540d\u4e3a\u7a7a\u7684\u8def\u7531\u51fd\u6570\uff0c\u5219\u4efb\u7136\u53ef\u4ee5\u4f7f\u7528\u6846\u67b6\u539f\u672c\u7684\u65b9\u6cd5\u6765\u83b7\u53d6 Request \u5bf9\u8c61\uff0c \u4e0d\u8fc7 Pait \u4f1a\u8981\u6c42\u586b\u5199\u7684 Type \u5fc5\u987b\u662f Request \u5bf9\u8c61\u7684 Type \uff0c\u624d\u4f1a\u6b63\u786e\u7684\u8d4b\u503c\u5bf9\u5e94\u7684 Request \u5bf9\u8c61\uff0c\u6bd4\u5982\u5728 starlette \u6846\u67b6\u83b7\u53d6 Request \u5bf9\u8c61\u7684\u4ee3\u7801\u5982\u4e0b\uff1a from pait.app.starlette import pait from starlette.requests import Request @pait () async def demo ( request : Request ): pass 3.2.\u5982\u4f55\u81ea\u5b9a\u4e49\u7b26\u5408Pydantic\u6821\u9a8c\u7684Type \u524d\u9762\u63d0\u5230\uff0c\u5728 Pait \u4e2d Type \u8ddfPydantic\u7684 Type \u662f\u4e00\u6837\u7684\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u53ef\u4ee5\u901a\u8fc7 Type \u62d3\u5c55\u6821\u9a8c\u89c4\u5219\u6765\u5f25\u8865 field \u7684\u4e0d\u8db3\uff0c \u6bd4\u5982\u5728\u4e00\u4e2a\u7528\u6237\u53ef\u80fd\u5206\u5e03\u5728\u4e0d\u540c\u56fd\u5bb6\u7684\u4e1a\u52a1\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u9009\u7528\u65f6\u95f4\u6233\u6765\u505a\u65f6\u95f4\u4f20\u9012\uff0c\u9632\u6b62\u65f6\u533a\u4e0d\u540c\u5e26\u6765\u7684\u6570\u636e\u9519\u8bef\uff0c\u8fd9\u65f6\u4ee3\u7801\u53ef\u4ee5\u5199\u4e3a\uff1a import datetime import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait @pait () async def demo ( timestamp : datetime . datetime = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"time\" : timestamp . isoformat ()}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u4e0d\u8fc7\u5728\u8fd0\u884c\u4ee3\u7801\u540e\u4f7f\u7528curl\u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff0c Pydantic \u81ea\u52a8\u628a\u65f6\u95f4\u8f6c\u4e3adatetime\u7c7b\u578b\u4e86\uff0c\u4e14\u65f6\u533a\u662fUTC\u65f6\u533a\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?timestamp=1600000000\" { \"time\" : \"2020-09-13T12:26:40+00:00\" } \u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u5047\u8bbe\u8fd9\u4e2a\u4e1a\u52a1\u7684\u6570\u636e\u5e93\u7684\u670d\u52a1\u5668\u662f\u4f4d\u4e8e\u67d0\u4e2a\u975eUTC\u65f6\u533a\uff0c\u6570\u636e\u5e93\u4e0e\u7a0b\u5e8f\u7684\u65f6\u533a\u90fd\u4f9d\u8d56\u4e8e\u673a\u5668\u7684\u65f6\u533a\uff0c\u8fd9\u6837\u5f00\u53d1\u8005\u5728\u6bcf\u6b21\u83b7\u53d6\u6570\u636e\u540e\u8fd8\u9700\u8981\u518d\u8f6c\u5316\u4e00\u6b21\u53c2\u6570\u7684\u65f6\u533a\uff0c \u5f88\u9ebb\u70e6\uff0c \u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u7f16\u5199\u4e00\u4e2a\u7b26\u5408 Pydantic \u6821\u9a8c\u7684Type\u7c7b\u6765\u89e3\u51b3\u3002 \u4e00\u4e2a\u7b26\u5408 Pydantic \u6821\u9a8c\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u6ee1\u8db3\u5e26\u6709 __get_validators__ \u7c7b\u65b9\u6cd5\uff0c\u4e14\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\uff0c \u4e8e\u662f\u53ef\u4ee5\u81ea\u5df1\u8fd9\u6837\u5b9e\u73b0\u4e00\u4e2a\u65f6\u95f4\u6233\u7684\u8f6c\u6362\u65b9\u6cd5\uff0c\u4f7fPydantic\u5728\u9047\u5230\u65f6\u95f4\u6233\u65f6\uff0c\u80fd\u628a\u65f6\u95f4\u8f6c\u4e3a datetime \u4e14\u8be5\u503c\u5f97\u65f6\u533a\u4e3a\u670d\u52a1\u5668\u7684\u65f6\u533a\uff1a import datetime from typing import Callable , Generator class UnixDatetime ( datetime . datetime ): @classmethod def __get_validators__ ( cls ) -> Generator [ Callable , None , None ]: yield cls . validate @classmethod def validate ( cls , v : int ) -> datetime . datetime : return datetime . datetime . fromtimestamp ( v ) \u7136\u540e\u628a\u8fd9\u4e2a\u7c7b\u5e94\u7528\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff1a import datetime from typing import Callable , Generator , Union import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait class UnixDatetime ( datetime . datetime ): @classmethod def __get_validators__ ( cls ) -> Generator [ Callable , None , None ]: yield cls . validate @classmethod def validate ( cls , v : Union [ int , str ]) -> datetime . datetime : if not isinstance ( v , int ): v = int ( v ) return datetime . datetime . fromtimestamp ( v ) @pait () async def demo ( timestamp : UnixDatetime = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"time\" : timestamp . isoformat ()}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u91cd\u65b0\u8fd0\u884c\u8fd9\u4efd\u4ee3\u7801\u540e\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u6d4b\u8bd5\uff0c \u53d1\u73b0\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u5df2\u7ecf\u6ca1\u6709\u5e26\u65f6\u533a\u4e86\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?timestamp=1600000000\" { \"time\" : \"2020-09-13T20:26:40\" }","title":"Hot to use Type"},{"location":"1_3_how_to_use_type/#1pydanticbasemodel","text":"\u5728\u4f7f\u7528\u4e86 Pait \u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u53d1\u73b0\u6709\u4e9b\u63a5\u53e3\u7684\u53c2\u6570\u53ef\u80fd\u53ef\u4ee5\u590d\u7528\uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528 Type \u4e3aPydantic.BaseModel\u7684\u65b9\u6848\uff0c\u628a\u4e24\u4e2a\u63a5\u53e3\u91cd\u590d\u7684\u53c2\u6570\u62bd\u8c61\u4e3a\u4e00\u4e2apydantic.Basemodel \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c \u9996\u5148\u662f12\u884c\u7684 DemoModel \uff0c\u5b83\u7ee7\u627f\u4e8e Pydantic.BaseModel \u4e14\u6709\u4e09\u4e2a\u5c5e\u6027\u5206\u522b\u4e3a uid , name \u4ee5\u53ca age \uff0c\u7136\u540e\u6709\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u63a5\u53e3\uff0c \u63a5\u53e3 demo \u4eceUrl\u4e2d\u83b7\u53d6\u6240\u6709\u7684\u503c\uff0c\u5e76\u4ea4\u7ed9 DemoModel \u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u901a\u8fc7 .dict \u65b9\u6cd5\u751f\u6210dict\u5e76\u8fd4\u56de\u3002\u63a5\u53e3 demo1 \u4e0e\u63a5\u53e3 demo \u5f88\u50cf\uff0c \u53ea\u4e0d\u8fc7\u662f\u4eceJson Body\u83b7\u53d6\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait from pydantic import BaseModel class demomodel ( basemodel ): uid : str name : str age : int @pait () async def demo ( demo_model : DemoModel = field . Query . i ( raw_return = True )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) @pait () async def demo1 ( demo_model : DemoModel = field . Body . i ( raw_return = True )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"POST\" ])]) uvicorn . run ( app ) \u63a5\u4e0b\u6765\u4f7f\u7528 curl \u5bf9\u4e24\u4e2a\u63a5\u53e3\u8fdb\u884c\u6d4b\u8bd5\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=u12345&name=so1n&age=10\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" -X POST -d '{\"uid\": \"u12345\", \"name\": \"so1n\", \"age\": 10}' --header \"Content-Type: application/json\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a\u63a5\u53e3\u90fd\u80fd\u6b63\u5e38\u7684\u5de5\u4f5c\uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u7528\u6cd5\u4e0b\uff0cField\u7684\u4f5c\u7528\u662f\u9650\u5b9a\u4e8e\u6574\u4e2aBaseModel\u7684\uff0c\u65e0\u6cd5\u4e3a\u6bcf\u4e00\u4e2a\u5c5e\u6027\u4f7f\u7528\u5355\u72ec\u7684 field \uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u3002","title":"1.\u4f7f\u7528Pydantic.BaseModel"},{"location":"1_3_how_to_use_type/#2pydanticbasemodel","text":"\u7531\u4e8e Pait \u7684 field \u662f\u7ee7\u627f\u4e8e pydantic.FieldInfo \uff0c\u540c\u65f6\u4e5f\u5185\u7f6e\u4e86\u8f6c\u53d8\u4e3a pydantic.FieldInfo \u7684\u65b9\u6cd5\uff0c \u6240\u4ee5\u5728\u4f7f\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u4e0a\u4e2a\u793a\u4f8b\u7684DemoModel\u8fdb\u884c\u8f6c\u53d8\uff0c \u6bd4\u5982\u5bf9\u4e8e\u63a5\u53e3 demo \uff0cDemoModel\u53ef\u4ee5\u53d8\u4e3a\u5982\u4e0b\u4ee3\u7801: from pait import field from pydantic import BaseModel class DemoModel ( BaseModel ): uid : str = field . Query . i ( max_length = 6 , min_length = 6 , regex = \"^u\" ) name : str = field . Query . i ( min_length = 4 , max_length = 10 ) age : int = field . Query . i ( ge = 0 , le = 100 ) request_id : str = field . Header . i ( default = \"\" ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u90fd\u4f7f\u7528\u4e0d\u4e00\u6837\u7684 field \u4e86\uff0c\u540c\u65f6\u8fd8\u589e\u52a0\u4e86\u4e00\u4e2a request_id \u7684\u5c5e\u6027\uff0c\u5b83\u4f1a\u4eceHeader\u83b7\u53d6\u6570\u636e\uff0c\u7136\u540e\u63a5\u53e3 demo \u9700\u8981\u8fdb\u884c\u5bf9\u5e94\u7684\u66f4\u6539\uff0c\u7531\u4e8eDemoModel\u5df2\u7ecf\u5e26\u6709\u4e86 pait.field \uff0c \u6240\u4ee5\u63a5\u53e3\u53c2\u6570\u4e0d\u9700\u8981\u6309\u7167\u4e4b\u524d\u7684\u683c\u5f0f\uff0c \u53ef\u4ee5\u76f4\u63a5\u7701\u7565 field \u7684\u586b\u5199\uff0c \u53d8\u4e3a: @pait () async def demo ( demo_model : DemoModel ) -> JSONResponse : return JSONResponse ( demo_model . dict ()) \u8fd9\u6837 Pait \u4e5f\u80fd\u591f\u8ddf\u4e4b\u524d\u4e00\u6837\u6b63\u786e\u5730\u8bc6\u522b\u5e76\u5904\u7406\u4e86\uff0c\u5728\u8003\u8651\u590d\u7528\u540e\u5b9e\u9645\u7684\u4ee3\u7801\u53ef\u4ee5\u7f16\u5199\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait from pydantic import BaseModel , ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u7684\u629b\u9519 return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) def create_demo_model ( pait_field : Type [ field . BaseField ]) -> Type [ BaseModel ]: class DemoModel ( BaseModel ): uid : str = pait_field . i ( max_length = 6 , min_length = 6 , regex = \"^u\" ) name : str = pait_field . i ( min_length = 4 , max_length = 10 ) age : int = pait_field . i ( ge = 0 , le = 100 ) request_id : str = field . Header . i ( default = \"\" ) return DemoModel @pait () async def demo ( demo_model : create_demo_model ( field . Query )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) @pait () async def demo1 ( demo_model : create_demo_model ( field . Body )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"POST\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u7531\u4e8e\u8981\u652f\u6301\u590d\u7528\uff0c\u572822\u884c\u4f7f\u7528\u51fd\u6570 create_demo_model \u6765\u6839\u636e\u4f20\u5165\u7684 pait.field \u521b\u5efaDemoModel\uff0c\u7136\u540e34\u884c\u548c39\u884c\u7684\u63a5\u53e3\u51fd\u6570\u8fdb\u884c\u5bf9\u5e94\u7684\u66f4\u6539\uff0c \u6700\u540e\u4f7f\u7528 curl \u8fdb\u884c\u8c03\u7528\u53d1\u73b0\u54cd\u5e94\u7684\u7ed3\u679c\u662f\u6b63\u5e38\u7684\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=u12345&name=so1n&age=10\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10, \"request_id\" : \"\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" -X POST -d '{\"uid\": \"u12345\", \"name\": \"so1n\", \"age\": 10}' --header \"Content-Type: application/json\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10, \"request_id\" : \"\" } \u800c\u4e14\u8fd9\u6837\u7f16\u5199\u7684\u4ee3\u7801\u80fd\u9488\u5bf9\u6bcf\u4e2a\u5c5e\u6027\u8fdb\u884c\u5355\u72ec\u5730\u6821\u9a8c\uff0c\u6bd4\u5982\u4f20\u5165\u4e86\u4e0d\u5408\u6cd5\u7684\u53c2\u6570\uff0c Pait \u4ecd\u7136\u53ef\u4ee5\u628a\u53c2\u6570\u4ea4\u7ed9pydantic\u6821\u9a8c\u5e76\u628a\u9519\u8bef\u629b\u51fa\u6765\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=12345&name=so1&age=-1\" { \"data\" : [ { \"loc\" : [ \"uid\" ] , \"msg\" : \"ensure this value has at least 6 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" : 6 } } , { \"loc\" : [ \"name\" ] , \"msg\" : \"ensure this value has at least 4 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" : 4 } } , { \"loc\" : [ \"age\" ] , \"msg\" : \"ensure this value is greater than or equal to 0\" , \"type\" : \"value_error.number.not_ge\" , \"ctx\" : { \"limit_value\" : 0 } } ] }","title":"2.\u4f7f\u7528\u7279\u6b8a\u7684Pydantic.BaseModel"},{"location":"1_3_how_to_use_type/#3","text":"","title":"3.\u5176\u5b83"},{"location":"1_3_how_to_use_type/#31request","text":"\u5728\u4f7f\u7528 Pait \u65f6\uff0c Request \u5bf9\u8c61\u4f7f\u7528\u7684\u9891\u7387\u4f1a\u5927\u5e45\u7684\u964d\u4f4e\uff0c\u6240\u4ee5 Pait \u4f1a\u81ea\u52a8\u628a Request \u5bf9\u8c61\u8fdb\u884c\u7701\u7565\uff0c\u6bd4\u5982\u539f\u672c\u7684 Starlette \u7684\u63a5\u53e3\u5199\u6cd5\u662f\uff1a from starlette.requests import Request async def demo ( request : Request ): pass \u800c\u5728\u4f7f\u7528\u4e86 Pait \u540e\u4f1a\u53d8\u4e3a\u5982\u4e0b\u4ee3\u7801\uff1a from pait.app.starlette import pait @pait () async def demo (): pass \u8fd9\u65f6\uff0c\u5982\u679c\u5f00\u53d1\u8005\u9700\u8981 Request \u5bf9\u8c61\u6216\u8005\u4f7f\u7528\u4e86 Sanic \u6846\u67b6\uff0c\u5b83\u4e0d\u652f\u6301\u51fd\u6570\u7b7e\u540d\u4e3a\u7a7a\u7684\u8def\u7531\u51fd\u6570\uff0c\u5219\u4efb\u7136\u53ef\u4ee5\u4f7f\u7528\u6846\u67b6\u539f\u672c\u7684\u65b9\u6cd5\u6765\u83b7\u53d6 Request \u5bf9\u8c61\uff0c \u4e0d\u8fc7 Pait \u4f1a\u8981\u6c42\u586b\u5199\u7684 Type \u5fc5\u987b\u662f Request \u5bf9\u8c61\u7684 Type \uff0c\u624d\u4f1a\u6b63\u786e\u7684\u8d4b\u503c\u5bf9\u5e94\u7684 Request \u5bf9\u8c61\uff0c\u6bd4\u5982\u5728 starlette \u6846\u67b6\u83b7\u53d6 Request \u5bf9\u8c61\u7684\u4ee3\u7801\u5982\u4e0b\uff1a from pait.app.starlette import pait from starlette.requests import Request @pait () async def demo ( request : Request ): pass","title":"3.1.Request\u5bf9\u8c61"},{"location":"1_3_how_to_use_type/#32pydantictype","text":"\u524d\u9762\u63d0\u5230\uff0c\u5728 Pait \u4e2d Type \u8ddfPydantic\u7684 Type \u662f\u4e00\u6837\u7684\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u53ef\u4ee5\u901a\u8fc7 Type \u62d3\u5c55\u6821\u9a8c\u89c4\u5219\u6765\u5f25\u8865 field \u7684\u4e0d\u8db3\uff0c \u6bd4\u5982\u5728\u4e00\u4e2a\u7528\u6237\u53ef\u80fd\u5206\u5e03\u5728\u4e0d\u540c\u56fd\u5bb6\u7684\u4e1a\u52a1\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u9009\u7528\u65f6\u95f4\u6233\u6765\u505a\u65f6\u95f4\u4f20\u9012\uff0c\u9632\u6b62\u65f6\u533a\u4e0d\u540c\u5e26\u6765\u7684\u6570\u636e\u9519\u8bef\uff0c\u8fd9\u65f6\u4ee3\u7801\u53ef\u4ee5\u5199\u4e3a\uff1a import datetime import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait @pait () async def demo ( timestamp : datetime . datetime = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"time\" : timestamp . isoformat ()}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u4e0d\u8fc7\u5728\u8fd0\u884c\u4ee3\u7801\u540e\u4f7f\u7528curl\u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff0c Pydantic \u81ea\u52a8\u628a\u65f6\u95f4\u8f6c\u4e3adatetime\u7c7b\u578b\u4e86\uff0c\u4e14\u65f6\u533a\u662fUTC\u65f6\u533a\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?timestamp=1600000000\" { \"time\" : \"2020-09-13T12:26:40+00:00\" } \u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u5047\u8bbe\u8fd9\u4e2a\u4e1a\u52a1\u7684\u6570\u636e\u5e93\u7684\u670d\u52a1\u5668\u662f\u4f4d\u4e8e\u67d0\u4e2a\u975eUTC\u65f6\u533a\uff0c\u6570\u636e\u5e93\u4e0e\u7a0b\u5e8f\u7684\u65f6\u533a\u90fd\u4f9d\u8d56\u4e8e\u673a\u5668\u7684\u65f6\u533a\uff0c\u8fd9\u6837\u5f00\u53d1\u8005\u5728\u6bcf\u6b21\u83b7\u53d6\u6570\u636e\u540e\u8fd8\u9700\u8981\u518d\u8f6c\u5316\u4e00\u6b21\u53c2\u6570\u7684\u65f6\u533a\uff0c \u5f88\u9ebb\u70e6\uff0c \u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u7f16\u5199\u4e00\u4e2a\u7b26\u5408 Pydantic \u6821\u9a8c\u7684Type\u7c7b\u6765\u89e3\u51b3\u3002 \u4e00\u4e2a\u7b26\u5408 Pydantic \u6821\u9a8c\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u6ee1\u8db3\u5e26\u6709 __get_validators__ \u7c7b\u65b9\u6cd5\uff0c\u4e14\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\uff0c \u4e8e\u662f\u53ef\u4ee5\u81ea\u5df1\u8fd9\u6837\u5b9e\u73b0\u4e00\u4e2a\u65f6\u95f4\u6233\u7684\u8f6c\u6362\u65b9\u6cd5\uff0c\u4f7fPydantic\u5728\u9047\u5230\u65f6\u95f4\u6233\u65f6\uff0c\u80fd\u628a\u65f6\u95f4\u8f6c\u4e3a datetime \u4e14\u8be5\u503c\u5f97\u65f6\u533a\u4e3a\u670d\u52a1\u5668\u7684\u65f6\u533a\uff1a import datetime from typing import Callable , Generator class UnixDatetime ( datetime . datetime ): @classmethod def __get_validators__ ( cls ) -> Generator [ Callable , None , None ]: yield cls . validate @classmethod def validate ( cls , v : int ) -> datetime . datetime : return datetime . datetime . fromtimestamp ( v ) \u7136\u540e\u628a\u8fd9\u4e2a\u7c7b\u5e94\u7528\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff1a import datetime from typing import Callable , Generator , Union import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait class UnixDatetime ( datetime . datetime ): @classmethod def __get_validators__ ( cls ) -> Generator [ Callable , None , None ]: yield cls . validate @classmethod def validate ( cls , v : Union [ int , str ]) -> datetime . datetime : if not isinstance ( v , int ): v = int ( v ) return datetime . datetime . fromtimestamp ( v ) @pait () async def demo ( timestamp : UnixDatetime = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"time\" : timestamp . isoformat ()}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u91cd\u65b0\u8fd0\u884c\u8fd9\u4efd\u4ee3\u7801\u540e\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u6d4b\u8bd5\uff0c \u53d1\u73b0\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u5df2\u7ecf\u6ca1\u6709\u5e26\u65f6\u533a\u4e86\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?timestamp=1600000000\" { \"time\" : \"2020-09-13T20:26:40\" }","title":"3.2.\u5982\u4f55\u81ea\u5b9a\u4e49\u7b26\u5408Pydantic\u6821\u9a8c\u7684Type"},{"location":"1_4_depend/","text":"Pait \u7684 Depend \u8bbe\u8ba1\u53c2\u8003\u4e86 FastAPI \uff0c\u5b83\u7684\u4f5c\u7528\u8ddf FastAPI \u5f88\u50cf\uff0c \u7528\u6237\u901a\u8fc7 Pait \u7684 Depend \u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u529f\u80fd: \u5171\u4eab\u4e00\u4e9b\u76f8\u540c\u7684\u903b\u8f91 \u5b9e\u73b0\u4e00\u4e9b\u5b89\u5168\u6821\u9a8c\u7684\u529f\u80fd \u4e0e\u522b\u7684\u7cfb\u7edf\u4ea4\u4e92(\u5982\u6570\u636e\u5e93)\u3002 \u793a\u4f8b\u4ee3\u7801\u90fd\u662f\u4f7f\u7528 async def \u8bed\u6cd5\uff0c\u5b9e\u9645\u4e0a\u4e5f\u662f\u652f\u6301 def \u8bed\u6cd5\u3002 1.\u4f7f\u7528Depend\u529f\u80fd \u4e00\u822c\u7684\u540e\u7aef\u7cfb\u7edf\u4e2d\u90fd\u5e26\u6709\u7528\u6237Token\u6821\u9a8c\u4e1a\u52a1\uff0c\u8fd9\u4e2a\u4e1a\u52a1\u662f\u975e\u5e38\u7b26\u5408Depend\u7684\u4f7f\u7528\u573a\u666f\u3002 \u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u7528\u6237\u6bcf\u6b21\u8bbf\u95ee\u63a5\u53e3\u65f6\u90fd\u9700\u8981\u5e26\u4e0aToken\uff0c\u670d\u52a1\u7aef\u6536\u5230\u7528\u6237\u7684\u8bf7\u6c42\u540e\u4f1a\u5148\u5224\u65adToken\u662f\u5426\u5408\u6cd5\uff0c\u5982\u679c\u4e0d\u5408\u6cd5\u5219\u4f1a\u8fd4\u56de\u9519\u8bef\uff0c\u5408\u6cd5\u5219\u4f1a\u6267\u884c\u63a5\u53e3\u7684\u903b\u8f91\u3002 \u5982\u679c\u5728\u4f7f\u7528\u7c7b Flask \u8fd9\u7c7b\u578b\u7684\u5faeWeb\u6846\u67b6\uff0c\u90a3\u4e48\u90fd\u4f1a\u9009\u62e9\u4f7f\u7528Python\u88c5\u9970\u5668\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u5171\u4eab\u7528\u6237Token\u6821\u9a8c\uff0c\u6709\u4e9b\u65f6\u5019\u9664\u4e86\u5b9e\u73b0\u6821\u9a8cToken\u5916\uff0c \u8fd8\u4f1a\u6839\u636eToken\u83b7\u53d6uid\u5e76\u4f20\u7ed9\u8def\u7531\u51fd\u6570\u7684\u529f\u80fd\uff0c\u4f46\u662f\u8fd9\u79cd\u5b9e\u73b0\u65b9\u6cd5\u6bd4\u8f83\u52a8\u6001\uff0c\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u5f88\u96be\u68c0\u6d4b\u51fa\u6765\uff0c\u800c\u4f7f\u7528 Pait \u7684 Depend \u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u5176\u4e2d\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u662f\u6a21\u4eff\u6570\u636e\u5e93\u7684\u8c03\u7528\u65b9\u6cd5\uff0c\u76ee\u524d\u5047\u8bbe\u6570\u636e\u5e93\u53ea\u6709token\u4e3a\"u12345\"\u7684\u503c\uff1b\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u8fd9\u6bb5\u51fd\u6570\u53ef\u4ee5\u88ab Pait \u7684 Depend \u4f7f\u7528\uff0c \u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u586b\u5199\u89c4\u5219\u4e0e Pait \u88c5\u9970\u7684\u8def\u7531\u51fd\u6570\u4e00\u81f4\uff0c\u4e4b\u524d\u63d0\u5230\u7684\u4efb\u4f55\u5199\u6cd5\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u800c\u76ee\u524d\u8fd9\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u4eceHeader\u4e2d\u83b7\u53d6Token\uff0c\u5e76\u6821\u9a8cToken\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u9519\u3002\u7b2c\u4e09\u6bb5\u9ad8\u4eae\u5219\u662f\u8def\u7531\u51fd\u6570\u586b\u5199\u7684Token\u53c2\u6570\uff0c\u6bd4\u8f83\u7279\u6b8a\u7684\u662f\u8fd9\u91cc\u901a\u8fc7 field.Depend \u6765\u88f9\u4f4f\u4e0a\u9762\u7684 get_user_by_token \u51fd\u6570\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"user\" : token }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u63a5\u7740\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53d1\u73b0\u8fd9\u6bb5\u4ee3\u7801\u5de5\u4f5c\u4e00\u5207\u6b63\u5e38\uff0ctoken\u5b58\u5728\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u629b\u9519\u4fe1\u606f: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u12345\" { \"user\" : \"so1n\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u123456\" { \"data\" : \"Can not found by token:u123456\" } \u6b64\u5916\uff0c Pait \u80fd\u652f\u6301\u591a\u5c42Depend\u5d4c\u5957\u7684\uff0c\u4f46\u662f\u4e00\u822c\u4e0d\u63a8\u8350\u5d4c\u5957\u7684\u5c42\u6570\u592a\u591a\uff0c\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u5047\u8bbeToken\u8981\u7ecf\u8fc7\u4e00\u5c42\u7279\u522b\u7684\u6821\u9a8c\uff0c\u4e14\u8be5\u6821\u9a8c\u903b\u8f91\u4f1a\u88ab\u590d\u7528\uff0c\u5219\u4ee3\u7801\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } def check_token ( token : str = field . Header . i ()) -> str : if len ( token ) != 6 and token [ 0 ] != \"u\" : raise RuntimeError ( \"Illegal Token\" ) return token async def get_user_by_token ( token : str = field . Depends . i ( check_token )) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"user\" : token }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u4e3a\u65b0\u4fee\u6539\u7684\u5730\u65b9\uff0c \u4e3b\u8981\u662f\u65b0\u589e\u4e86\u4e00\u4e2a check_token \u7684\u51fd\u6570\uff0c\u7528\u6765\u83b7\u53d6\u548c\u6821\u9a8cToken\uff0c\u800c get_user_by_token \u5219\u4f9d\u8d56\u4e8e check_token \u83b7\u53d6Token\u5e76\u5224\u65ad\u7528\u6237\u662f\u5426\u5b58\u5728\u3002 \u4f7f\u7528 curl \u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5\uff0c\u53d1\u73b0\u54cd\u5e94\u7ed3\u679c\u6b63\u5e38\uff0c\u4e0d\u7b26\u5408\u6821\u9a8c\u903b\u8f91\u7684\u4f1a\u8fd4\u56de\u629b\u9519\u4fe1\u606f\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u12345\" { \"user\" : \"so1n\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:fu12345\" { \"data\" : \"Illegal Token\" } 2.\u7ed3\u5408Python ContextManager\u7684Depend \u4e0a\u8ff0\u6240\u793a\u7684 Depends \u7528\u6cd5\u867d\u7136\u80fd\u6b63\u5e38\u7684\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4e0d\u80fd\u50cfPython\u88c5\u9970\u5668\u4e00\u6837\u77e5\u9053\u51fd\u6570\u7684\u8fd0\u884c\u60c5\u51b5\uff0c\u5305\u62ec\u51fd\u6570\u662f\u5426\u6b63\u5e38\u8fd0\u884c\uff0c\u51fd\u6570\u4f55\u65f6\u8fd0\u884c\u7ed3\u675f\u7b49\uff0c \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898 Pait \u91c7\u7528\u4e86\u548c pytest.fixture \u4e00\u6837\u7684\u89e3\u51b3\u65b9\u6848--\u5f15\u5165 ContextManager \u3002 \u8fd9\u79cd\u65b9\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u628a\u51fd\u6570\u52a0\u4e0a\u5bf9\u5e94\u7684 ContextManager \u88c5\u9970\u5668\uff0c\u7136\u540e\u6309\u7167\u5b98\u65b9\u6587\u6863\u4f7f\u7528 try , except , finally \u8bed\u6cd5\u5757\u5373\u53ef\u5b9e\u73b0\uff0c\u5982\u4e0b\u4f8b\u5b50: from contextlib import contextmanager from typing import Any , Generator @contextmanager def demo () -> Generator [ Any , Any , Any ]: try : # 1 yield None except Exception : # 2 pass finally : # 3 pass \u8be5\u4f8b\u5b50\u4e2d\u5e8f\u53f71\u7684\u4f4d\u7f6e\u7528\u6765\u7f16\u5199\u6b63\u5e38\u7684\u51fd\u6570\u903b\u8f91\uff0c\u5e76\u901a\u8fc7yield\u8fd4\u56de\u6570\u636e\uff0c\u5e8f\u53f72\u7684\u4f4d\u7f6e\u7528\u6765\u5199\u5f53\u51fd\u6570\u8fd0\u884c\u5f02\u5e38\u65f6\u7684\u4ee3\u7801\u903b\u8f91\uff0c\u6700\u540e\u7684\u5e8f\u53f73\u5219\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u5904\u7406\u903b\u8f91\u3002 Note ContextManager \u7684 Depend \u51fd\u6570\u9664\u4e86\u53c2\u6570\u5916\uff0c\u5176\u4f59\u7684\u7f16\u5199\u65b9\u6cd5\u548c\u5b98\u65b9\u7684\u4e00\u81f4\uff0c\u5177\u4f53\u53ef\u89c1 contextlib \u2014 Utilities for with-statement contexts \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u4f7f\u7528\u4e86 ContextManager \u7684 Depend \u4f8b\u5b50\uff0c \u8be5\u4f8b\u5b50\u5047\u8bbe\u6bcf\u6b21\u8c03\u7528\u8bf7\u6c42\u65f6\u90fd\u4f1a\u57fa\u4e8e\u5bf9\u5e94\u7684uid\u521b\u5efa\u4e00\u4e2aSession\uff0c\u5e76\u5728\u8bf7\u6c42\u7ed3\u675f\u4f1a\u81ea\u52a8\u5173\u95ed\uff1a from contextlib import asynccontextmanager from typing import Any , AsyncGenerator import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) class _DemoSession ( object ): def __init__ ( self , uid : int ) -> None : self . _uid : int = uid self . _status : bool = False @property def uid ( self ) -> int : if self . _status : return self . _uid else : raise RuntimeError ( \"Session is close\" ) def create ( self ) -> None : self . _status = True def close ( self ) -> None : self . _status = False @asynccontextmanager async def async_context_depend ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 )) -> AsyncGenerator [ int , Any ]: session : _DemoSession = _DemoSession ( uid ) try : print ( \"context_depend init\" ) session . create () yield session . uid except Exception : print ( \"context_depend error\" ) finally : print ( \"context_depend exit\" ) session . close () @pait () async def demo ( uid : str = field . Depends . i ( async_context_depend ), is_raise : bool = field . Query . i ( default = False ) ) -> JSONResponse : if is_raise : raise RuntimeError () return JSONResponse ({ \"code\" : 0 , \"msg\" : uid }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4ee3\u7801\u4e2d\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u662f\u6a21\u62df\u4e00\u4e2a\u57fa\u4e8eUid\u7684Session\uff0c\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u5219\u662f\u4e00\u6bb5\u5e26\u6709 ContextManger \u7684Depends\u51fd\u6570\uff0c\u5e76\u5206\u522b\u5728 try , except \u4ee5\u53ca finally \u6253\u5370\u4e0d\u540c\u7684\u5185\u5bb9\uff0c \u800c\u7b2c\u4e09\u5757\u9ad8\u4eae\u5219\u662f\u8def\u7531\u51fd\u6570\uff0c\u5b83\u4f1a\u4f9d\u636e\u53c2\u6570 is_raise \u662f\u5426\u4e3a True \u6765\u51b3\u5b9a\u629b\u9519\u8fd8\u662f\u6b63\u5e38\u8fd4\u56de\u3002 \u73b0\u5728\u8fd0\u884c\u4ee3\u7801\u5e76\u4f7f\u7528 curl \u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5\uff0c\u53d1\u73b0\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u662f\u901a\u8fc7\u7684\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u53d1\u751f\u5f02\u5e38\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=999\" { \"code\" :0, \"msg\" :999 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=999&is_raise=True\" { \"data\" : \"\" } \u8fd9\u65f6\u5207\u56de\u5230\u8fd0\u884cPython\u8fdb\u7a0b\u7684\u7ec8\u7aef\uff0c\u53ef\u4ee5\u53d1\u73b0\u7ec8\u7aef\u6253\u5370\u4e86\u5982\u4e0b\u6570\u636e: context_depend init context_depend exit INFO: 127 .0.0.1:44162 - \"GET /api/demo?uid=999 HTTP/1.1\" 200 OK context_depend init context_depend error context_depend exit INFO: 127 .0.0.1:44164 - \"GET /api/demo?uid=999&is_raise=True HTTP/1.1\" 200 OK \u4ece\u8f93\u51fa\u7684\u6570\u636e\u53ef\u4ee5\u770b\u51fa\uff0c \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u53ea\u6253\u5370\u4e86 init \u548c exit \uff0c\u800c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u4f1a\u4ea7\u751f\u5f02\u5e38\u7684\u8bf7\u6c42\u5219\u591a\u6253\u5370\u4e86 error \u3002 3.Pre-Depend \u5728\u4e00\u4e9b\u573a\u666f\u4e0b\u53ea\u9700\u8981 Depends \u51fd\u6570\u6267\u884c\u6821\u9a8c\u903b\u8f91\uff0c\u5982\u679c\u6821\u9a8c\u5931\u8d25\u5c31\u629b\u51fa\u9519\u8bef\uff0c\u63a5\u53e3\u5e76\u4e0d\u9700\u8981 Depends \u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u6bd4\u5982\u5728\u7b2c\u4e00\u4e2a\u573a\u666f\u4e2d\uff0c \u4e0d\u9700\u8981\u7528\u5230\u51fd\u6570 get_user_by_token \u7684\u8fd4\u56de\u503c\uff0c\u4ee3\u7801\u5219\u4f1a\u53d8\u6210\u8fd9\u6837: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5982\u679c\u8fd9\u6bb5\u4ee3\u7801\u662f\u4f7f\u7528IDE\u8fdb\u884c\u7f16\u5199\u7684\uff0c\u90a3\u4e48\u9ad8\u4eae\u5904\u7684token\u53d8\u91cf\u4f1a\u88ab\u6253\u4e0a\u4e0b\u5212\u7ebf\uff0c\u5982\u679c\u4f7f\u7528 pyflake \u8fdb\u884c\u4ee3\u7801\u68c0\u6d4b\uff0c\u53ef\u80fd\u4f1a\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u8fd9\u65f6\u53ef\u4ee5\u628a\u9ad8\u4eae\u5904\u4ee3\u7801\u7684token\u53c2\u6570\u540d\u6539\u4e3a _ \u6765\u89e3\u51b3\u95ee\u9898\uff0c\u5982\u4e0b: @pait () async def demo ( _ : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) \u4f46\u662fPython\u662f\u4e0d\u652f\u6301\u4e00\u4e2a\u51fd\u6570\u5185\u51fa\u73b0\u76f8\u540c\u540d\u5b57\u7684\u53d8\u91cf\uff0c \u8fd9\u610f\u5473\u7740\u6709\u591a\u4e2a\u7c7b\u4f3c\u7684\u53c2\u6570\u65f6\uff0c\u4e0d\u80fd\u628a\u4ed6\u4eec\u53d8\u91cf\u540d\u90fd\u6539\u4e3a _ \u3002 \u4e3a\u6b64\uff0c Pait \u901a\u8fc7\u53ef\u9009\u53c2\u6570 pre_depend_list \u6765\u63d0\u4f9b\u4e86 Pre-Depends \u529f\u80fd\uff0c\u7528\u6237\u53ea\u9700\u8981\u628a\u51fd\u6570\u4f20\u5165\u5230Pait\u7684pre_depend_list\u53ef\u9009\u53c2\u6570\u5373\u53ef\uff0c \u4ee3\u7801\u7684\u903b\u8f91\u548c\u529f\u80fd\u5747\u4e0d\u4f1a\u88ab\u53d7\u5230\u5f71\u54cd\uff0c\u8fd9\u6837\u4fee\u6539\u540e\u4ee3\u7801\u4f1a\u53d8\u4e3a\u5982\u4e0b\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait ( pre_depend_list = [ get_user_by_token ]) async def demo () -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Note \u8fd9\u79cd\u60c5\u51b5\u4e0b Pait \u4f1a\u5148\u6267\u884c pre_depend_list \u7684\u51fd\u6570\u518d\u6267\u884c\u8def\u7531\u51fd\u6570\u3002","title":"Depend"},{"location":"1_4_depend/#1depend","text":"\u4e00\u822c\u7684\u540e\u7aef\u7cfb\u7edf\u4e2d\u90fd\u5e26\u6709\u7528\u6237Token\u6821\u9a8c\u4e1a\u52a1\uff0c\u8fd9\u4e2a\u4e1a\u52a1\u662f\u975e\u5e38\u7b26\u5408Depend\u7684\u4f7f\u7528\u573a\u666f\u3002 \u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u7528\u6237\u6bcf\u6b21\u8bbf\u95ee\u63a5\u53e3\u65f6\u90fd\u9700\u8981\u5e26\u4e0aToken\uff0c\u670d\u52a1\u7aef\u6536\u5230\u7528\u6237\u7684\u8bf7\u6c42\u540e\u4f1a\u5148\u5224\u65adToken\u662f\u5426\u5408\u6cd5\uff0c\u5982\u679c\u4e0d\u5408\u6cd5\u5219\u4f1a\u8fd4\u56de\u9519\u8bef\uff0c\u5408\u6cd5\u5219\u4f1a\u6267\u884c\u63a5\u53e3\u7684\u903b\u8f91\u3002 \u5982\u679c\u5728\u4f7f\u7528\u7c7b Flask \u8fd9\u7c7b\u578b\u7684\u5faeWeb\u6846\u67b6\uff0c\u90a3\u4e48\u90fd\u4f1a\u9009\u62e9\u4f7f\u7528Python\u88c5\u9970\u5668\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u5171\u4eab\u7528\u6237Token\u6821\u9a8c\uff0c\u6709\u4e9b\u65f6\u5019\u9664\u4e86\u5b9e\u73b0\u6821\u9a8cToken\u5916\uff0c \u8fd8\u4f1a\u6839\u636eToken\u83b7\u53d6uid\u5e76\u4f20\u7ed9\u8def\u7531\u51fd\u6570\u7684\u529f\u80fd\uff0c\u4f46\u662f\u8fd9\u79cd\u5b9e\u73b0\u65b9\u6cd5\u6bd4\u8f83\u52a8\u6001\uff0c\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u5f88\u96be\u68c0\u6d4b\u51fa\u6765\uff0c\u800c\u4f7f\u7528 Pait \u7684 Depend \u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u5176\u4e2d\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u662f\u6a21\u4eff\u6570\u636e\u5e93\u7684\u8c03\u7528\u65b9\u6cd5\uff0c\u76ee\u524d\u5047\u8bbe\u6570\u636e\u5e93\u53ea\u6709token\u4e3a\"u12345\"\u7684\u503c\uff1b\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u8fd9\u6bb5\u51fd\u6570\u53ef\u4ee5\u88ab Pait \u7684 Depend \u4f7f\u7528\uff0c \u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u586b\u5199\u89c4\u5219\u4e0e Pait \u88c5\u9970\u7684\u8def\u7531\u51fd\u6570\u4e00\u81f4\uff0c\u4e4b\u524d\u63d0\u5230\u7684\u4efb\u4f55\u5199\u6cd5\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u800c\u76ee\u524d\u8fd9\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u4eceHeader\u4e2d\u83b7\u53d6Token\uff0c\u5e76\u6821\u9a8cToken\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u9519\u3002\u7b2c\u4e09\u6bb5\u9ad8\u4eae\u5219\u662f\u8def\u7531\u51fd\u6570\u586b\u5199\u7684Token\u53c2\u6570\uff0c\u6bd4\u8f83\u7279\u6b8a\u7684\u662f\u8fd9\u91cc\u901a\u8fc7 field.Depend \u6765\u88f9\u4f4f\u4e0a\u9762\u7684 get_user_by_token \u51fd\u6570\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"user\" : token }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u63a5\u7740\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53d1\u73b0\u8fd9\u6bb5\u4ee3\u7801\u5de5\u4f5c\u4e00\u5207\u6b63\u5e38\uff0ctoken\u5b58\u5728\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u629b\u9519\u4fe1\u606f: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u12345\" { \"user\" : \"so1n\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u123456\" { \"data\" : \"Can not found by token:u123456\" } \u6b64\u5916\uff0c Pait \u80fd\u652f\u6301\u591a\u5c42Depend\u5d4c\u5957\u7684\uff0c\u4f46\u662f\u4e00\u822c\u4e0d\u63a8\u8350\u5d4c\u5957\u7684\u5c42\u6570\u592a\u591a\uff0c\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u5047\u8bbeToken\u8981\u7ecf\u8fc7\u4e00\u5c42\u7279\u522b\u7684\u6821\u9a8c\uff0c\u4e14\u8be5\u6821\u9a8c\u903b\u8f91\u4f1a\u88ab\u590d\u7528\uff0c\u5219\u4ee3\u7801\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } def check_token ( token : str = field . Header . i ()) -> str : if len ( token ) != 6 and token [ 0 ] != \"u\" : raise RuntimeError ( \"Illegal Token\" ) return token async def get_user_by_token ( token : str = field . Depends . i ( check_token )) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"user\" : token }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u4e3a\u65b0\u4fee\u6539\u7684\u5730\u65b9\uff0c \u4e3b\u8981\u662f\u65b0\u589e\u4e86\u4e00\u4e2a check_token \u7684\u51fd\u6570\uff0c\u7528\u6765\u83b7\u53d6\u548c\u6821\u9a8cToken\uff0c\u800c get_user_by_token \u5219\u4f9d\u8d56\u4e8e check_token \u83b7\u53d6Token\u5e76\u5224\u65ad\u7528\u6237\u662f\u5426\u5b58\u5728\u3002 \u4f7f\u7528 curl \u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5\uff0c\u53d1\u73b0\u54cd\u5e94\u7ed3\u679c\u6b63\u5e38\uff0c\u4e0d\u7b26\u5408\u6821\u9a8c\u903b\u8f91\u7684\u4f1a\u8fd4\u56de\u629b\u9519\u4fe1\u606f\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u12345\" { \"user\" : \"so1n\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:fu12345\" { \"data\" : \"Illegal Token\" }","title":"1.\u4f7f\u7528Depend\u529f\u80fd"},{"location":"1_4_depend/#2python-contextmanagerdepend","text":"\u4e0a\u8ff0\u6240\u793a\u7684 Depends \u7528\u6cd5\u867d\u7136\u80fd\u6b63\u5e38\u7684\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4e0d\u80fd\u50cfPython\u88c5\u9970\u5668\u4e00\u6837\u77e5\u9053\u51fd\u6570\u7684\u8fd0\u884c\u60c5\u51b5\uff0c\u5305\u62ec\u51fd\u6570\u662f\u5426\u6b63\u5e38\u8fd0\u884c\uff0c\u51fd\u6570\u4f55\u65f6\u8fd0\u884c\u7ed3\u675f\u7b49\uff0c \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898 Pait \u91c7\u7528\u4e86\u548c pytest.fixture \u4e00\u6837\u7684\u89e3\u51b3\u65b9\u6848--\u5f15\u5165 ContextManager \u3002 \u8fd9\u79cd\u65b9\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u628a\u51fd\u6570\u52a0\u4e0a\u5bf9\u5e94\u7684 ContextManager \u88c5\u9970\u5668\uff0c\u7136\u540e\u6309\u7167\u5b98\u65b9\u6587\u6863\u4f7f\u7528 try , except , finally \u8bed\u6cd5\u5757\u5373\u53ef\u5b9e\u73b0\uff0c\u5982\u4e0b\u4f8b\u5b50: from contextlib import contextmanager from typing import Any , Generator @contextmanager def demo () -> Generator [ Any , Any , Any ]: try : # 1 yield None except Exception : # 2 pass finally : # 3 pass \u8be5\u4f8b\u5b50\u4e2d\u5e8f\u53f71\u7684\u4f4d\u7f6e\u7528\u6765\u7f16\u5199\u6b63\u5e38\u7684\u51fd\u6570\u903b\u8f91\uff0c\u5e76\u901a\u8fc7yield\u8fd4\u56de\u6570\u636e\uff0c\u5e8f\u53f72\u7684\u4f4d\u7f6e\u7528\u6765\u5199\u5f53\u51fd\u6570\u8fd0\u884c\u5f02\u5e38\u65f6\u7684\u4ee3\u7801\u903b\u8f91\uff0c\u6700\u540e\u7684\u5e8f\u53f73\u5219\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u5904\u7406\u903b\u8f91\u3002 Note ContextManager \u7684 Depend \u51fd\u6570\u9664\u4e86\u53c2\u6570\u5916\uff0c\u5176\u4f59\u7684\u7f16\u5199\u65b9\u6cd5\u548c\u5b98\u65b9\u7684\u4e00\u81f4\uff0c\u5177\u4f53\u53ef\u89c1 contextlib \u2014 Utilities for with-statement contexts \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u4f7f\u7528\u4e86 ContextManager \u7684 Depend \u4f8b\u5b50\uff0c \u8be5\u4f8b\u5b50\u5047\u8bbe\u6bcf\u6b21\u8c03\u7528\u8bf7\u6c42\u65f6\u90fd\u4f1a\u57fa\u4e8e\u5bf9\u5e94\u7684uid\u521b\u5efa\u4e00\u4e2aSession\uff0c\u5e76\u5728\u8bf7\u6c42\u7ed3\u675f\u4f1a\u81ea\u52a8\u5173\u95ed\uff1a from contextlib import asynccontextmanager from typing import Any , AsyncGenerator import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) class _DemoSession ( object ): def __init__ ( self , uid : int ) -> None : self . _uid : int = uid self . _status : bool = False @property def uid ( self ) -> int : if self . _status : return self . _uid else : raise RuntimeError ( \"Session is close\" ) def create ( self ) -> None : self . _status = True def close ( self ) -> None : self . _status = False @asynccontextmanager async def async_context_depend ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 )) -> AsyncGenerator [ int , Any ]: session : _DemoSession = _DemoSession ( uid ) try : print ( \"context_depend init\" ) session . create () yield session . uid except Exception : print ( \"context_depend error\" ) finally : print ( \"context_depend exit\" ) session . close () @pait () async def demo ( uid : str = field . Depends . i ( async_context_depend ), is_raise : bool = field . Query . i ( default = False ) ) -> JSONResponse : if is_raise : raise RuntimeError () return JSONResponse ({ \"code\" : 0 , \"msg\" : uid }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4ee3\u7801\u4e2d\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u662f\u6a21\u62df\u4e00\u4e2a\u57fa\u4e8eUid\u7684Session\uff0c\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u5219\u662f\u4e00\u6bb5\u5e26\u6709 ContextManger \u7684Depends\u51fd\u6570\uff0c\u5e76\u5206\u522b\u5728 try , except \u4ee5\u53ca finally \u6253\u5370\u4e0d\u540c\u7684\u5185\u5bb9\uff0c \u800c\u7b2c\u4e09\u5757\u9ad8\u4eae\u5219\u662f\u8def\u7531\u51fd\u6570\uff0c\u5b83\u4f1a\u4f9d\u636e\u53c2\u6570 is_raise \u662f\u5426\u4e3a True \u6765\u51b3\u5b9a\u629b\u9519\u8fd8\u662f\u6b63\u5e38\u8fd4\u56de\u3002 \u73b0\u5728\u8fd0\u884c\u4ee3\u7801\u5e76\u4f7f\u7528 curl \u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5\uff0c\u53d1\u73b0\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u662f\u901a\u8fc7\u7684\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u53d1\u751f\u5f02\u5e38\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=999\" { \"code\" :0, \"msg\" :999 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=999&is_raise=True\" { \"data\" : \"\" } \u8fd9\u65f6\u5207\u56de\u5230\u8fd0\u884cPython\u8fdb\u7a0b\u7684\u7ec8\u7aef\uff0c\u53ef\u4ee5\u53d1\u73b0\u7ec8\u7aef\u6253\u5370\u4e86\u5982\u4e0b\u6570\u636e: context_depend init context_depend exit INFO: 127 .0.0.1:44162 - \"GET /api/demo?uid=999 HTTP/1.1\" 200 OK context_depend init context_depend error context_depend exit INFO: 127 .0.0.1:44164 - \"GET /api/demo?uid=999&is_raise=True HTTP/1.1\" 200 OK \u4ece\u8f93\u51fa\u7684\u6570\u636e\u53ef\u4ee5\u770b\u51fa\uff0c \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u53ea\u6253\u5370\u4e86 init \u548c exit \uff0c\u800c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u4f1a\u4ea7\u751f\u5f02\u5e38\u7684\u8bf7\u6c42\u5219\u591a\u6253\u5370\u4e86 error \u3002","title":"2.\u7ed3\u5408Python ContextManager\u7684Depend"},{"location":"1_4_depend/#3pre-depend","text":"\u5728\u4e00\u4e9b\u573a\u666f\u4e0b\u53ea\u9700\u8981 Depends \u51fd\u6570\u6267\u884c\u6821\u9a8c\u903b\u8f91\uff0c\u5982\u679c\u6821\u9a8c\u5931\u8d25\u5c31\u629b\u51fa\u9519\u8bef\uff0c\u63a5\u53e3\u5e76\u4e0d\u9700\u8981 Depends \u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u6bd4\u5982\u5728\u7b2c\u4e00\u4e2a\u573a\u666f\u4e2d\uff0c \u4e0d\u9700\u8981\u7528\u5230\u51fd\u6570 get_user_by_token \u7684\u8fd4\u56de\u503c\uff0c\u4ee3\u7801\u5219\u4f1a\u53d8\u6210\u8fd9\u6837: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5982\u679c\u8fd9\u6bb5\u4ee3\u7801\u662f\u4f7f\u7528IDE\u8fdb\u884c\u7f16\u5199\u7684\uff0c\u90a3\u4e48\u9ad8\u4eae\u5904\u7684token\u53d8\u91cf\u4f1a\u88ab\u6253\u4e0a\u4e0b\u5212\u7ebf\uff0c\u5982\u679c\u4f7f\u7528 pyflake \u8fdb\u884c\u4ee3\u7801\u68c0\u6d4b\uff0c\u53ef\u80fd\u4f1a\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u8fd9\u65f6\u53ef\u4ee5\u628a\u9ad8\u4eae\u5904\u4ee3\u7801\u7684token\u53c2\u6570\u540d\u6539\u4e3a _ \u6765\u89e3\u51b3\u95ee\u9898\uff0c\u5982\u4e0b: @pait () async def demo ( _ : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) \u4f46\u662fPython\u662f\u4e0d\u652f\u6301\u4e00\u4e2a\u51fd\u6570\u5185\u51fa\u73b0\u76f8\u540c\u540d\u5b57\u7684\u53d8\u91cf\uff0c \u8fd9\u610f\u5473\u7740\u6709\u591a\u4e2a\u7c7b\u4f3c\u7684\u53c2\u6570\u65f6\uff0c\u4e0d\u80fd\u628a\u4ed6\u4eec\u53d8\u91cf\u540d\u90fd\u6539\u4e3a _ \u3002 \u4e3a\u6b64\uff0c Pait \u901a\u8fc7\u53ef\u9009\u53c2\u6570 pre_depend_list \u6765\u63d0\u4f9b\u4e86 Pre-Depends \u529f\u80fd\uff0c\u7528\u6237\u53ea\u9700\u8981\u628a\u51fd\u6570\u4f20\u5165\u5230Pait\u7684pre_depend_list\u53ef\u9009\u53c2\u6570\u5373\u53ef\uff0c \u4ee3\u7801\u7684\u903b\u8f91\u548c\u529f\u80fd\u5747\u4e0d\u4f1a\u88ab\u53d7\u5230\u5f71\u54cd\uff0c\u8fd9\u6837\u4fee\u6539\u540e\u4ee3\u7801\u4f1a\u53d8\u4e3a\u5982\u4e0b\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait ( pre_depend_list = [ get_user_by_token ]) async def demo () -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Note \u8fd9\u79cd\u60c5\u51b5\u4e0b Pait \u4f1a\u5148\u6267\u884c pre_depend_list \u7684\u51fd\u6570\u518d\u6267\u884c\u8def\u7531\u51fd\u6570\u3002","title":"3.Pre-Depend"},{"location":"1_5_exception/","text":"Pait \u5185\u90e8\u6709\u5f88\u591a\u53c2\u6570\u6821\u9a8c\u903b\u8f91\uff0c\u51fa\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7684\u6355\u83b7\u548c\u4e86\u89e3\u5f02\u5e38\uff0c Pait \u62e5\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u5f02\u5e38\u673a\u5236\u3002 Pait \u7684\u5f02\u5e38\u90fd\u662f\u7ee7\u627f\u4e8e PaitBaseException \uff0c\u5728\u53d1\u751f\u5f02\u5e38\u65f6\u53ef\u4ee5\u901a\u8fc7: isinstance ( exc , PaitBaseException ) \u6765\u5224\u65ad\u5f02\u5e38\u662f\u5426\u5c5e\u4e8e Pait \u7684\u5f02\u5e38\u3002 Note \u7531\u4e8e Pait \u662f\u4f7f\u7528 Pydantic \u8fdb\u884c\u6821\u9a8c\uff0c \u6240\u4ee5\u5728\u8fd0\u884c\u65f6\u4f1a\u56e0\u4e3a\u6821\u9a8c\u4e0d\u901a\u8fc7\u800c\u629b\u51fa Pydantic \u76f8\u5173\u5f02\u5e38\uff0c \u53ef\u4ee5\u901a\u8fc7 Error Handling \u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Pydantic \u5f02\u5e38 TipException\u5f02\u5e38 Pait \u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019 Pait \u6838\u5fc3\u4f1a\u68c0\u67e5\u53c2\u6570\u662f\u5426\u5b58\u5728\uff0c\u53c2\u6570\u662f\u5426\u5408\u6cd5\uff0c\u4ee5\u53ca\u53c2\u6570\u662f\u5426\u901a\u8fc7 Pydantic \u7684\u6821\u9a8c\uff0c \u5728\u4e0a\u8ff0\u6761\u4ef6\u4e2d\u6709\u4e00\u4e2a\u6821\u9a8c\u4e0d\u901a\u8fc7\u65f6\u90fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u4f46\u662f\u8be5\u5f02\u5e38\u7684\u5806\u6808\u53ea\u4f1a\u5728 Pait \u7684\u6838\u5fc3\u88c5\u9970\u5668\u91cc\u6d41\u8f6c\uff0c\u8fd9\u6837\u5b50\u5bf9\u4e8e\u4f7f\u7528 Pait \u7684\u5f00\u53d1\u8005\u6765\u8bf4\u5f88\u96be\u627e\u51fa\u51fa\u73b0\u95ee\u9898\u7684\u8def\u7531\u51fd\u6570\u5728\u54ea\uff0c\u8fd9\u6837\u6392\u67e5\u95ee\u9898\u662f\u5341\u5206\u56f0\u96be\u7684\u3002 \u6240\u4ee5 Pait \u901a\u8fc7 TipException \u5bf9\u5f02\u5e38\u8fdb\u884c\u4e00\u4e2a\u5305\u88c5\uff0c\u5728\u629b\u9519\u4fe1\u606f\u91cc\u544a\u8bc9\u7528\u6237\u8bf4\u54ea\u4e2a\u8def\u7531\u51fd\u6570\u629b\u9519\uff0c\u629b\u9519\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\uff0c \u5982\u679c\u7528\u6237\u4f7f\u7528\u4e86\u7c7b\u4f3c\u4e8e Pycharm \u7684IDE,\u8fd8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u8def\u5f84\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u5730\u65b9\uff0c\u4e00\u4e2a\u5f02\u5e38\u793a\u4f8b\u5982\u4e0b\uff1a Traceback ( most recent call last ) : File \"/home/so1n/github/pait/.venv/lib/python3.7/site-packages/starlette/exceptions.py\" , line 71 , in __call__ await self.app ( scope, receive, sender ) File \"/home/so1n/github/pait/.venv/lib/python3.7/site-packages/starlette/routing.py\" , line 583 , in __call__ await route.handle ( scope, receive, send ) File \"/home/so1n/github/pait/.venv/lib/python3.7/site-packages/starlette/routing.py\" , line 243 , in handle await self.app ( scope, receive, send ) File \"/home/so1n/github/pait/.venv/lib/python3.7/site-packages/starlette/routing.py\" , line 54 , in app response = await func ( request ) File \"/home/so1n/github/pait/pait/core.py\" , line 232 , in dispatch return await first_plugin ( *args, **kwargs ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 448 , in __call__ async with self: File \"/home/so1n/github/pait/pait/param_handle.py\" , line 456 , in __aenter__ raise e from gen_tip_exc ( self.call_next, e ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 453 , in __aenter__ await self._gen_param () File \"/home/so1n/github/pait/pait/param_handle.py\" , line 439 , in _gen_param self.args, self.kwargs = await self.param_handle ( func_sig, func_sig.param_list ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 396 , in param_handle await asyncio.gather ( * [ _param_handle ( parameter ) for parameter in param_list ]) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 393 , in _param_handle raise gen_tip_exc ( _object, closer_e, parameter ) pait.exceptions.TipException: Can not found content__type value for < function raise_tip_route at 0x7f512ccdebf8> Customer Traceback: File \"/home/so1n/github/pait/example/param_verify/starlette_example.py\" , line 88 , in raise_tip_route. \u53ef\u4ee5\u770b\u5230\u5f02\u5e38\u662f\u901a\u8fc7 gen_tip_exc \u629b\u51fa\u6765\u7684\uff0c\u800c\u629b\u51fa\u6765\u7684\u5f02\u5e38\u4fe1\u606f\u5219\u5305\u542b\u8def\u7531\u51fd\u6570\u6240\u5728\u4f4d\u7f6e\uff0c\u548c\u5f02\u5e38\u4fe1\u606f\uff0c\u6b64\u5916\uff0c\u53ef\u4ee5\u901a\u8fc7 TipException.exc \u83b7\u53d6\u5230\u539f\u672c\u7684\u5f02\u5e38\u3002 \u53c2\u6570\u5f02\u5e38 \u76ee\u524d Pait \u67093\u79cd\u53c2\u6570\u5f02\u5e38\uff0c\u5206\u522b\u6709: NotFoundFieldException \u8be5\u5f02\u5e38\u8868\u793a\u5339\u914d\u4e0d\u5230\u5bf9\u5e94\u7684 Field \uff0c \u901a\u5e38\u5f00\u53d1\u8005\u5728\u6b63\u5e38\u4f7f\u7528\u65f6\uff0c\u4e0d\u4f1a\u9047\u5230\u8be5\u5f02\u5e38\u3002 NotFoundValueException \u8be5\u5f02\u5e38\u8868\u793a\u65e0\u6cd5\u4ece\u8bf7\u6c42\u6570\u636e\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u503c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5f02\u5e38\uff0c\u4e00\u822c\u662f\u8bf7\u6c42\u6570\u636e\u7f3a\u5c11\u90e8\u5206\u53c2\u6570\u3002 FieldValueTypeException \u8be5\u5f02\u5e38\u8868\u793a\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c Pait \u53d1\u73b0 Field \u91cc\u7684 default \uff0c example \u7b49\u586b\u5199\u7684\u503c\u4e0d\u5408\u6cd5\uff0c\u5f00\u53d1\u8005\u9700\u8981\u6839\u636e\u63d0\u793a\u8fdb\u884c\u6539\u6b63\u3002 \u8fd9\u4e09\u79cd\u5f02\u5e38\u90fd\u662f\u7ee7\u627f\u4e8e PaitBaseParamException \uff0c\u5b83\u7684\u6e90\u7801\u5982\u4e0b\uff1a class PaitBaseParamException ( PaitBaseException ): def __init__ ( self , param : str , msg : str ): super () . __init__ ( msg ) self . param : str = param self . msg : str = msg \u4ece\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa PaitBaseParamException \u5728\u629b\u5f02\u5e38\u65f6\u53ea\u4f1a\u629b\u51fa\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u5728\u9700\u8981\u6839\u636e\u5f02\u5e38\u8fd4\u56de\u4e00\u4e9b\u6307\u5b9a\u54cd\u5e94\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 param \u77e5\u9053\u662f\u54ea\u4e2a\u53c2\u6570\u51fa\u9519\u3002 \u5f02\u5e38\u4f7f\u7528\u793a\u4f8b \u5728CRUD\u4e1a\u52a1\u4e2d\uff0c\u8def\u7531\u51fd\u6570\u53d1\u751f\u7684\u5f02\u5e38\u90fd\u8981\u88ab\u6355\u83b7\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u534f\u5b9a\u597d\u7684\u9519\u8bef\u4fe1\u606f\u4f9b\u524d\u7aef\u4f7f\u7528\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5f02\u5e38\u6355\u83b7\u7684\u793a\u4f8b\u4ee3\u7801\uff1a from typing import List import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field , exceptions from pait.app.starlette import pait from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : if isinstance ( exc , exceptions . TipException ): # \u63d0\u53d6\u539f\u672c\u7684\u5f02\u5e38 exc = exc . exc if isinstance ( exc , exceptions . PaitBaseParamException ): # \u63d0\u53d6\u53c2\u6570\u4fe1\u606f\u548c\u9519\u8bef\u4fe1\u606f\uff0c\u544a\u77e5\u7528\u6237\u54ea\u4e2a\u53c2\u6570\u53d1\u751f\u9519\u8bef return JSONResponse ({ \"code\" : - 1 , \"msg\" : f \"error param: { exc . param } , { exc . msg } \" }) elif isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u5f02\u5e38\uff0c\u8fd4\u56de\u6821\u9a8c\u5931\u8d25\u7684\u53c2\u6570\u4fe1\u606f error_param_list : List [ str ] = [] for i in exc . errors (): error_param_list . extend ( i [ \"loc\" ]) return JSONResponse ({ \"code\" : - 1 , \"msg\" : f \"check error param: { error_param_list } \" }) elif isinstance ( exc , exceptions . PaitBaseException ): # \u6807\u51c6\u7684Pait\u5f02\u5e38\uff0c\u901a\u5e38\u5f88\u5c11\u51fa\u73b0\uff0c\u76f4\u63a5\u8fd4\u56de\u5f02\u5e38\u4fe1\u606f return JSONResponse ({ \"code\" : - 1 , \"msg\" : str ( exc )}) # \u8def\u7531\u51fd\u6570\u7684\u9519\u8bef\u4fe1\u606f return JSONResponse ({ \"code\" : - 1 , \"msg\" : str ( exc )}) @pait () async def demo ( demo_value : int = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"code\" : 0 , \"msg\" : \"\" , \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8be5\u4ee3\u7801\u7684\u54cd\u5e94\u4f7f\u7528\u4e86\u5e38\u89c1\u7684\u540e\u7aef\u8fd4\u56deJson\u6570\u636e\u534f\u8bae: { \"code\" : 0 , \"msg\" : \"\" , \"data\" : {} } \u5176\u4e2d code \u4e3a0\u65f6\u4ee3\u8868\u54cd\u5e94\u6b63\u5e38\uff0c\u4e0d\u4e3a0\u5219\u4e3a\u5f02\u5e38\u4e14 msg \u5305\u62ec\u4e86\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\u4f9b\u524d\u7aef\u5c55\u793a\uff0c\u800c data \u662f\u6b63\u5e38\u54cd\u5e94\u65f6\u7684\u7ed3\u6784\u4f53\u3002 \u7136\u540e\u901a\u8fc7 Starlette \u6846\u67b6\u7684\u5f02\u5e38\u673a\u5236\uff0c\u628a\u81ea\u5b9a\u4e49\u7684 api_exception \u51fd\u6570\u6302\u8f7d\u5230 Starlette \u7684\u5f02\u5e38\u5904\u7406\u56de\u8c03\u4e2d\uff0c api_exception \u51fd\u6570\u91cc\u9762\u5305\u542b\u4e86\u4f7f\u7528 Pait \u65f6\u9047\u5230\u7684\u51e0\u79cd\u5f02\u5e38\u7684\u5904\u7406\uff0c\u7136\u540e\u6309\u7167\u534f\u8bae\u8fd4\u56de\u6570\u636e\u7ed9\u8c03\u7528\u7aef\uff0c\u901a\u8fc7 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff1a \u7f3a\u5c11\u53c2\u6570\u65f6\uff0c\u4f1a\u8fd4\u56de\u627e\u4e0d\u5230\u53c2\u6570\u7684\u9519\u8bef\u4fe1\u606f \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" { \"code\" :-1, \"msg\" : \"error param:demo_value, Can not found demo_value value\" } \u53c2\u6570\u6821\u9a8c\u51fa\u9519\u65f6\uff0c\u4f1a\u8fd4\u56de\u6821\u9a8c\u51fa\u9519\u7684\u53c2\u6570\u540d \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=a\" { \"code\" :-1, \"msg\" : \"check error param: ['demo_value']\" } \u53c2\u6570\u6b63\u5e38\u65f6\u8fd4\u56de\u6b63\u5e38\u7684\u6570\u636e \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=3\" { \"code\" :0, \"msg\" : \"\" , \"data\" :3 }","title":"Exception"},{"location":"1_5_exception/#tipexception","text":"Pait \u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019 Pait \u6838\u5fc3\u4f1a\u68c0\u67e5\u53c2\u6570\u662f\u5426\u5b58\u5728\uff0c\u53c2\u6570\u662f\u5426\u5408\u6cd5\uff0c\u4ee5\u53ca\u53c2\u6570\u662f\u5426\u901a\u8fc7 Pydantic \u7684\u6821\u9a8c\uff0c \u5728\u4e0a\u8ff0\u6761\u4ef6\u4e2d\u6709\u4e00\u4e2a\u6821\u9a8c\u4e0d\u901a\u8fc7\u65f6\u90fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u4f46\u662f\u8be5\u5f02\u5e38\u7684\u5806\u6808\u53ea\u4f1a\u5728 Pait \u7684\u6838\u5fc3\u88c5\u9970\u5668\u91cc\u6d41\u8f6c\uff0c\u8fd9\u6837\u5b50\u5bf9\u4e8e\u4f7f\u7528 Pait \u7684\u5f00\u53d1\u8005\u6765\u8bf4\u5f88\u96be\u627e\u51fa\u51fa\u73b0\u95ee\u9898\u7684\u8def\u7531\u51fd\u6570\u5728\u54ea\uff0c\u8fd9\u6837\u6392\u67e5\u95ee\u9898\u662f\u5341\u5206\u56f0\u96be\u7684\u3002 \u6240\u4ee5 Pait \u901a\u8fc7 TipException \u5bf9\u5f02\u5e38\u8fdb\u884c\u4e00\u4e2a\u5305\u88c5\uff0c\u5728\u629b\u9519\u4fe1\u606f\u91cc\u544a\u8bc9\u7528\u6237\u8bf4\u54ea\u4e2a\u8def\u7531\u51fd\u6570\u629b\u9519\uff0c\u629b\u9519\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\uff0c \u5982\u679c\u7528\u6237\u4f7f\u7528\u4e86\u7c7b\u4f3c\u4e8e Pycharm \u7684IDE,\u8fd8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u8def\u5f84\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u5730\u65b9\uff0c\u4e00\u4e2a\u5f02\u5e38\u793a\u4f8b\u5982\u4e0b\uff1a Traceback ( most recent call last ) : File \"/home/so1n/github/pait/.venv/lib/python3.7/site-packages/starlette/exceptions.py\" , line 71 , in __call__ await self.app ( scope, receive, sender ) File \"/home/so1n/github/pait/.venv/lib/python3.7/site-packages/starlette/routing.py\" , line 583 , in __call__ await route.handle ( scope, receive, send ) File \"/home/so1n/github/pait/.venv/lib/python3.7/site-packages/starlette/routing.py\" , line 243 , in handle await self.app ( scope, receive, send ) File \"/home/so1n/github/pait/.venv/lib/python3.7/site-packages/starlette/routing.py\" , line 54 , in app response = await func ( request ) File \"/home/so1n/github/pait/pait/core.py\" , line 232 , in dispatch return await first_plugin ( *args, **kwargs ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 448 , in __call__ async with self: File \"/home/so1n/github/pait/pait/param_handle.py\" , line 456 , in __aenter__ raise e from gen_tip_exc ( self.call_next, e ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 453 , in __aenter__ await self._gen_param () File \"/home/so1n/github/pait/pait/param_handle.py\" , line 439 , in _gen_param self.args, self.kwargs = await self.param_handle ( func_sig, func_sig.param_list ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 396 , in param_handle await asyncio.gather ( * [ _param_handle ( parameter ) for parameter in param_list ]) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 393 , in _param_handle raise gen_tip_exc ( _object, closer_e, parameter ) pait.exceptions.TipException: Can not found content__type value for < function raise_tip_route at 0x7f512ccdebf8> Customer Traceback: File \"/home/so1n/github/pait/example/param_verify/starlette_example.py\" , line 88 , in raise_tip_route. \u53ef\u4ee5\u770b\u5230\u5f02\u5e38\u662f\u901a\u8fc7 gen_tip_exc \u629b\u51fa\u6765\u7684\uff0c\u800c\u629b\u51fa\u6765\u7684\u5f02\u5e38\u4fe1\u606f\u5219\u5305\u542b\u8def\u7531\u51fd\u6570\u6240\u5728\u4f4d\u7f6e\uff0c\u548c\u5f02\u5e38\u4fe1\u606f\uff0c\u6b64\u5916\uff0c\u53ef\u4ee5\u901a\u8fc7 TipException.exc \u83b7\u53d6\u5230\u539f\u672c\u7684\u5f02\u5e38\u3002","title":"TipException\u5f02\u5e38"},{"location":"1_5_exception/#_1","text":"\u76ee\u524d Pait \u67093\u79cd\u53c2\u6570\u5f02\u5e38\uff0c\u5206\u522b\u6709: NotFoundFieldException \u8be5\u5f02\u5e38\u8868\u793a\u5339\u914d\u4e0d\u5230\u5bf9\u5e94\u7684 Field \uff0c \u901a\u5e38\u5f00\u53d1\u8005\u5728\u6b63\u5e38\u4f7f\u7528\u65f6\uff0c\u4e0d\u4f1a\u9047\u5230\u8be5\u5f02\u5e38\u3002 NotFoundValueException \u8be5\u5f02\u5e38\u8868\u793a\u65e0\u6cd5\u4ece\u8bf7\u6c42\u6570\u636e\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u503c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5f02\u5e38\uff0c\u4e00\u822c\u662f\u8bf7\u6c42\u6570\u636e\u7f3a\u5c11\u90e8\u5206\u53c2\u6570\u3002 FieldValueTypeException \u8be5\u5f02\u5e38\u8868\u793a\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c Pait \u53d1\u73b0 Field \u91cc\u7684 default \uff0c example \u7b49\u586b\u5199\u7684\u503c\u4e0d\u5408\u6cd5\uff0c\u5f00\u53d1\u8005\u9700\u8981\u6839\u636e\u63d0\u793a\u8fdb\u884c\u6539\u6b63\u3002 \u8fd9\u4e09\u79cd\u5f02\u5e38\u90fd\u662f\u7ee7\u627f\u4e8e PaitBaseParamException \uff0c\u5b83\u7684\u6e90\u7801\u5982\u4e0b\uff1a class PaitBaseParamException ( PaitBaseException ): def __init__ ( self , param : str , msg : str ): super () . __init__ ( msg ) self . param : str = param self . msg : str = msg \u4ece\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa PaitBaseParamException \u5728\u629b\u5f02\u5e38\u65f6\u53ea\u4f1a\u629b\u51fa\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u5728\u9700\u8981\u6839\u636e\u5f02\u5e38\u8fd4\u56de\u4e00\u4e9b\u6307\u5b9a\u54cd\u5e94\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 param \u77e5\u9053\u662f\u54ea\u4e2a\u53c2\u6570\u51fa\u9519\u3002","title":"\u53c2\u6570\u5f02\u5e38"},{"location":"1_5_exception/#_2","text":"\u5728CRUD\u4e1a\u52a1\u4e2d\uff0c\u8def\u7531\u51fd\u6570\u53d1\u751f\u7684\u5f02\u5e38\u90fd\u8981\u88ab\u6355\u83b7\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u534f\u5b9a\u597d\u7684\u9519\u8bef\u4fe1\u606f\u4f9b\u524d\u7aef\u4f7f\u7528\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5f02\u5e38\u6355\u83b7\u7684\u793a\u4f8b\u4ee3\u7801\uff1a from typing import List import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field , exceptions from pait.app.starlette import pait from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : if isinstance ( exc , exceptions . TipException ): # \u63d0\u53d6\u539f\u672c\u7684\u5f02\u5e38 exc = exc . exc if isinstance ( exc , exceptions . PaitBaseParamException ): # \u63d0\u53d6\u53c2\u6570\u4fe1\u606f\u548c\u9519\u8bef\u4fe1\u606f\uff0c\u544a\u77e5\u7528\u6237\u54ea\u4e2a\u53c2\u6570\u53d1\u751f\u9519\u8bef return JSONResponse ({ \"code\" : - 1 , \"msg\" : f \"error param: { exc . param } , { exc . msg } \" }) elif isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u5f02\u5e38\uff0c\u8fd4\u56de\u6821\u9a8c\u5931\u8d25\u7684\u53c2\u6570\u4fe1\u606f error_param_list : List [ str ] = [] for i in exc . errors (): error_param_list . extend ( i [ \"loc\" ]) return JSONResponse ({ \"code\" : - 1 , \"msg\" : f \"check error param: { error_param_list } \" }) elif isinstance ( exc , exceptions . PaitBaseException ): # \u6807\u51c6\u7684Pait\u5f02\u5e38\uff0c\u901a\u5e38\u5f88\u5c11\u51fa\u73b0\uff0c\u76f4\u63a5\u8fd4\u56de\u5f02\u5e38\u4fe1\u606f return JSONResponse ({ \"code\" : - 1 , \"msg\" : str ( exc )}) # \u8def\u7531\u51fd\u6570\u7684\u9519\u8bef\u4fe1\u606f return JSONResponse ({ \"code\" : - 1 , \"msg\" : str ( exc )}) @pait () async def demo ( demo_value : int = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"code\" : 0 , \"msg\" : \"\" , \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8be5\u4ee3\u7801\u7684\u54cd\u5e94\u4f7f\u7528\u4e86\u5e38\u89c1\u7684\u540e\u7aef\u8fd4\u56deJson\u6570\u636e\u534f\u8bae: { \"code\" : 0 , \"msg\" : \"\" , \"data\" : {} } \u5176\u4e2d code \u4e3a0\u65f6\u4ee3\u8868\u54cd\u5e94\u6b63\u5e38\uff0c\u4e0d\u4e3a0\u5219\u4e3a\u5f02\u5e38\u4e14 msg \u5305\u62ec\u4e86\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\u4f9b\u524d\u7aef\u5c55\u793a\uff0c\u800c data \u662f\u6b63\u5e38\u54cd\u5e94\u65f6\u7684\u7ed3\u6784\u4f53\u3002 \u7136\u540e\u901a\u8fc7 Starlette \u6846\u67b6\u7684\u5f02\u5e38\u673a\u5236\uff0c\u628a\u81ea\u5b9a\u4e49\u7684 api_exception \u51fd\u6570\u6302\u8f7d\u5230 Starlette \u7684\u5f02\u5e38\u5904\u7406\u56de\u8c03\u4e2d\uff0c api_exception \u51fd\u6570\u91cc\u9762\u5305\u542b\u4e86\u4f7f\u7528 Pait \u65f6\u9047\u5230\u7684\u51e0\u79cd\u5f02\u5e38\u7684\u5904\u7406\uff0c\u7136\u540e\u6309\u7167\u534f\u8bae\u8fd4\u56de\u6570\u636e\u7ed9\u8c03\u7528\u7aef\uff0c\u901a\u8fc7 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff1a \u7f3a\u5c11\u53c2\u6570\u65f6\uff0c\u4f1a\u8fd4\u56de\u627e\u4e0d\u5230\u53c2\u6570\u7684\u9519\u8bef\u4fe1\u606f \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" { \"code\" :-1, \"msg\" : \"error param:demo_value, Can not found demo_value value\" } \u53c2\u6570\u6821\u9a8c\u51fa\u9519\u65f6\uff0c\u4f1a\u8fd4\u56de\u6821\u9a8c\u51fa\u9519\u7684\u53c2\u6570\u540d \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=a\" { \"code\" :-1, \"msg\" : \"check error param: ['demo_value']\" } \u53c2\u6570\u6b63\u5e38\u65f6\u8fd4\u56de\u6b63\u5e38\u7684\u6570\u636e \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=3\" { \"code\" :0, \"msg\" : \"\" , \"data\" :3 }","title":"\u5f02\u5e38\u4f7f\u7528\u793a\u4f8b"},{"location":"2_pait_multiplexing/","text":"\u5728\u4e0a\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u4ecb\u7ecd\u4e86\u901a\u8fc7\u76f4\u63a5\u4f7f\u7528 Pait \u88c5\u9970\u5668\u6765\u4f7f\u7528\u53c2\u6570\u8f6c\u6362\u4e0e\u7c7b\u578b\u6821\u9a8c\u529f\u80fd\uff0c\u4e5f\u6709\u7b80\u5355\u7684\u4ecb\u7ecd\u901a\u8fc7 pre_depend_list \u53c2\u6570\u6765\u4f7f\u7528 Pait \u7684Pre-Depend\u529f\u80fd\uff0c \u800c\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\uff08\u7279\u522b\u662f\u6587\u6863\u7ae0\u8282\uff09\u4f1a\u4ecb\u7ecd Pait \u7684\u5176\u5b83\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u7528\u9700\u8981\u901a\u8fc7\u6307\u5b9a\u7684\u53c2\u6570\u6765\u542f\u7528\uff0c\u4f46\u662f\u5f88\u591a\u63a5\u53e3\u672c\u8eab\u90fd\u6709\u4e00\u4e9b\u5171\u6027\u4ece\u800c\u5b83\u4eec\u5728\u4f7f\u7528 Pait \u65f6\u586b\u5199\u7684\u53c2\u6570\u7684\u4e00\u6837\u7684\uff0c \u6bd4\u5982\u5f53\u4e00\u4e2a\u5f00\u53d1\u8005\u7f16\u5199\u4e86\u51e0\u4e2a\u63a5\u53e3\u65f6\uff0c\u53ef\u80fd\u4f1a\u8fd9\u6837\u5199: from starlette.responses import Response from pait.app.starlette import pait from pait.model.status import PaitStatus @pait ( status = PaitStatus . test ) async def demo () -> Response : pass @pait ( status = PaitStatus . test ) async def demo1 () -> Response : pass @pait ( status = PaitStatus . test ) async def demo2 () -> Response : pass \u8fd9\u4e2a\u793a\u4f8b\u4ee3\u7801\u5171\u67093\u4e2a\u63a5\u53e3\uff0c\u4f46\u662f\u5b83\u4eec\u90fd\u4f7f\u7528\u76f8\u540c\u7684 Pait \u7684 status \u53c2\u6570\uff0c\u4ee3\u8868\u73b0\u5728\u7684\u63a5\u53e3\u90fd\u5728\u6d4b\u8bd5\u4e2d\uff0c \u4f46\u662f\u5728\u540e\u9762\u4e0a\u7ebf\u7684\u65f6\u5019\u6240\u6709\u63a5\u53e3\u7684\u72b6\u6001\u90fd\u9700\u8981\u4e00\u4e2a\u4e2a\u7684\u6539\u4e3a release \uff0c\u8fd9\u662f\u975e\u5e38\u7684\u9ebb\u70e6\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a\u4e0d\u540c\u7684 Pait \uff0c\u8fbe\u5230\u590d\u7528\u7684\u76ee\u7684\u3002 \u4f7f\u7528\u81ea\u5df1\u5b9a\u5236\u7684Pait \u5728\u4e0a\u9762\u7684\u4f7f\u7528\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u901a\u8fc7: from pait.app.starlette import pait \u6765\u5f15\u5165\u4e00\u4e2a Pait \u88c5\u9970\u5668\uff0c\u8fd9\u662f\u4e00\u4e2a\u6700\u65b9\u4fbf\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u5b83\u672c\u8eab\u662fWeb\u6846\u67b6\u5bf9\u5e94 Pait \u7c7b\u7684\u5355\u4f8b\uff0c\u5728\u8003\u8651\u4f7f\u7528 Pait \u7684\u590d\u7528\u65f6\uff0c\u5219\u9700\u8981\u901a\u8fc7Web\u6846\u67b6\u5bf9\u5e94 Pait \u7c7b\u5165\u624b\uff0c \u6765\u91cd\u65b0\u5b9e\u4f8b\u5316\u4e00\u4e2a\u81ea\u5df1\u5b9a\u5236\u7684 Pait \uff0c\u7136\u540e\u628a\u63a5\u53e3\u7684 Pait \u66ff\u6362\u4e3a\u81ea\u5df1\u5b9a\u4e49\u7684 Pait \uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u793a\u4f8b\uff1a from starlette.responses import Response from pait.app.starlette import Pait from pait.model.status import PaitStatus global_pait : Pait = Pait ( status = PaitStatus . test ) @global_pait () async def demo () -> Response : pass @global_pait () async def demo1 () -> Response : pass @global_pait () async def demo2 () -> Response : pass \u4ee3\u7801\u4e2d\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u540d\u4e3a global_pait \u7684 Pait \uff0c \u5b83\u7684 status \u88ab\u6307\u5b9a\u4e3a PaitStatus.test \uff0c\u7136\u540e\u628a global_pait \u90fd\u5e94\u7528\u5230\u6240\u6709\u7684\u63a5\u53e3\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u7684\u6240\u6709\u63a5\u53e3\u51fd\u6570\u5c31\u7b49\u4e8e\u524d\u9762\u5e94\u7528\u7684\uff1a @pait ( status = PaitStatus . test ) async def demo () -> Response : pass \u5982\u679c\u5728\u540e\u7eed\u7684\u4ee3\u7801\u8fed\u4ee3\u4e14\u63a5\u53e3\u51fd\u6570\u9700\u8981\u96c6\u4e2d\u53d8\u52a8\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u76f4\u63a5\u4fee global_pait \u7684\u5c5e\u6027\u5219\u53ef\u4ee5\u8ba9\u6240\u6709\u63a5\u53e3\u7684 Pait \u5c5e\u6027\u90fd\u5f97\u5230\u66f4\u6539\u3002 \u521b\u5efa\u5b50Pait Pait \u53ef\u4ee5\u901a\u8fc7 create_sub_pait \u65b9\u6cd5\u521b\u5efa\u81ea\u5df1\u7684\u5b50 Pait \uff0c\u6bcf\u4e2a\u5b50 Pait \u7684\u5c5e\u6027\u90fd\u662f\u7ee7\u627f\u4e8e\u81ea\u5df1\u7684\u7236 Pait \u5c5e\u6027\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u6bb5\u793a\u4f8b\u4ee3\u7801\uff1a from pait.app.starlette import Pait from pait.model.status import PaitStatus global_pait : Pait = Pait ( status = PaitStatus . test ) other_pait : Pait = global_pait . create_sub_pait () global_pait \u662f\u4e00\u4e2a\u7236 Pait \uff0c\u800c other_pait \u5219\u662f\u88ab global_pait \u521b\u5efa\u7684\uff0c\u6b64\u65f6\u5b83\u7684 status \u5c5e\u6027\u4e5f\u8ddf global_pait \u7684 status \u5c5e\u6027\u4e00\u6837\u90fd\u662f PaitStatus.test \u3002 \u4f46\u662f\u4e5f\u53ef\u4ee5\u5728\u521b\u5efa\u7684\u65f6\u5019\u901a\u8fc7\u6307\u5b9a\u4e0d\u540c\u7684\u503c\uff0c\u4f7f\u5b50 Pait \u7684\u5c5e\u6027\u88ab\u6307\u5b9a\u7684\u503c\u8986\u76d6\uff0c\u6bd4\u5982\u8fd9\u6bb5\u4ee3\u7801: from pait.app.starlette import Pait global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) \u4ee3\u7801\u4e2d global_pait \u4e0e user_pait \u7684 author \u5c5e\u6027\u90fd\u662f (\"so1n\", ) \uff0c\u4f46\u662f global_pait \u7684 group \u5c5e\u6027\u4e3a global \uff0c\u800c user_pait \u7684 group \u5c5e\u6027\u4e3a user \u3002 \u5b50 Pait \u521b\u5efa\u4e4b\u540e\u5c31\u53ef\u4ee5\u8ddf\u4e4b\u524d\u4e00\u6837\u5728\u63a5\u53e3\u51fd\u6570\u4f7f\u7528\u4e86\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7528\u6237\u767b\u5f55\u63a5\u53e3\u51fd\u6570 user_login \u4ee5\u53ca\u7528\u6237\u6ce8\u9500\u51fd\u6570 user_logout \u90fd\u4f7f\u7528 user_pait \uff0c \u4ed6\u4eec\u5171\u540c\u62e5\u6709 group \u4e3a user \u7684\u5c5e\u6027\uff1b\u800c\u83b7\u53d6\u670d\u52a1\u5668\u65f6\u95f4\u6233\u7684\u63a5\u53e3\u51fd\u6570 get_server_timestamp \u5219\u5355\u72ec\u4f7f\u7528\u7684\u662f global_pait \uff0c\u5b83\u7684 group \u4e3a global \u3002 from pait.app.starlette import Pait from starlette.responses import JSONResponse global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) @user_pait () # group=\"user\" async def user_login () -> JSONResponse : pass @user_pait () # group=\"user\" async def user_logout () -> JSONResponse : pass @global_pait () # group=\"global\" async def get_server_timestamp () -> JSONResponse : pass \u5982\u679c\u4f60\u7a81\u7136\u60f3\u66f4\u6539 user_logout \u63a5\u53e3\u51fd\u6570\u7684 Pait \u5c5e\u6027\uff0c \u8fd8\u53ef\u4ee5\u5728 user_logout \u7684 user_pait \u88c5\u9970\u5668\u586b\u5199\u5bf9\u5e94\u7684\u53c2\u6570\u6765\u8fbe\u5230\u66f4\u6539\u7684\u76ee\u7684\uff0c \u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u4f1a\u628a\u63a5\u53e3\u51fd\u6570 user_logout \u7684 group \u5c5e\u6027\u53d8\u4e3a user-logout \u800c\u4e0d\u662f user : from pait.app.starlette import Pait from starlette.responses import JSONResponse global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) @user_pait () async def user_login () -> JSONResponse : pass @user_pait ( group = \"user-logout\" ) async def user_logout () -> JSONResponse : pass @global_pait () async def get_server_timestamp () -> JSONResponse : pass","title":"Pait multiplexing"},{"location":"2_pait_multiplexing/#pait","text":"\u5728\u4e0a\u9762\u7684\u4f7f\u7528\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u901a\u8fc7: from pait.app.starlette import pait \u6765\u5f15\u5165\u4e00\u4e2a Pait \u88c5\u9970\u5668\uff0c\u8fd9\u662f\u4e00\u4e2a\u6700\u65b9\u4fbf\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u5b83\u672c\u8eab\u662fWeb\u6846\u67b6\u5bf9\u5e94 Pait \u7c7b\u7684\u5355\u4f8b\uff0c\u5728\u8003\u8651\u4f7f\u7528 Pait \u7684\u590d\u7528\u65f6\uff0c\u5219\u9700\u8981\u901a\u8fc7Web\u6846\u67b6\u5bf9\u5e94 Pait \u7c7b\u5165\u624b\uff0c \u6765\u91cd\u65b0\u5b9e\u4f8b\u5316\u4e00\u4e2a\u81ea\u5df1\u5b9a\u5236\u7684 Pait \uff0c\u7136\u540e\u628a\u63a5\u53e3\u7684 Pait \u66ff\u6362\u4e3a\u81ea\u5df1\u5b9a\u4e49\u7684 Pait \uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u793a\u4f8b\uff1a from starlette.responses import Response from pait.app.starlette import Pait from pait.model.status import PaitStatus global_pait : Pait = Pait ( status = PaitStatus . test ) @global_pait () async def demo () -> Response : pass @global_pait () async def demo1 () -> Response : pass @global_pait () async def demo2 () -> Response : pass \u4ee3\u7801\u4e2d\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u540d\u4e3a global_pait \u7684 Pait \uff0c \u5b83\u7684 status \u88ab\u6307\u5b9a\u4e3a PaitStatus.test \uff0c\u7136\u540e\u628a global_pait \u90fd\u5e94\u7528\u5230\u6240\u6709\u7684\u63a5\u53e3\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u7684\u6240\u6709\u63a5\u53e3\u51fd\u6570\u5c31\u7b49\u4e8e\u524d\u9762\u5e94\u7528\u7684\uff1a @pait ( status = PaitStatus . test ) async def demo () -> Response : pass \u5982\u679c\u5728\u540e\u7eed\u7684\u4ee3\u7801\u8fed\u4ee3\u4e14\u63a5\u53e3\u51fd\u6570\u9700\u8981\u96c6\u4e2d\u53d8\u52a8\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u76f4\u63a5\u4fee global_pait \u7684\u5c5e\u6027\u5219\u53ef\u4ee5\u8ba9\u6240\u6709\u63a5\u53e3\u7684 Pait \u5c5e\u6027\u90fd\u5f97\u5230\u66f4\u6539\u3002","title":"\u4f7f\u7528\u81ea\u5df1\u5b9a\u5236\u7684Pait"},{"location":"2_pait_multiplexing/#pait_1","text":"Pait \u53ef\u4ee5\u901a\u8fc7 create_sub_pait \u65b9\u6cd5\u521b\u5efa\u81ea\u5df1\u7684\u5b50 Pait \uff0c\u6bcf\u4e2a\u5b50 Pait \u7684\u5c5e\u6027\u90fd\u662f\u7ee7\u627f\u4e8e\u81ea\u5df1\u7684\u7236 Pait \u5c5e\u6027\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u6bb5\u793a\u4f8b\u4ee3\u7801\uff1a from pait.app.starlette import Pait from pait.model.status import PaitStatus global_pait : Pait = Pait ( status = PaitStatus . test ) other_pait : Pait = global_pait . create_sub_pait () global_pait \u662f\u4e00\u4e2a\u7236 Pait \uff0c\u800c other_pait \u5219\u662f\u88ab global_pait \u521b\u5efa\u7684\uff0c\u6b64\u65f6\u5b83\u7684 status \u5c5e\u6027\u4e5f\u8ddf global_pait \u7684 status \u5c5e\u6027\u4e00\u6837\u90fd\u662f PaitStatus.test \u3002 \u4f46\u662f\u4e5f\u53ef\u4ee5\u5728\u521b\u5efa\u7684\u65f6\u5019\u901a\u8fc7\u6307\u5b9a\u4e0d\u540c\u7684\u503c\uff0c\u4f7f\u5b50 Pait \u7684\u5c5e\u6027\u88ab\u6307\u5b9a\u7684\u503c\u8986\u76d6\uff0c\u6bd4\u5982\u8fd9\u6bb5\u4ee3\u7801: from pait.app.starlette import Pait global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) \u4ee3\u7801\u4e2d global_pait \u4e0e user_pait \u7684 author \u5c5e\u6027\u90fd\u662f (\"so1n\", ) \uff0c\u4f46\u662f global_pait \u7684 group \u5c5e\u6027\u4e3a global \uff0c\u800c user_pait \u7684 group \u5c5e\u6027\u4e3a user \u3002 \u5b50 Pait \u521b\u5efa\u4e4b\u540e\u5c31\u53ef\u4ee5\u8ddf\u4e4b\u524d\u4e00\u6837\u5728\u63a5\u53e3\u51fd\u6570\u4f7f\u7528\u4e86\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7528\u6237\u767b\u5f55\u63a5\u53e3\u51fd\u6570 user_login \u4ee5\u53ca\u7528\u6237\u6ce8\u9500\u51fd\u6570 user_logout \u90fd\u4f7f\u7528 user_pait \uff0c \u4ed6\u4eec\u5171\u540c\u62e5\u6709 group \u4e3a user \u7684\u5c5e\u6027\uff1b\u800c\u83b7\u53d6\u670d\u52a1\u5668\u65f6\u95f4\u6233\u7684\u63a5\u53e3\u51fd\u6570 get_server_timestamp \u5219\u5355\u72ec\u4f7f\u7528\u7684\u662f global_pait \uff0c\u5b83\u7684 group \u4e3a global \u3002 from pait.app.starlette import Pait from starlette.responses import JSONResponse global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) @user_pait () # group=\"user\" async def user_login () -> JSONResponse : pass @user_pait () # group=\"user\" async def user_logout () -> JSONResponse : pass @global_pait () # group=\"global\" async def get_server_timestamp () -> JSONResponse : pass \u5982\u679c\u4f60\u7a81\u7136\u60f3\u66f4\u6539 user_logout \u63a5\u53e3\u51fd\u6570\u7684 Pait \u5c5e\u6027\uff0c \u8fd8\u53ef\u4ee5\u5728 user_logout \u7684 user_pait \u88c5\u9970\u5668\u586b\u5199\u5bf9\u5e94\u7684\u53c2\u6570\u6765\u8fbe\u5230\u66f4\u6539\u7684\u76ee\u7684\uff0c \u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u4f1a\u628a\u63a5\u53e3\u51fd\u6570 user_logout \u7684 group \u5c5e\u6027\u53d8\u4e3a user-logout \u800c\u4e0d\u662f user : from pait.app.starlette import Pait from starlette.responses import JSONResponse global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) @user_pait () async def user_login () -> JSONResponse : pass @user_pait ( group = \"user-logout\" ) async def user_logout () -> JSONResponse : pass @global_pait () async def get_server_timestamp () -> JSONResponse : pass","title":"\u521b\u5efa\u5b50Pait"},{"location":"3_api_doc/","text":"1.\u4ecb\u7ecd Pait \u4f1a\u5728\u8fd0\u884c\u65f6\u81ea\u52a8\u6355\u83b7\u8def\u7531\u51fd\u6570\u7684\u8bf7\u6c42\u53c2\u6570\u548curl\uff0cmethod\u7b49\u4fe1\u606f\u81ea\u52a8\u751f\u6210OpenAPI\u6570\u636e, \u4e0d\u8fc7\u5355\u9760\u51fd\u6570\u7684\u4fe1\u606f\u8fd8\u4e0d\u591f\uff0c\u8fd8\u9700\u8981\u5f00\u53d1\u8005\u624b\u52a8\u6807\u6ce8\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f, \u5982\u4e0b\u9762\u7684\u4f8b\u5b50: from example.param_verify.model import FailRespModel , UserSuccessRespModel from pait.app.starlette import pait from pait.model.status import PaitStatus @pait ( author = ( \"so1n\" ,), group = \"user\" , status = PaitStatus . release , tag = ( \"user\" , \"post\" ), response_model_list = [ UserSuccessRespModel , FailRespModel ], ) def demo () -> None : pass \u8fd9\u4e2a\u4f8b\u5b50\u589e\u52a0\u4e86 author , group , status \u7b49\u6807\u6ce8\uff0c\u5177\u4f53\u7684\u6807\u6ce8\u4f5c\u7528\u5982\u4e0b: author: \u7f16\u5199\u63a5\u53e3\u7684\u4f5c\u8005\u5217\u8868 group: \u63a5\u53e3\u6240\u5c5e\u7684\u7ec4(\u8be5\u9009\u9879\u76ee\u524d\u4e0d\u4f1a\u7528\u4e8eOpenAPI) tag: \u63a5\u53e3\u7684\u6807\u7b7e response_model_list: \u8fd4\u56de\u7684\u7ed3\u679c\u6570\u636e, \u9700\u8981\u7ee7\u627f\u4e8e pait.model.PaitResponseModel .\u7531\u4e8e pait \u662fweb\u6846\u67b6\u7684\u62d3\u5c55\u63d2\u4ef6,\u4e0d\u4f1a\u4fee\u6539\u6846\u67b6\u7684\u4ee3\u7801, \u6240\u4ee5\u8be5\u53c2\u6570\u4e0d\u4f1a\u4e0e\u63a5\u53e3\u751f\u6210\u7684\u54cd\u5e94\u8fdb\u884c\u6821\u9a8c(\u4e5f\u4e0d\u5e94\u8be5\u7528\u4e8e\u751f\u4ea7\u73af\u5883), \u76ee\u524d\u53ea\u4f1a\u7528\u4e8e\u6587\u6863\u751f\u6210\uff0cmock\u54cd\u5e94\u751f\u6210\uff0cTestClient\u6821\u9a8c\u7b49\u3002 status: \u63a5\u53e3\u7684\u72b6\u6001, \u76ee\u524d\u53ea\u652f\u6301PaitStatus\u7684\u51e0\u79cd\u72b6\u6001(\u8be5\u9009\u9879\u53ea\u6709\u4e0b\u7ebf\u76f8\u5173\u7684\u624d\u4f1a\u7528\u4e8eOpenAPI\u5e76\u6807\u6ce8\u4e3a\u5f03\u7528) \u9ed8\u8ba4\u72b6\u6001: undefined: \u672a\u5b9a\u4e49, \u9ed8\u8ba4\u72b6\u6001 \u5f00\u53d1\u4e2d: design: \u8bbe\u8ba1\u4e2d dev: \u5f00\u53d1\u6d4b\u8bd5\u4e2d \u5f00\u53d1\u5b8c\u6210: integration: \u8054\u8c03 complete: \u5f00\u53d1\u5b8c\u6210 test: \u6d4b\u8bd5\u4e2d \u4e0a\u7ebf: release: \u4e0a\u7ebf \u4e0b\u7ebf: abnormal: \u51fa\u73b0\u5f02\u5e38, \u4e0b\u7ebf maintenance: \u7ef4\u62a4\u4e2d archive: \u5f52\u6863 abandoned: \u9057\u5f03 2.OpenAPI \u901a\u8fc7\u7528\u6237\u624b\u52a8\u8865\u9f50\u8fd9\u4e9b\u6570\u636e\u540e\uff0c Pait \u5c31\u80fd\u751f\u6210\u4e00\u4efd\u5b8c\u6574\u7684OpenAPI\u6587\u6863\uff0c \u76ee\u524d Pait \u652f\u6301OpenAPI\u7684\u5927\u591a\u6570\u529f\u80fd,\u5c11\u6570\u672a\u5b9e\u73b0\u7684\u529f\u80fd\u5c06\u901a\u8fc7\u8fed\u4ee3\u9010\u6b65\u5b8c\u5584\uff0c\u76ee\u524d\u652f\u6301\u7684\u53c2\u6570\u5982\u4e0b(\u4e0b\u4e00\u4e2a\u7248\u672c\u4f1a\u63d0\u4f9b\u66f4\u591a\u7684\u53c2\u6570): title: OpenAPI \u7684title open_api_info: OpenAPI info\u7684\u53c2\u6570 open_api_tag_list: OpenAPI tag\u7684\u76f8\u5173\u63cf\u8ff0 open_api_server_list: OpenAPI server \u5217\u8868 type_: \u8f93\u51fa\u7684OpenAPI\u6587\u4ef6\u7c7b\u578b, \u53ef\u9009json\u548cyaml filename: \u8f93\u51fa\u6587\u4ef6\u540d, \u5982\u679c\u4e3a\u7a7a\u5219\u8f93\u51fa\u5230\u7ec8\u7aef \u4ee5\u4e0b\u662fOpenAPI\u6587\u6863\u8f93\u51fa\u7684\u793a\u4f8b\u4ee3\u7801: from pydantic import BaseModel , conint , constr from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait.field import Body # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class PydanticModel ( BaseModel ): uid : conint ( gt = 10 , lt = 1000 ) # \u81ea\u52a8\u6821\u9a8c\u7c7b\u578b\u662f\u5426\u4e3aint,\u4e14\u662f\u5426\u5927\u4e8e10\u5c0f\u4e8e1000 user_name : constr ( min_length = 2 , max_length = 4 ) # \u81ea\u52a8\u6821\u9a8c\u7c7b\u578b\u662f\u5426\u4e3astr, \u4e14\u957f\u5ea6\u662f\u5426\u5927\u4e8e\u7b49\u4e8e2,\u5c0f\u4e8e\u7b49\u4e8e4 # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : PydanticModel = Body . i () ): # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) from pait.api_doc.open_api import PaitOpenAPI from pait.app.starlette import load_app # \u63d0\u53d6\u8def\u7531\u4fe1\u606f\u5230pait\u7684\u6570\u636e\u6a21\u5757 pait_dict = load_app ( app ) # \u6839\u636e\u6570\u636e\u6a21\u5757\u7684\u6570\u636e\u751f\u6210\u8def\u7531\u7684OpenAPI PaitOpenAPI ( pait_dict ) \u901a\u8fc7\u6539\u4ee3\u7801\u5c31\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u4e00\u4e2aOpenAPI\u7684\u6587\u4ef6\uff0c\u4e0d\u8fc7\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u5f88\u5c11\u76f4\u63a5\u4f7f\u7528\u751f\u6210\u7684OpenAPI\u6587\u4ef6\uff0c\u5982\u679c\u5355\u7eaf\u7684\u9700\u8981\u4e00\u4efdAPI\u6587\u6863\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u81ea\u5e26\u7684 markdown \u6a21\u5757\u6765\u751f\u6210\u63a5\u53e3\u5bf9\u5e94\u7684 markdown \u6587\u6863\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from pait.api_doc.markdown import PaitMd PaitMd ( pait_dict ) . content 3.OpenAPI\u8def\u7531 \u5982\u6587\u6863\u9996\u9875\u793a\u4f8b\uff0c Pait \u8fd8\u652f\u6301OpenAPI\u8def\u7531, \u540c\u65f6\u652f\u6301 Redoc \u548c Swagger \u7684\u9875\u9762\u5c55\u793a, \u800c\u8fd9\u4e9b\u53ea\u9700\u8981\u8c03\u7528 add_doc_route \u51fd\u6570\u5373\u53ef\u4e3a app \u5b9e\u4f8b\u589e\u52a0\u4e09\u4e2a\u8def\u7531: /openapi.json \u83b7\u53d6OpenAPI\u7684json\u54cd\u5e94 /redoc \u4f7f\u7528 Redoc \u5c55\u793a\u63a5\u53e3\u6587\u6863\u6570\u636e /swagger \u4f7f\u7528 Swagger \u5c55\u793a\u63a5\u53e3\u6587\u6863\u6570\u636e \u5177\u4f53\u4f8b\u5b50\u5982\u4e0b: import uvicorn # type: ignore from pydantic import BaseModel , Field from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route # \u5f15\u5165add_doc_route, \u9488\u5bf9\u6bcf\u4e2a\u6846\u67b6\u90fd\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0 from pait.app.starlette import add_doc_route , pait from pait.field import Body # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class UserModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 ) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : UserModel = Body . i () # \u4f7f\u7528i\u51fd\u6570\u53ef\u4ee5\u89e3\u51b3mypy\u7c7b\u578b\u6821\u9a8c\u7684\u95ee\u9898 ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d add_doc_route ( app ) \u901a\u8fc7 add_doc_route \u51fd\u6570\uff0c\u7528\u6237\u5c31\u53ef\u4ee5\u8c03\u7528 http://127.0.0.1/swagger \u8bbf\u95ee\u5bf9\u5e94\u7684Swagger\u9875\u9762\uff0c\u5f97\u5230\u9996\u9875\u7c7b\u578b\u7684API\u6587\u6863\u9875\u9762\uff0c\u4e0d\u8fc7 add_doc_route \u51fd\u6570\u652f\u6301\u5176\u5b83\u53c2\u6570\uff0c\u5177\u4f53\u5982\u4e0b\uff1a # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d, \u5e76\u4e14\u4ee5/doc\u4e3a\u524d\u7f00 add_doc_route ( app , prefix = '/doc' ) # \u901a\u5e38\u6302\u5728Nginx\u540e\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u77e5\u9053\u5f53\u524d\u8bf7\u6c42\u7684scheme\u662fhttps\u8fd8\u662fhttp\uff0c\u53ef\u4ee5\u901a\u8fc7scheme\u6307\u5b9a\u8bf7\u6c42\u70b9scheme add_doc_route ( app , scheme = 'https' ) # \u901a\u5e38\u4e0d\u9002\u5408\u628a\u63a5\u53e3\u6587\u6863\u66b4\u9732\u7ed9\u5916\u9762\u7684\u7528\u6237\u4f7f\u7528\uff0c\u76ee\u524d\u652f\u6301`pin_code`\u53c2\u6570\u6765\u589e\u52a0\u4e00\u70b9\u70b9\u5b89\u5168\u6027\uff0c # \u6bd4\u5982\u5982\u4e0b\u5b9a\u4e49\u540e\uff0c\u53ea\u80fd\u901a\u8fc7http://127.0.0.1/swagger?pin_code=6666\u624d\u80fd\u6210\u529f\u8bbf\u95eeSwagger\u9875\u9762 add_doc_route ( app , pin_code = '6666' ) if __name__ == \"__main__\" : uvicorn . run ( app , log_level = \"debug\" ) 3.1.OpenAPI\u8def\u7531\u7684\u6a21\u677f\u53d8\u91cf \u5728\u7f16\u5199API\u63a5\u53e3\u65f6\uff0c\u5927\u90e8\u5206\u63a5\u53e3\u90fd\u662f\u9700\u8981\u767b\u5f55\u7684\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u5e26\u4e0aToken\u53c2\u6570\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u662f\u4ece\u6570\u636e\u5e93\u67e5\u51fa\u5bf9\u5e94\u7684Token\u518d\u7c98\u8d34\u4f1a\u975e\u5e38\u7684\u9ebb\u70e6\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u53d8\u91cf\uff0c\u8ba9 Pait \u5e2e\u52a9\u7528\u6237\u81ea\u52a8\u586b\u5199\u53d8\u91cf\u7684\u503c\uff0c\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u4e3a\u5176\u4e2d\u7684uid\u5f15\u5165\u5bf9\u5e94\u7684\u6a21\u677f\u53d8\u91cf\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import uvicorn # type: ignore from pydantic import BaseModel , Field from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route # \u5f15\u5165add_doc_route, \u9488\u5bf9\u6bcf\u4e2a\u6846\u67b6\u90fd\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0 from pait.app.starlette import add_doc_route , pait from pait.field import Body from pait.model.template import TemplateVar # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class UserModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 , example = TemplateVar ( \"uid\" )) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : UserModel = Body . i () # \u4f7f\u7528i\u51fd\u6570\u53ef\u4ee5\u89e3\u51b3mypy\u7c7b\u578b\u6821\u9a8c\u7684\u95ee\u9898 ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d add_doc_route ( app ) if __name__ == \"__main__\" : uvicorn . run ( app , log_level = \"debug\" ) \u8fd9\u6bb5\u4ee3\u7801\u901a\u8fc7\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u5f15\u5165\u4e86\u4e00\u4e2a TemplateVar \u7c7b\uff0c\u63a5\u7740\u5728\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u4e2d\uff0cuid\u7684Field\u7684example\u5c5e\u6027\u88ab\u586b\u5199 TemplateVar(\"uid\") \uff0c\u4e4b\u540e\u5728\u8fd0\u884c\u7684\u65f6\u5019 Pait \u5c31\u77e5\u9053\u53c2\u6570 uid \u7684\u6a21\u677f\u53d8\u91cf\u4e3a uid \u3002 \u73b0\u5728\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u8f93\u5165 http://127.0.0.1:8000/swagger?template-uid=123 \uff0c\u6253\u5f00\u540e\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u56fe: \u901a\u8fc7\u56fe\u53ef\u4ee5\u53d1\u73b0\u8f93\u5165\u7684123\u88ab\u8bbe\u7f6e\u5230\u5bf9\u5e94\u7684\u53c2\u6570\u4e2d\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u76840\u4e86\u3002 Pait \u4e4b\u6240\u4ee5\u80fd\u628a\u7528\u6237\u7684\u503c\u8bbe\u7f6e\u5230\u5bf9\u5e94\u7684\u53c2\u6570\u4e2d\u662f\u56e0\u4e3a\u8fd9\u4e2aurl\u591a\u4e86\u4e00\u6bb5 template-uid=123 \uff0c\u8fd9\u6837\u4e00\u6765OpenAPI\u8def\u7531\u5728\u6536\u5230\u5bf9\u5e94\u7684\u8bf7\u6c42\u5728\u53d1\u73b0\u8bf7\u6c42\u643a\u5e26\u4e86\u4e00\u4e2a\u4ee5 template- \u5f00\u5934\u7684\u53d8\u91cf\uff0c\u77e5\u9053\u8fd9\u662f\u7528\u6237\u4e3a\u6a21\u677f\u53d8\u91cf uid \u6307\u5b9a\u4e86\u5bf9\u5e94\u7684\u503c\uff0c\u4e8e\u662f\u5728\u751f\u6210OpenAPI\u6570\u636e\u65f6\uff0c\u4f1a\u81ea\u52a8\u5e2e\u6a21\u677f\u53d8\u91cf\u4e3auid\u7684\u53c2\u6570\u9644\u4e0a\u7528\u6237\u7684\u503c\u3002","title":"API doc"},{"location":"3_api_doc/#1","text":"Pait \u4f1a\u5728\u8fd0\u884c\u65f6\u81ea\u52a8\u6355\u83b7\u8def\u7531\u51fd\u6570\u7684\u8bf7\u6c42\u53c2\u6570\u548curl\uff0cmethod\u7b49\u4fe1\u606f\u81ea\u52a8\u751f\u6210OpenAPI\u6570\u636e, \u4e0d\u8fc7\u5355\u9760\u51fd\u6570\u7684\u4fe1\u606f\u8fd8\u4e0d\u591f\uff0c\u8fd8\u9700\u8981\u5f00\u53d1\u8005\u624b\u52a8\u6807\u6ce8\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f, \u5982\u4e0b\u9762\u7684\u4f8b\u5b50: from example.param_verify.model import FailRespModel , UserSuccessRespModel from pait.app.starlette import pait from pait.model.status import PaitStatus @pait ( author = ( \"so1n\" ,), group = \"user\" , status = PaitStatus . release , tag = ( \"user\" , \"post\" ), response_model_list = [ UserSuccessRespModel , FailRespModel ], ) def demo () -> None : pass \u8fd9\u4e2a\u4f8b\u5b50\u589e\u52a0\u4e86 author , group , status \u7b49\u6807\u6ce8\uff0c\u5177\u4f53\u7684\u6807\u6ce8\u4f5c\u7528\u5982\u4e0b: author: \u7f16\u5199\u63a5\u53e3\u7684\u4f5c\u8005\u5217\u8868 group: \u63a5\u53e3\u6240\u5c5e\u7684\u7ec4(\u8be5\u9009\u9879\u76ee\u524d\u4e0d\u4f1a\u7528\u4e8eOpenAPI) tag: \u63a5\u53e3\u7684\u6807\u7b7e response_model_list: \u8fd4\u56de\u7684\u7ed3\u679c\u6570\u636e, \u9700\u8981\u7ee7\u627f\u4e8e pait.model.PaitResponseModel .\u7531\u4e8e pait \u662fweb\u6846\u67b6\u7684\u62d3\u5c55\u63d2\u4ef6,\u4e0d\u4f1a\u4fee\u6539\u6846\u67b6\u7684\u4ee3\u7801, \u6240\u4ee5\u8be5\u53c2\u6570\u4e0d\u4f1a\u4e0e\u63a5\u53e3\u751f\u6210\u7684\u54cd\u5e94\u8fdb\u884c\u6821\u9a8c(\u4e5f\u4e0d\u5e94\u8be5\u7528\u4e8e\u751f\u4ea7\u73af\u5883), \u76ee\u524d\u53ea\u4f1a\u7528\u4e8e\u6587\u6863\u751f\u6210\uff0cmock\u54cd\u5e94\u751f\u6210\uff0cTestClient\u6821\u9a8c\u7b49\u3002 status: \u63a5\u53e3\u7684\u72b6\u6001, \u76ee\u524d\u53ea\u652f\u6301PaitStatus\u7684\u51e0\u79cd\u72b6\u6001(\u8be5\u9009\u9879\u53ea\u6709\u4e0b\u7ebf\u76f8\u5173\u7684\u624d\u4f1a\u7528\u4e8eOpenAPI\u5e76\u6807\u6ce8\u4e3a\u5f03\u7528) \u9ed8\u8ba4\u72b6\u6001: undefined: \u672a\u5b9a\u4e49, \u9ed8\u8ba4\u72b6\u6001 \u5f00\u53d1\u4e2d: design: \u8bbe\u8ba1\u4e2d dev: \u5f00\u53d1\u6d4b\u8bd5\u4e2d \u5f00\u53d1\u5b8c\u6210: integration: \u8054\u8c03 complete: \u5f00\u53d1\u5b8c\u6210 test: \u6d4b\u8bd5\u4e2d \u4e0a\u7ebf: release: \u4e0a\u7ebf \u4e0b\u7ebf: abnormal: \u51fa\u73b0\u5f02\u5e38, \u4e0b\u7ebf maintenance: \u7ef4\u62a4\u4e2d archive: \u5f52\u6863 abandoned: \u9057\u5f03","title":"1.\u4ecb\u7ecd"},{"location":"3_api_doc/#2openapi","text":"\u901a\u8fc7\u7528\u6237\u624b\u52a8\u8865\u9f50\u8fd9\u4e9b\u6570\u636e\u540e\uff0c Pait \u5c31\u80fd\u751f\u6210\u4e00\u4efd\u5b8c\u6574\u7684OpenAPI\u6587\u6863\uff0c \u76ee\u524d Pait \u652f\u6301OpenAPI\u7684\u5927\u591a\u6570\u529f\u80fd,\u5c11\u6570\u672a\u5b9e\u73b0\u7684\u529f\u80fd\u5c06\u901a\u8fc7\u8fed\u4ee3\u9010\u6b65\u5b8c\u5584\uff0c\u76ee\u524d\u652f\u6301\u7684\u53c2\u6570\u5982\u4e0b(\u4e0b\u4e00\u4e2a\u7248\u672c\u4f1a\u63d0\u4f9b\u66f4\u591a\u7684\u53c2\u6570): title: OpenAPI \u7684title open_api_info: OpenAPI info\u7684\u53c2\u6570 open_api_tag_list: OpenAPI tag\u7684\u76f8\u5173\u63cf\u8ff0 open_api_server_list: OpenAPI server \u5217\u8868 type_: \u8f93\u51fa\u7684OpenAPI\u6587\u4ef6\u7c7b\u578b, \u53ef\u9009json\u548cyaml filename: \u8f93\u51fa\u6587\u4ef6\u540d, \u5982\u679c\u4e3a\u7a7a\u5219\u8f93\u51fa\u5230\u7ec8\u7aef \u4ee5\u4e0b\u662fOpenAPI\u6587\u6863\u8f93\u51fa\u7684\u793a\u4f8b\u4ee3\u7801: from pydantic import BaseModel , conint , constr from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait.field import Body # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class PydanticModel ( BaseModel ): uid : conint ( gt = 10 , lt = 1000 ) # \u81ea\u52a8\u6821\u9a8c\u7c7b\u578b\u662f\u5426\u4e3aint,\u4e14\u662f\u5426\u5927\u4e8e10\u5c0f\u4e8e1000 user_name : constr ( min_length = 2 , max_length = 4 ) # \u81ea\u52a8\u6821\u9a8c\u7c7b\u578b\u662f\u5426\u4e3astr, \u4e14\u957f\u5ea6\u662f\u5426\u5927\u4e8e\u7b49\u4e8e2,\u5c0f\u4e8e\u7b49\u4e8e4 # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : PydanticModel = Body . i () ): # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) from pait.api_doc.open_api import PaitOpenAPI from pait.app.starlette import load_app # \u63d0\u53d6\u8def\u7531\u4fe1\u606f\u5230pait\u7684\u6570\u636e\u6a21\u5757 pait_dict = load_app ( app ) # \u6839\u636e\u6570\u636e\u6a21\u5757\u7684\u6570\u636e\u751f\u6210\u8def\u7531\u7684OpenAPI PaitOpenAPI ( pait_dict ) \u901a\u8fc7\u6539\u4ee3\u7801\u5c31\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u4e00\u4e2aOpenAPI\u7684\u6587\u4ef6\uff0c\u4e0d\u8fc7\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u5f88\u5c11\u76f4\u63a5\u4f7f\u7528\u751f\u6210\u7684OpenAPI\u6587\u4ef6\uff0c\u5982\u679c\u5355\u7eaf\u7684\u9700\u8981\u4e00\u4efdAPI\u6587\u6863\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u81ea\u5e26\u7684 markdown \u6a21\u5757\u6765\u751f\u6210\u63a5\u53e3\u5bf9\u5e94\u7684 markdown \u6587\u6863\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from pait.api_doc.markdown import PaitMd PaitMd ( pait_dict ) . content","title":"2.OpenAPI"},{"location":"3_api_doc/#3openapi","text":"\u5982\u6587\u6863\u9996\u9875\u793a\u4f8b\uff0c Pait \u8fd8\u652f\u6301OpenAPI\u8def\u7531, \u540c\u65f6\u652f\u6301 Redoc \u548c Swagger \u7684\u9875\u9762\u5c55\u793a, \u800c\u8fd9\u4e9b\u53ea\u9700\u8981\u8c03\u7528 add_doc_route \u51fd\u6570\u5373\u53ef\u4e3a app \u5b9e\u4f8b\u589e\u52a0\u4e09\u4e2a\u8def\u7531: /openapi.json \u83b7\u53d6OpenAPI\u7684json\u54cd\u5e94 /redoc \u4f7f\u7528 Redoc \u5c55\u793a\u63a5\u53e3\u6587\u6863\u6570\u636e /swagger \u4f7f\u7528 Swagger \u5c55\u793a\u63a5\u53e3\u6587\u6863\u6570\u636e \u5177\u4f53\u4f8b\u5b50\u5982\u4e0b: import uvicorn # type: ignore from pydantic import BaseModel , Field from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route # \u5f15\u5165add_doc_route, \u9488\u5bf9\u6bcf\u4e2a\u6846\u67b6\u90fd\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0 from pait.app.starlette import add_doc_route , pait from pait.field import Body # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class UserModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 ) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : UserModel = Body . i () # \u4f7f\u7528i\u51fd\u6570\u53ef\u4ee5\u89e3\u51b3mypy\u7c7b\u578b\u6821\u9a8c\u7684\u95ee\u9898 ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d add_doc_route ( app ) \u901a\u8fc7 add_doc_route \u51fd\u6570\uff0c\u7528\u6237\u5c31\u53ef\u4ee5\u8c03\u7528 http://127.0.0.1/swagger \u8bbf\u95ee\u5bf9\u5e94\u7684Swagger\u9875\u9762\uff0c\u5f97\u5230\u9996\u9875\u7c7b\u578b\u7684API\u6587\u6863\u9875\u9762\uff0c\u4e0d\u8fc7 add_doc_route \u51fd\u6570\u652f\u6301\u5176\u5b83\u53c2\u6570\uff0c\u5177\u4f53\u5982\u4e0b\uff1a # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d, \u5e76\u4e14\u4ee5/doc\u4e3a\u524d\u7f00 add_doc_route ( app , prefix = '/doc' ) # \u901a\u5e38\u6302\u5728Nginx\u540e\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u77e5\u9053\u5f53\u524d\u8bf7\u6c42\u7684scheme\u662fhttps\u8fd8\u662fhttp\uff0c\u53ef\u4ee5\u901a\u8fc7scheme\u6307\u5b9a\u8bf7\u6c42\u70b9scheme add_doc_route ( app , scheme = 'https' ) # \u901a\u5e38\u4e0d\u9002\u5408\u628a\u63a5\u53e3\u6587\u6863\u66b4\u9732\u7ed9\u5916\u9762\u7684\u7528\u6237\u4f7f\u7528\uff0c\u76ee\u524d\u652f\u6301`pin_code`\u53c2\u6570\u6765\u589e\u52a0\u4e00\u70b9\u70b9\u5b89\u5168\u6027\uff0c # \u6bd4\u5982\u5982\u4e0b\u5b9a\u4e49\u540e\uff0c\u53ea\u80fd\u901a\u8fc7http://127.0.0.1/swagger?pin_code=6666\u624d\u80fd\u6210\u529f\u8bbf\u95eeSwagger\u9875\u9762 add_doc_route ( app , pin_code = '6666' ) if __name__ == \"__main__\" : uvicorn . run ( app , log_level = \"debug\" )","title":"3.OpenAPI\u8def\u7531"},{"location":"3_api_doc/#31openapi","text":"\u5728\u7f16\u5199API\u63a5\u53e3\u65f6\uff0c\u5927\u90e8\u5206\u63a5\u53e3\u90fd\u662f\u9700\u8981\u767b\u5f55\u7684\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u5e26\u4e0aToken\u53c2\u6570\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u662f\u4ece\u6570\u636e\u5e93\u67e5\u51fa\u5bf9\u5e94\u7684Token\u518d\u7c98\u8d34\u4f1a\u975e\u5e38\u7684\u9ebb\u70e6\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u53d8\u91cf\uff0c\u8ba9 Pait \u5e2e\u52a9\u7528\u6237\u81ea\u52a8\u586b\u5199\u53d8\u91cf\u7684\u503c\uff0c\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u4e3a\u5176\u4e2d\u7684uid\u5f15\u5165\u5bf9\u5e94\u7684\u6a21\u677f\u53d8\u91cf\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import uvicorn # type: ignore from pydantic import BaseModel , Field from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route # \u5f15\u5165add_doc_route, \u9488\u5bf9\u6bcf\u4e2a\u6846\u67b6\u90fd\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0 from pait.app.starlette import add_doc_route , pait from pait.field import Body from pait.model.template import TemplateVar # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class UserModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 , example = TemplateVar ( \"uid\" )) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : UserModel = Body . i () # \u4f7f\u7528i\u51fd\u6570\u53ef\u4ee5\u89e3\u51b3mypy\u7c7b\u578b\u6821\u9a8c\u7684\u95ee\u9898 ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d add_doc_route ( app ) if __name__ == \"__main__\" : uvicorn . run ( app , log_level = \"debug\" ) \u8fd9\u6bb5\u4ee3\u7801\u901a\u8fc7\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u5f15\u5165\u4e86\u4e00\u4e2a TemplateVar \u7c7b\uff0c\u63a5\u7740\u5728\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u4e2d\uff0cuid\u7684Field\u7684example\u5c5e\u6027\u88ab\u586b\u5199 TemplateVar(\"uid\") \uff0c\u4e4b\u540e\u5728\u8fd0\u884c\u7684\u65f6\u5019 Pait \u5c31\u77e5\u9053\u53c2\u6570 uid \u7684\u6a21\u677f\u53d8\u91cf\u4e3a uid \u3002 \u73b0\u5728\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u8f93\u5165 http://127.0.0.1:8000/swagger?template-uid=123 \uff0c\u6253\u5f00\u540e\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u56fe: \u901a\u8fc7\u56fe\u53ef\u4ee5\u53d1\u73b0\u8f93\u5165\u7684123\u88ab\u8bbe\u7f6e\u5230\u5bf9\u5e94\u7684\u53c2\u6570\u4e2d\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u76840\u4e86\u3002 Pait \u4e4b\u6240\u4ee5\u80fd\u628a\u7528\u6237\u7684\u503c\u8bbe\u7f6e\u5230\u5bf9\u5e94\u7684\u53c2\u6570\u4e2d\u662f\u56e0\u4e3a\u8fd9\u4e2aurl\u591a\u4e86\u4e00\u6bb5 template-uid=123 \uff0c\u8fd9\u6837\u4e00\u6765OpenAPI\u8def\u7531\u5728\u6536\u5230\u5bf9\u5e94\u7684\u8bf7\u6c42\u5728\u53d1\u73b0\u8bf7\u6c42\u643a\u5e26\u4e86\u4e00\u4e2a\u4ee5 template- \u5f00\u5934\u7684\u53d8\u91cf\uff0c\u77e5\u9053\u8fd9\u662f\u7528\u6237\u4e3a\u6a21\u677f\u53d8\u91cf uid \u6307\u5b9a\u4e86\u5bf9\u5e94\u7684\u503c\uff0c\u4e8e\u662f\u5728\u751f\u6210OpenAPI\u6570\u636e\u65f6\uff0c\u4f1a\u81ea\u52a8\u5e2e\u6a21\u677f\u53d8\u91cf\u4e3auid\u7684\u53c2\u6570\u9644\u4e0a\u7528\u6237\u7684\u503c\u3002","title":"3.1.OpenAPI\u8def\u7531\u7684\u6a21\u677f\u53d8\u91cf"},{"location":"4_unit_test_helper/","text":"Pait \u5bf9\u4e8e\u5355\u5143\u6d4b\u8bd5\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u652f\u6301\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u50cf\u8c03\u7528\u51fd\u6570\u4e00\u6837\u53bb\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5e76\u81ea\u52a8\u4ece response_modle_list \u4e2d\u6311\u9009\u4e00\u4e2a\u6700\u5408\u9002\u7684 response_model \u4e0e\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u7b80\u5355\u7684\u6821\u9a8c\uff0c\u4ece\u800c\u51cf\u5c11\u5f00\u53d1\u8005\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u7684\u4ee3\u7801\u91cf\u3002 \u4f7f\u7528\u65b9\u6cd5 \u4ee5 example.starlette_example.py.post_route \u4e3a\u4f8b\u5b50\uff1a @other_pait ( status = PaitStatus . release , tag = ( tag . user_tag , tag . post_tag ), response_model_list = [ UserSuccessRespModel , FailRespModel ], ) async def post_route ( model : UserModel = Body . i ( raw_return = True ), other_model : UserOtherModel = Body . i ( raw_return = True ), sex : SexEnum = Body . i ( description = \"sex\" ), content_type : str = Header . i ( alias = \"Content-Type\" , description = \"Content-Type\" ), ) -> JSONResponse : \"\"\"Test Method:Post Pydantic Model\"\"\" return_dict = model . dict () return_dict [ \"sex\" ] = sex . value return_dict . update ( other_model . dict ()) return_dict . update ({ \"content_type\" : content_type }) return JSONResponse ({ \"code\" : 0 , \"msg\" : \"\" , \"data\" : return_dict }) \u8fd9\u6bb5\u4ee3\u7801\u662f\u4e00\u4e2a\u88ab Pait \u88c5\u9970\u7684\u51fd\u6570\u7684\u63a5\u53e3\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u8c03\u7528\uff0c\u6765\u5b8c\u6210\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a class TestStarlette : def test_post ( self , client : TestClient ) -> None : StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . json () \u5728\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c \u5f00\u53d1\u8005\u53ea\u9700\u8981\u4f20\u5165\u6846\u67b6\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\uff0c\u8def\u7531\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u4ee5\u53ca\u4e00\u4e9b\u8bf7\u6c42\u53c2\u6570\u5373\u53ef\uff0c\u6700\u540e\u901a\u8fc7 json \u65b9\u6cd5\u83b7\u53d6\u5230\u8be5\u63a5\u53e3\u54cd\u5e94\u7684\u6570\u636e\u3002 \u5728\u8fd9\u6bb5\u8c03\u7528\u903b\u8f91\u4e2d\uff0c TestHelper \u81ea\u52a8\u53d1\u73b0\u4e86\u8def\u7531\u51fd\u6570\u7684 Url \u548c\u8bf7\u6c42\u65b9\u6cd5\uff0c\u6240\u4ee5\u8c03\u7528 json \u7684\u65f6\u5019 TestHelper \u81ea\u52a8\u53d1\u8d77\u4e86 post \u8bf7\u6c42\uff0c \u7136\u540e\u628a\u54cd\u5e94Body\u5e8f\u5217\u5316\u4e3a Python \u7684 dict \u5bf9\u8c61\u8fd4\u56de\uff0c \u4f46\u662f\u5f53\u8be5\u8def\u7531\u51fd\u6570\u7ed1\u5b9a\u4e86\u591a\u4e2a\u8bf7\u6c42\u65b9\u6cd5\u65f6\uff0c TestHelper \u5219\u65e0\u6cd5\u81ea\u52a8\u6267\u884c\uff0c\u9700\u8981\u624b\u52a8\u6307\u5b9a\u5bf9\u5e94\u7684\u65b9\u6cd5\u6765\u53d1\u8d77\u8bf7\u6c42\uff0c \u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801: class TestStarlette : def test_post ( self , client : TestClient ) -> None : StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . json ( method = \"post\" ) \u6b64\u5916\uff0c\u5728\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u53ef\u80fd\u5bf9\u4f1a\u72b6\u6001\u7801\uff0c Header \u4e4b\u7c7b\u7684\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c\u8fd9\u65f6\u9700\u8981\u4e00\u4e2a\u54cd\u5e94\u5bf9\u8c61 \uff0c TestHelper \u652f\u6301\u901a\u8fc7\u6307\u5b9a\u5bf9\u5e94\u7684Http\u8bf7\u6c42\u65b9\u6cd5\u540d\u6765\u8c03\u7528\uff0c\u6700\u540e\u8fd4\u56de\u5bf9\u5e94\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684\u54cd\u5e94\u5bf9\u8c61 Response : class TestStarlette : def test_post ( self , client : TestClient ) -> None : response : Response = StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . post () response . json () \u867d\u7136\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528 TestHelper \u548c\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\u6ca1\u6709\u592a\u5927\u7684\u5dee\u522b\uff0c\u4f46\u662f TestHelper \u7684\u5185\u4f1a\u5728\u83b7\u53d6\u5230\u8def\u7531\u51fd\u6570\u7684\u54cd\u5e94\u540e\uff0c \u628a\u54cd\u5e94\u6570\u636e\u653e\u5165 Pait \u88c5\u9970\u5668\u4e2d response_model_list \u586b\u5199\u7684 response_model \u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u68c0\u67e5\u5230HTTP\u72b6\u6001\u7801\uff0cHeader\uff0cBody\u4e09\u8005\u4e2d\u6709\u4e00\u4e2a\u4e0d\u7b26\u5408\u6761\u4ef6\u5c31\u4f1a\u629b\u51fa\u9519\u8bef\uff0c\u4e2d\u65ad\u6d4b\u8bd5\u7528\u4f8b\uff08\u5982\u679c\u6709\u591a\u4e2a response_model \uff0c\u5219\u4f1a\u667a\u80fd\u7684\u6311\u9009\u6700\u5408\u9002\u7684\u4e00\u4e2a\uff09\u3002 \u53c2\u6570\u4ecb\u7ecd TestHelper \u7684\u53c2\u6570\u5206\u4e3a\u521d\u59cb\u5316\u53c2\u6570\uff0c\u8bf7\u6c42\u53c2\u6570\uff0c\u54cd\u5e94\u7ed3\u679c\u53c2\u65703\u79cd\u3002\u5176\u4e2d\uff0c\u521d\u59cb\u5316\u53c2\u6570\u67093\u4e2a\uff0c\u5206\u522b\u4e3a\uff1a client: \u6d4b\u8bd5\u6846\u67b6\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef func: \u8def\u7531\u51fd\u6570 pait_dict: Pait \u9488\u5bf9\u8def\u7531\u51fd\u6570\u751f\u6210\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u4e0d\u586b\uff0c TestHelper \u5728\u521d\u59cb\u5316\u65f6\u4f1a\u81ea\u52a8\u8865\u5168\u3002 \u8bf7\u6c42\u53c2\u6570\u6709\u591a\u4e2a\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u80fd\u5bf9\u4e8e\u5927\u591a\u6570\u5f00\u53d1\u8005\u6765\u8bf4\u5e73\u5e73\u65e0\u5947\uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528 Tornado \u4e4b\u7c7b\u7684\u6ca1\u5bf9\u6d4b\u8bd5\u5ba2\u6237\u7aef\u505a\u8fc7\u591a\u5c01\u88c5\u7684\u6846\u67b6\u7684\u5f00\u53d1\u8005\u5219\u80fd\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4fbf\u5229\uff0c\u8fd9\u4e9b\u53c2\u6570\u6709: body_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684Json\u6570\u636e\u3002 cookie_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684cookie\u6570\u636e\u3002 file_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684file\u6570\u636e\u3002 form_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684form\u6570\u636e\u3002 header_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684header\u6570\u636e\u3002 path_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684path\u6570\u636e\u3002 query_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684query\u6570\u636e\u3002 \u9664\u6b64\u4e4b\u5916\uff0c TestHelper \u8fd8\u67093\u4e2a\u4e0eHTTP\u54cd\u5e94\u7ed3\u679c\u7684Body\u6821\u9a8c\u76f8\u5173\u7684\u53c2\u6570\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u54cd\u5e94\u7ed3\u679c\u7684Body\u4f1a\u4e0e\u5f00\u53d1\u8005\u586b\u5199\u7684 response_model \u7684 response_data \u8fdb\u884c\u6821\u9a8c\uff0c \u5982\u679cBody\u7684\u7c7b\u578b\u5c5e\u4e8eJson\uff0c TestHelper \u9664\u4e86\u4f1a\u5bf9\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u8fdb\u884c\u6821\u9a8c\u5916\uff0c\u8fd8\u4f1a\u5bf9\u5b57\u6bb5\u5dee\u5f02\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u51fa\u73b0\u5dee\u5f02\u5219\u4f1a\u62a5\u9519\uff0c\u6bd4\u5982\u4e0b\u9762a\u53d8\u91cf\u662f\u6211\u4eec\u5b9a\u4e49\u7684 response_demo \u6570\u636e\u7ed3\u6784\uff0cb\u53d8\u91cf\u662f\u54cd\u5e94\u4f53\u7684\u6570\u636e\u7ed3\u6784: a = { \"a\" : 1 , \"b\" : { \"c\" : 3 } } b = { \"a\" : 2 , \"b\" : { \"c\" : 3 , \"d\" : 4 } } TestHelper \u68c0\u6d4b\u5230b\u53d8\u91cf\u591a\u51fa\u6765\u4e00\u4e2a\u7ed3\u6784 b['b']['d'] \uff0c\u6240\u4ee5b\u53d8\u91cf\u5e76\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u54cd\u5e94\u4f53\uff0c TestHelper \u76f4\u63a5\u629b\u51fa\u9519\u8bef\uff0c \u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u53c2\u6570 strict_inspection_check_json_content \u7684\u503c\u4e3a False \uff0c\u8fd9\u6837\u53ea\u4f1a\u6821\u9a8c\u51fa\u73b0\u5728 response_model \u7684\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5426\u5408\u6cd5\u4ee5\u53ca\u662f\u5426\u7f3a\u5c11\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u4e0d\u4f1a\u68c0\u67e5\u591a\u51fa\u7684\u5b57\u6bb5\u3002 \u9664\u4e86\u53c2\u6570 strict_inspection_check_json_content \u5916\uff0c TestHelper \u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u53c2\u6570\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u5982\u4e0b: target_pait_response_class: \u8be5\u53c2\u6570\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6307\u5b9a\u7684 response_model \uff0c\u8fd9\u6837 TestHelper \u5c31\u4f1a\u4ece response_model_list \u4e2d\u7b5b\u9009\u51fa\u4e00\u6279\u7b26\u5408\u6761\u4ef6\u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\u3002 find_coro_response_model: \u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3a False \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b TestHelper \u4f1a\u4ece\u7b5b\u9009\u540e\u7684 response_model_list \u4e2d\u81ea\u52a8\u6311\u9009\u4e0e\u54cd\u5e94\u4f53\u6700\u7b26\u5408\u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u90a3\u4e48 TestHelper \u53ea\u4f1a\u4ece\u7b5b\u9009\u540e\u7684 response_model_list \u4e2d\u6311\u51fa\u7b2c\u4e00\u4e2a\u5c5e\u6027 is_core \u4e3a True \u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\u3002","title":"Unit test helper"},{"location":"4_unit_test_helper/#_1","text":"\u4ee5 example.starlette_example.py.post_route \u4e3a\u4f8b\u5b50\uff1a @other_pait ( status = PaitStatus . release , tag = ( tag . user_tag , tag . post_tag ), response_model_list = [ UserSuccessRespModel , FailRespModel ], ) async def post_route ( model : UserModel = Body . i ( raw_return = True ), other_model : UserOtherModel = Body . i ( raw_return = True ), sex : SexEnum = Body . i ( description = \"sex\" ), content_type : str = Header . i ( alias = \"Content-Type\" , description = \"Content-Type\" ), ) -> JSONResponse : \"\"\"Test Method:Post Pydantic Model\"\"\" return_dict = model . dict () return_dict [ \"sex\" ] = sex . value return_dict . update ( other_model . dict ()) return_dict . update ({ \"content_type\" : content_type }) return JSONResponse ({ \"code\" : 0 , \"msg\" : \"\" , \"data\" : return_dict }) \u8fd9\u6bb5\u4ee3\u7801\u662f\u4e00\u4e2a\u88ab Pait \u88c5\u9970\u7684\u51fd\u6570\u7684\u63a5\u53e3\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u8c03\u7528\uff0c\u6765\u5b8c\u6210\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a class TestStarlette : def test_post ( self , client : TestClient ) -> None : StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . json () \u5728\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c \u5f00\u53d1\u8005\u53ea\u9700\u8981\u4f20\u5165\u6846\u67b6\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\uff0c\u8def\u7531\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u4ee5\u53ca\u4e00\u4e9b\u8bf7\u6c42\u53c2\u6570\u5373\u53ef\uff0c\u6700\u540e\u901a\u8fc7 json \u65b9\u6cd5\u83b7\u53d6\u5230\u8be5\u63a5\u53e3\u54cd\u5e94\u7684\u6570\u636e\u3002 \u5728\u8fd9\u6bb5\u8c03\u7528\u903b\u8f91\u4e2d\uff0c TestHelper \u81ea\u52a8\u53d1\u73b0\u4e86\u8def\u7531\u51fd\u6570\u7684 Url \u548c\u8bf7\u6c42\u65b9\u6cd5\uff0c\u6240\u4ee5\u8c03\u7528 json \u7684\u65f6\u5019 TestHelper \u81ea\u52a8\u53d1\u8d77\u4e86 post \u8bf7\u6c42\uff0c \u7136\u540e\u628a\u54cd\u5e94Body\u5e8f\u5217\u5316\u4e3a Python \u7684 dict \u5bf9\u8c61\u8fd4\u56de\uff0c \u4f46\u662f\u5f53\u8be5\u8def\u7531\u51fd\u6570\u7ed1\u5b9a\u4e86\u591a\u4e2a\u8bf7\u6c42\u65b9\u6cd5\u65f6\uff0c TestHelper \u5219\u65e0\u6cd5\u81ea\u52a8\u6267\u884c\uff0c\u9700\u8981\u624b\u52a8\u6307\u5b9a\u5bf9\u5e94\u7684\u65b9\u6cd5\u6765\u53d1\u8d77\u8bf7\u6c42\uff0c \u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801: class TestStarlette : def test_post ( self , client : TestClient ) -> None : StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . json ( method = \"post\" ) \u6b64\u5916\uff0c\u5728\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u53ef\u80fd\u5bf9\u4f1a\u72b6\u6001\u7801\uff0c Header \u4e4b\u7c7b\u7684\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c\u8fd9\u65f6\u9700\u8981\u4e00\u4e2a\u54cd\u5e94\u5bf9\u8c61 \uff0c TestHelper \u652f\u6301\u901a\u8fc7\u6307\u5b9a\u5bf9\u5e94\u7684Http\u8bf7\u6c42\u65b9\u6cd5\u540d\u6765\u8c03\u7528\uff0c\u6700\u540e\u8fd4\u56de\u5bf9\u5e94\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684\u54cd\u5e94\u5bf9\u8c61 Response : class TestStarlette : def test_post ( self , client : TestClient ) -> None : response : Response = StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . post () response . json () \u867d\u7136\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528 TestHelper \u548c\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\u6ca1\u6709\u592a\u5927\u7684\u5dee\u522b\uff0c\u4f46\u662f TestHelper \u7684\u5185\u4f1a\u5728\u83b7\u53d6\u5230\u8def\u7531\u51fd\u6570\u7684\u54cd\u5e94\u540e\uff0c \u628a\u54cd\u5e94\u6570\u636e\u653e\u5165 Pait \u88c5\u9970\u5668\u4e2d response_model_list \u586b\u5199\u7684 response_model \u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u68c0\u67e5\u5230HTTP\u72b6\u6001\u7801\uff0cHeader\uff0cBody\u4e09\u8005\u4e2d\u6709\u4e00\u4e2a\u4e0d\u7b26\u5408\u6761\u4ef6\u5c31\u4f1a\u629b\u51fa\u9519\u8bef\uff0c\u4e2d\u65ad\u6d4b\u8bd5\u7528\u4f8b\uff08\u5982\u679c\u6709\u591a\u4e2a response_model \uff0c\u5219\u4f1a\u667a\u80fd\u7684\u6311\u9009\u6700\u5408\u9002\u7684\u4e00\u4e2a\uff09\u3002","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"4_unit_test_helper/#_2","text":"TestHelper \u7684\u53c2\u6570\u5206\u4e3a\u521d\u59cb\u5316\u53c2\u6570\uff0c\u8bf7\u6c42\u53c2\u6570\uff0c\u54cd\u5e94\u7ed3\u679c\u53c2\u65703\u79cd\u3002\u5176\u4e2d\uff0c\u521d\u59cb\u5316\u53c2\u6570\u67093\u4e2a\uff0c\u5206\u522b\u4e3a\uff1a client: \u6d4b\u8bd5\u6846\u67b6\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef func: \u8def\u7531\u51fd\u6570 pait_dict: Pait \u9488\u5bf9\u8def\u7531\u51fd\u6570\u751f\u6210\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u4e0d\u586b\uff0c TestHelper \u5728\u521d\u59cb\u5316\u65f6\u4f1a\u81ea\u52a8\u8865\u5168\u3002 \u8bf7\u6c42\u53c2\u6570\u6709\u591a\u4e2a\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u80fd\u5bf9\u4e8e\u5927\u591a\u6570\u5f00\u53d1\u8005\u6765\u8bf4\u5e73\u5e73\u65e0\u5947\uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528 Tornado \u4e4b\u7c7b\u7684\u6ca1\u5bf9\u6d4b\u8bd5\u5ba2\u6237\u7aef\u505a\u8fc7\u591a\u5c01\u88c5\u7684\u6846\u67b6\u7684\u5f00\u53d1\u8005\u5219\u80fd\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4fbf\u5229\uff0c\u8fd9\u4e9b\u53c2\u6570\u6709: body_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684Json\u6570\u636e\u3002 cookie_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684cookie\u6570\u636e\u3002 file_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684file\u6570\u636e\u3002 form_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684form\u6570\u636e\u3002 header_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684header\u6570\u636e\u3002 path_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684path\u6570\u636e\u3002 query_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684query\u6570\u636e\u3002 \u9664\u6b64\u4e4b\u5916\uff0c TestHelper \u8fd8\u67093\u4e2a\u4e0eHTTP\u54cd\u5e94\u7ed3\u679c\u7684Body\u6821\u9a8c\u76f8\u5173\u7684\u53c2\u6570\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u54cd\u5e94\u7ed3\u679c\u7684Body\u4f1a\u4e0e\u5f00\u53d1\u8005\u586b\u5199\u7684 response_model \u7684 response_data \u8fdb\u884c\u6821\u9a8c\uff0c \u5982\u679cBody\u7684\u7c7b\u578b\u5c5e\u4e8eJson\uff0c TestHelper \u9664\u4e86\u4f1a\u5bf9\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u8fdb\u884c\u6821\u9a8c\u5916\uff0c\u8fd8\u4f1a\u5bf9\u5b57\u6bb5\u5dee\u5f02\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u51fa\u73b0\u5dee\u5f02\u5219\u4f1a\u62a5\u9519\uff0c\u6bd4\u5982\u4e0b\u9762a\u53d8\u91cf\u662f\u6211\u4eec\u5b9a\u4e49\u7684 response_demo \u6570\u636e\u7ed3\u6784\uff0cb\u53d8\u91cf\u662f\u54cd\u5e94\u4f53\u7684\u6570\u636e\u7ed3\u6784: a = { \"a\" : 1 , \"b\" : { \"c\" : 3 } } b = { \"a\" : 2 , \"b\" : { \"c\" : 3 , \"d\" : 4 } } TestHelper \u68c0\u6d4b\u5230b\u53d8\u91cf\u591a\u51fa\u6765\u4e00\u4e2a\u7ed3\u6784 b['b']['d'] \uff0c\u6240\u4ee5b\u53d8\u91cf\u5e76\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u54cd\u5e94\u4f53\uff0c TestHelper \u76f4\u63a5\u629b\u51fa\u9519\u8bef\uff0c \u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u53c2\u6570 strict_inspection_check_json_content \u7684\u503c\u4e3a False \uff0c\u8fd9\u6837\u53ea\u4f1a\u6821\u9a8c\u51fa\u73b0\u5728 response_model \u7684\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5426\u5408\u6cd5\u4ee5\u53ca\u662f\u5426\u7f3a\u5c11\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u4e0d\u4f1a\u68c0\u67e5\u591a\u51fa\u7684\u5b57\u6bb5\u3002 \u9664\u4e86\u53c2\u6570 strict_inspection_check_json_content \u5916\uff0c TestHelper \u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u53c2\u6570\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u5982\u4e0b: target_pait_response_class: \u8be5\u53c2\u6570\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6307\u5b9a\u7684 response_model \uff0c\u8fd9\u6837 TestHelper \u5c31\u4f1a\u4ece response_model_list \u4e2d\u7b5b\u9009\u51fa\u4e00\u6279\u7b26\u5408\u6761\u4ef6\u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\u3002 find_coro_response_model: \u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3a False \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b TestHelper \u4f1a\u4ece\u7b5b\u9009\u540e\u7684 response_model_list \u4e2d\u81ea\u52a8\u6311\u9009\u4e0e\u54cd\u5e94\u4f53\u6700\u7b26\u5408\u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u90a3\u4e48 TestHelper \u53ea\u4f1a\u4ece\u7b5b\u9009\u540e\u7684 response_model_list \u4e2d\u6311\u51fa\u7b2c\u4e00\u4e2a\u5c5e\u6027 is_core \u4e3a True \u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\u3002","title":"\u53c2\u6570\u4ecb\u7ecd"},{"location":"5_1_introduction/","text":"Pait \u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u8fd9\u4e2a\u88c5\u9970\u5668\u53ea\u505a\u88ab\u88c5\u9970\u51fd\u6570\u7684\u5904\u7406\u548c\u63d2\u4ef6\u7684\u521d\u59cb\u5316\uff0c\u771f\u6b63\u8d1f\u8d23\u529f\u80fd\u5b9e\u73b0\u7684\u90fd\u662f\u8fd9\u4e9b\u88ab\u88c5\u9970\u5668\u521d\u59cb\u5316\u7684\u63d2\u4ef6\uff0c\u5176\u4e2d\u4e0a\u9762\u6240\u8ff0 Pait \u7684\u7c7b\u578b\u8f6c\u6362\u4e0e\u53c2\u6570\u6821\u9a8c\u529f\u80fd\u662f Pait \u7684\u4e00\u4e2a\u6838\u5fc3\u63d2\u4ef6\u3002 \u7b80\u5355\u4ecb\u7ecd \u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 Pait \u4f20\u5165\u9700\u8981\u7684\u63d2\u4ef6\uff0c\u7136\u540e\u7a0b\u5e8f\u5728\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u4ee5\u62e6\u622a\u5668\u7684\u5f62\u5f0f\u628a\u63d2\u4ef6\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u8be5\u63d2\u4ef6\u662f\u524d\u7f6e\u5f62\u63d2\u4ef6\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u653e\u7f6e\u5728\u7c7b\u578b\u8f6c\u6362\u4e0e\u53c2\u6570\u6821\u9a8c\u63d2\u4ef6\u4e4b\u524d\uff0c\u5426\u5219\u5c31\u4f1a\u653e\u5728\u540e\u9762\u3002 \u524d\u7f6e\u63d2\u4ef6\u4e0e\u540e\u7f6e\u63d2\u4ef6\u9664\u4e86\u4ed6\u4eec\u81ea\u8eab\u7684 is_pre_core \u5c5e\u6027\u4e0d\u540c\u5916\uff0c\u5b83\u4eec\u7684\u6700\u4e3b\u8981\u7684\u533a\u522b\u662f\u83b7\u5f97\u5230\u7684\u53c2\u6570\u4e0d\u540c\uff0c\u524d\u7f6e\u63d2\u4ef6\u83b7\u5f97\u7684\u662fWeb\u6846\u67b6\u4f20\u9012\u8fc7\u6765\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u53ef\u4ee5\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u7b80\u5355\u7248\u7684\u4e2d\u95f4\u4ef6\uff0c\u800c\u540e\u7f6e\u5f62\u63d2\u4ef6\u8bfb\u5230\u7684\u662f Pait \u6838\u5fc3\u63d2\u4ef6\u8f6c\u6362\u540e\u7684\u8bf7\u6c42\u6570\u636e\uff0c\u4ee5\u4e0b\u9762\u7684\u51fd\u6570\u4e3a\u4f8b\u5b50\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( uid : str = field . Query . i (), user_name : str = field . Query . i (), ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u5047\u8bbe\u4ee3\u7801\u4e2d\u7684 app \u5df2\u7ecf\u88c5\u8f7d\u4e86\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u548c\u5bf9\u5e94\u7684 Pait \u63d2\u4ef6\uff0c\u5728\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u5b83\u7684\u5904\u7406\u903b\u8f91\u4f1a\u53d8\u4e3a\u5982\u4e0b\u56fe: \u5f53\u8bf7\u6c42\u8fdb\u6765\u540e\u4f1a\u5148\u7531Web\u6846\u67b6\u7684\u4e2d\u95f4\u4ef6\u5904\u7406\uff0c\u7136\u540eWeb\u6846\u67b6\u4f1a\u6267\u884c\u67e5\u627e\u8def\u7531\u7684\u529f\u80fd\uff0c\u5f53\u627e\u4e0d\u5230\u8def\u7531\u65f6\u5c31\u4f1a\u8fd4\u56de Not Found \u7684\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\uff0c\u5982\u679c\u627e\u5230\u4e86\u5bf9\u5e94\u7684\u8def\u7531\uff0c\u5c31\u4f1a\u628a\u8bf7\u6c42\u4f20\u5165\u5230\u5230 Pait \u7684\u5904\u7406\u903b\u8f91\u3002\u5728 Pait \u7684\u5904\u7406\u903b\u8f91\u4e2d\u8bf7\u6c42\u4f1a\u5148\u88ab\u524d\u7f6e\u63d2\u4ef6\u5904\u7406\uff0c \u8fd9\u65f6\u5019\u524d\u7f6e\u63d2\u4ef6\u53ea\u80fd\u5f97\u5230\u6846\u67b6\u5bf9\u5e94\u7684 request \u53c2\u6570(\u5982\u679c\u662f flask \u6846\u67b6\uff0c\u5219\u6ca1\u6709)\uff0c\u5f53\u524d\u7f6e\u63d2\u4ef6\u5904\u7406\u5b8c\u6bd5\u540e\u5c31\u4f1a\u628a\u8bf7\u6c42\u4f20\u5165\u5230\u6838\u5fc3\u63d2\u4ef6\u8fdb\u884c\u53c2\u6570\u63d0\u53d6\u548c\u6821\u9a8c\u8f6c\u6362\uff0c\u7ecf\u6838\u5fc3\u63d2\u4ef6\u5904\u7406\u5b8c\u540e\u4f1a\u628a\u63d0\u53d6\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u7f6e\u63d2\u4ef6\uff0c\u4ea4\u7531\u540e\u7f6e\u63d2\u4ef6\u8fdb\u884c\u5904\u7406\uff0c \u6700\u540e\u624d\u7ecf\u7531\u540e\u7f6e\u63d2\u4ef6\u628a\u53c2\u6570\u4ea4\u7ed9\u771f\u6b63\u7684\u8def\u7531\u51fd\u6570\u5904\u7406\u751f\u6210\u54cd\u5e94\u5e76\u4e00\u4e00\u8fd4\u56de\u3002 \u5982\u4f55\u4f7f\u7528 \u76ee\u524d Pait \u63d0\u4f9b plugin_list \u548c post_plugin_list \u6765\u4f9b\u5f00\u53d1\u8005\u4f20\u5165\u524d\u7f6e\u63d2\u4ef6\u548c\u540e\u7f6e\u63d2\u4ef6\uff0c\u5982\u4e0b\uff1a from pait.plugin.required import RequiredPlugin @pait ( post_plugin_list = [ RequiredPlugin . build ( required_dict = { \"email\" : [ \"username\" ]})]) \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u5230\u7684\u662f\u4e00\u4e2a\u540d\u4e3a RequiredPlugin \u7684\u63d2\u4ef6\uff0c\u8fd9\u4e2a\u63d2\u4ef6\u5c5e\u4e8e\u540e\u7f6e\u5f62\u63d2\u4ef6\uff0c\u6240\u4ee5\u662f\u4ee5 post_plugin_list \u6765\u4f20\u5165\u63d2\u4ef6\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u63d2\u4ef6\u662f\u5728\u6536\u5230\u8bf7\u6c42\u7684\u65f6\u5019\u624d\u4f1a\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4e3a\u4e86\u9632\u6b62\u591a\u4e2a\u8bf7\u6c42\u5171\u4eab\u5230\u76f8\u540c\u7684\u63d2\u4ef6\u53d8\u91cf\uff0c Pait \u4e0d\u652f\u6301\u76f4\u63a5\u521d\u59cb\u5316\u63d2\u4ef6\uff0c\u800c\u662f\u4f7f\u7528 build \u65b9\u6cd5\u6765\u4f7f\u7528\u63d2\u4ef6(\u6240\u4ee5\u4e0d\u4e3a __init__ \u65b9\u6cd5\u63d0\u4f9b\u51c6\u786e\u7684\u51fd\u6570\u7b7e\u540d)\u3002 \u5982\u679c\u8003\u8651\u5230\u63d2\u4ef6\u7684\u590d\u7528\uff0c\u63a8\u8350\u4f7f\u7528 create_factory \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u652f\u6301 PEP-612 \uff0c\u652f\u6301IDE\u63d0\u9192\u548c\u7c7b\u578b\u68c0\u67e5\uff0c create_factory \u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.util import create_factory # \u9996\u5148\u4f20\u5165\u63d2\u4ef6\u7684build\u65b9\u6cd5\uff0c\u5e76\u628abuild\u9700\u8981\u7684\u53c2\u6570\u4f20\u8fdb\u53bb # \u7136\u540e\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u65b9\u6cd5 required_plugin = create_factory ( RequiredPlugin . build )( required_dict = { \"email\" : [ \"username\" ]}) # \u76f4\u63a5\u8c03\u7528create_factory\u7684\u8fd4\u56de\uff0c\u8fd9\u65f6\u5019\u63d2\u4ef6\u4f1a\u6ce8\u5165\u5230\u8def\u7531\u51fd\u6570\u4e2d\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u540c\u65f6\u4e5f\u4e0d\u5f71\u54cd\u5176\u5b83\u8def\u7531\u51fd\u6570\u7684\u4f7f\u7528 @pait ( post_plugin_list = [ required_plugin ()]) def demo_1 (): pass @pait ( post_plugin_list = [ required_plugin ()]) def demo_2 (): pass \u5173\u95ed\u9884\u68c0\u67e5 Pait \u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u7528\u6765\u88c5\u9970\u8def\u7531\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u8fd0\u884c\uff0c\u88c5\u586b\u5404\u79cd\u53c2\u6570\u3002\u4e0d\u8fc7\u5728\u628a\u63d2\u4ef6\u88c5\u586b\u5230\u8def\u7531\u51fd\u6570\u65f6\u4f1a\u8c03\u7528\u5230\u63d2\u4ef6\u7684 pre_check \u65b9\u6cd5\uff0c\u5bf9\u7528\u6237\u4f7f\u7528\u63d2\u4ef6\u662f\u5426\u6b63\u786e\u8fdb\u884c\u6821\u9a8c\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801: @pait () def demo ( uid : str = Body . i ( default = None ) ) \u5728\u542f\u52a8\u7684\u65f6\u5019\u6838\u5fc3\u63d2\u4ef6\u4f1a\u6821\u9a8c\u5230\u7528\u6237\u586b\u5199\u7684 default \u503c\u5e76\u4e0d\u5c5e\u4e8e str \u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u629b\u51fa\u9519\u8bef\u3002\u4e0d\u8fc7\u8fd9\u7c7b\u68c0\u67e5\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u542f\u52a8\u65f6\u95f4\uff0c\u6240\u4ee5\u5efa\u8bae\u5728\u6d4b\u8bd5\u73af\u5883\u4e0b\u624d\u901a\u8fc7 pre_check \u8fdb\u884c\u68c0\u67e5\uff0c\u800c\u5728\u751f\u4ea7\u73af\u5883\u5219\u5173\u95ed\uff0c\u800c\u5173\u95ed\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf PAIT_IGNORE_PRE_CHECK \u4e3aTrue\u5373\u53ef\u5173\u95ed\u68c0\u67e5\u3002","title":"Introduction"},{"location":"5_1_introduction/#_1","text":"\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 Pait \u4f20\u5165\u9700\u8981\u7684\u63d2\u4ef6\uff0c\u7136\u540e\u7a0b\u5e8f\u5728\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u4ee5\u62e6\u622a\u5668\u7684\u5f62\u5f0f\u628a\u63d2\u4ef6\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u8be5\u63d2\u4ef6\u662f\u524d\u7f6e\u5f62\u63d2\u4ef6\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u653e\u7f6e\u5728\u7c7b\u578b\u8f6c\u6362\u4e0e\u53c2\u6570\u6821\u9a8c\u63d2\u4ef6\u4e4b\u524d\uff0c\u5426\u5219\u5c31\u4f1a\u653e\u5728\u540e\u9762\u3002 \u524d\u7f6e\u63d2\u4ef6\u4e0e\u540e\u7f6e\u63d2\u4ef6\u9664\u4e86\u4ed6\u4eec\u81ea\u8eab\u7684 is_pre_core \u5c5e\u6027\u4e0d\u540c\u5916\uff0c\u5b83\u4eec\u7684\u6700\u4e3b\u8981\u7684\u533a\u522b\u662f\u83b7\u5f97\u5230\u7684\u53c2\u6570\u4e0d\u540c\uff0c\u524d\u7f6e\u63d2\u4ef6\u83b7\u5f97\u7684\u662fWeb\u6846\u67b6\u4f20\u9012\u8fc7\u6765\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u53ef\u4ee5\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u7b80\u5355\u7248\u7684\u4e2d\u95f4\u4ef6\uff0c\u800c\u540e\u7f6e\u5f62\u63d2\u4ef6\u8bfb\u5230\u7684\u662f Pait \u6838\u5fc3\u63d2\u4ef6\u8f6c\u6362\u540e\u7684\u8bf7\u6c42\u6570\u636e\uff0c\u4ee5\u4e0b\u9762\u7684\u51fd\u6570\u4e3a\u4f8b\u5b50\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( uid : str = field . Query . i (), user_name : str = field . Query . i (), ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u5047\u8bbe\u4ee3\u7801\u4e2d\u7684 app \u5df2\u7ecf\u88c5\u8f7d\u4e86\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u548c\u5bf9\u5e94\u7684 Pait \u63d2\u4ef6\uff0c\u5728\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u5b83\u7684\u5904\u7406\u903b\u8f91\u4f1a\u53d8\u4e3a\u5982\u4e0b\u56fe: \u5f53\u8bf7\u6c42\u8fdb\u6765\u540e\u4f1a\u5148\u7531Web\u6846\u67b6\u7684\u4e2d\u95f4\u4ef6\u5904\u7406\uff0c\u7136\u540eWeb\u6846\u67b6\u4f1a\u6267\u884c\u67e5\u627e\u8def\u7531\u7684\u529f\u80fd\uff0c\u5f53\u627e\u4e0d\u5230\u8def\u7531\u65f6\u5c31\u4f1a\u8fd4\u56de Not Found \u7684\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\uff0c\u5982\u679c\u627e\u5230\u4e86\u5bf9\u5e94\u7684\u8def\u7531\uff0c\u5c31\u4f1a\u628a\u8bf7\u6c42\u4f20\u5165\u5230\u5230 Pait \u7684\u5904\u7406\u903b\u8f91\u3002\u5728 Pait \u7684\u5904\u7406\u903b\u8f91\u4e2d\u8bf7\u6c42\u4f1a\u5148\u88ab\u524d\u7f6e\u63d2\u4ef6\u5904\u7406\uff0c \u8fd9\u65f6\u5019\u524d\u7f6e\u63d2\u4ef6\u53ea\u80fd\u5f97\u5230\u6846\u67b6\u5bf9\u5e94\u7684 request \u53c2\u6570(\u5982\u679c\u662f flask \u6846\u67b6\uff0c\u5219\u6ca1\u6709)\uff0c\u5f53\u524d\u7f6e\u63d2\u4ef6\u5904\u7406\u5b8c\u6bd5\u540e\u5c31\u4f1a\u628a\u8bf7\u6c42\u4f20\u5165\u5230\u6838\u5fc3\u63d2\u4ef6\u8fdb\u884c\u53c2\u6570\u63d0\u53d6\u548c\u6821\u9a8c\u8f6c\u6362\uff0c\u7ecf\u6838\u5fc3\u63d2\u4ef6\u5904\u7406\u5b8c\u540e\u4f1a\u628a\u63d0\u53d6\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u7f6e\u63d2\u4ef6\uff0c\u4ea4\u7531\u540e\u7f6e\u63d2\u4ef6\u8fdb\u884c\u5904\u7406\uff0c \u6700\u540e\u624d\u7ecf\u7531\u540e\u7f6e\u63d2\u4ef6\u628a\u53c2\u6570\u4ea4\u7ed9\u771f\u6b63\u7684\u8def\u7531\u51fd\u6570\u5904\u7406\u751f\u6210\u54cd\u5e94\u5e76\u4e00\u4e00\u8fd4\u56de\u3002","title":"\u7b80\u5355\u4ecb\u7ecd"},{"location":"5_1_introduction/#_2","text":"\u76ee\u524d Pait \u63d0\u4f9b plugin_list \u548c post_plugin_list \u6765\u4f9b\u5f00\u53d1\u8005\u4f20\u5165\u524d\u7f6e\u63d2\u4ef6\u548c\u540e\u7f6e\u63d2\u4ef6\uff0c\u5982\u4e0b\uff1a from pait.plugin.required import RequiredPlugin @pait ( post_plugin_list = [ RequiredPlugin . build ( required_dict = { \"email\" : [ \"username\" ]})]) \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u5230\u7684\u662f\u4e00\u4e2a\u540d\u4e3a RequiredPlugin \u7684\u63d2\u4ef6\uff0c\u8fd9\u4e2a\u63d2\u4ef6\u5c5e\u4e8e\u540e\u7f6e\u5f62\u63d2\u4ef6\uff0c\u6240\u4ee5\u662f\u4ee5 post_plugin_list \u6765\u4f20\u5165\u63d2\u4ef6\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u63d2\u4ef6\u662f\u5728\u6536\u5230\u8bf7\u6c42\u7684\u65f6\u5019\u624d\u4f1a\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4e3a\u4e86\u9632\u6b62\u591a\u4e2a\u8bf7\u6c42\u5171\u4eab\u5230\u76f8\u540c\u7684\u63d2\u4ef6\u53d8\u91cf\uff0c Pait \u4e0d\u652f\u6301\u76f4\u63a5\u521d\u59cb\u5316\u63d2\u4ef6\uff0c\u800c\u662f\u4f7f\u7528 build \u65b9\u6cd5\u6765\u4f7f\u7528\u63d2\u4ef6(\u6240\u4ee5\u4e0d\u4e3a __init__ \u65b9\u6cd5\u63d0\u4f9b\u51c6\u786e\u7684\u51fd\u6570\u7b7e\u540d)\u3002 \u5982\u679c\u8003\u8651\u5230\u63d2\u4ef6\u7684\u590d\u7528\uff0c\u63a8\u8350\u4f7f\u7528 create_factory \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u652f\u6301 PEP-612 \uff0c\u652f\u6301IDE\u63d0\u9192\u548c\u7c7b\u578b\u68c0\u67e5\uff0c create_factory \u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.util import create_factory # \u9996\u5148\u4f20\u5165\u63d2\u4ef6\u7684build\u65b9\u6cd5\uff0c\u5e76\u628abuild\u9700\u8981\u7684\u53c2\u6570\u4f20\u8fdb\u53bb # \u7136\u540e\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u65b9\u6cd5 required_plugin = create_factory ( RequiredPlugin . build )( required_dict = { \"email\" : [ \"username\" ]}) # \u76f4\u63a5\u8c03\u7528create_factory\u7684\u8fd4\u56de\uff0c\u8fd9\u65f6\u5019\u63d2\u4ef6\u4f1a\u6ce8\u5165\u5230\u8def\u7531\u51fd\u6570\u4e2d\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u540c\u65f6\u4e5f\u4e0d\u5f71\u54cd\u5176\u5b83\u8def\u7531\u51fd\u6570\u7684\u4f7f\u7528 @pait ( post_plugin_list = [ required_plugin ()]) def demo_1 (): pass @pait ( post_plugin_list = [ required_plugin ()]) def demo_2 (): pass","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"5_1_introduction/#_3","text":"Pait \u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u7528\u6765\u88c5\u9970\u8def\u7531\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u8fd0\u884c\uff0c\u88c5\u586b\u5404\u79cd\u53c2\u6570\u3002\u4e0d\u8fc7\u5728\u628a\u63d2\u4ef6\u88c5\u586b\u5230\u8def\u7531\u51fd\u6570\u65f6\u4f1a\u8c03\u7528\u5230\u63d2\u4ef6\u7684 pre_check \u65b9\u6cd5\uff0c\u5bf9\u7528\u6237\u4f7f\u7528\u63d2\u4ef6\u662f\u5426\u6b63\u786e\u8fdb\u884c\u6821\u9a8c\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801: @pait () def demo ( uid : str = Body . i ( default = None ) ) \u5728\u542f\u52a8\u7684\u65f6\u5019\u6838\u5fc3\u63d2\u4ef6\u4f1a\u6821\u9a8c\u5230\u7528\u6237\u586b\u5199\u7684 default \u503c\u5e76\u4e0d\u5c5e\u4e8e str \u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u629b\u51fa\u9519\u8bef\u3002\u4e0d\u8fc7\u8fd9\u7c7b\u68c0\u67e5\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u542f\u52a8\u65f6\u95f4\uff0c\u6240\u4ee5\u5efa\u8bae\u5728\u6d4b\u8bd5\u73af\u5883\u4e0b\u624d\u901a\u8fc7 pre_check \u8fdb\u884c\u68c0\u67e5\uff0c\u800c\u5728\u751f\u4ea7\u73af\u5883\u5219\u5173\u95ed\uff0c\u800c\u5173\u95ed\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf PAIT_IGNORE_PRE_CHECK \u4e3aTrue\u5373\u53ef\u5173\u95ed\u68c0\u67e5\u3002","title":"\u5173\u95ed\u9884\u68c0\u67e5"},{"location":"5_2_param_check_plugin/","text":"Pait \u57fa\u4e8e Pydantic \u5b9e\u73b0\u4e86\u5f88\u591a\u53c2\u6570\u6821\u9a8c\u548c\u8f6c\u6362\u7684\u529f\u80fd\uff0c\u4f46\u662f\u5728\u5f00\u53d1API\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f80\u5f80\u8fd8\u9700\u8981\u4e00\u4e9b\u53c2\u6570\u4f9d\u8d56\u76f8\u5173\u7684\u6821\u9a8c\u529f\u80fd\uff0c \u5728 Pait \u4e2d\u901a\u8fc7\u540e\u7f6e\u63d2\u4ef6 Required \u548c AtMostOneOf \u63d0\u4f9b\u4e24\u79cd\u53c2\u6570\u4f9d\u8d56\u6821\u9a8c\u529f\u80fd\u3002 Required\u63d2\u4ef6 \u5728\u7f16\u5199API\u63a5\u53e3\u65f6\uff0c\u7ecf\u5e38\u4f1a\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u6bd4\u5982\u67d0\u4e2a\u63a5\u53e3\u5b58\u5728\u8bf7\u6c42\u53c2\u6570A\uff0cB\uff0cC\uff0c\u4e00\u822c\u60c5\u51b5\u4e0bB\u548cC\u90fd\u662f\u9009\u586b\uff0c\u4f46\u662f\u53c2\u6570C\u4f9d\u8d56\u4e8e\u53c2\u6570B\uff0c\u4e5f\u5c31\u662f\u53c2\u6570B\u5b58\u5728\u65f6\uff0cC\u624d\u53ef\u4ee5\u5b58\u5728\uff0c \u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 Required \u63d2\u4ef6\u914d\u7f6e\u89c4\u5219\u6765\u6ee1\u8db3\u8fd9\u4e00\u4e2a\u6761\u4ef6\uff0c\u5982\u4e0b\u4ee3\u7801\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin.required import RequiredPlugin from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( post_plugin_list = [ RequiredPlugin . build ( required_dict = { \"email\" : [ \"user_name\" ]}) ] ) async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u51fd\u6570\u672c\u610f\u4e0a\u8981\u6c42\u7684\u662f\u53c2\u6570 uid \u4e3a\u5fc5\u586b\u53c2\u6570\uff0c\u800c\u53c2\u6570 user_name \u548c email \u662f\u9009\u586b\u53c2\u6570\uff0c\u4f46\u662f\u901a\u8fc7\u4f7f\u7528 ReuiredPlugin \u63d2\u4ef6\u540e\u5c31\u4f1a\u65b0\u589e\u4e00\u4e2a\u6821\u9a8c\u903b\u8f91\uff0c \u8fd9\u4e2a\u6821\u9a8c\u903b\u8f91\u662f\u7531\u53c2\u6570 required_dict \u5b9a\u4e49\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u53c2\u6570 email \u5fc5\u987b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u53c2\u6570\u96c6\u5408\u624d\u53ef\u4ee5\u5b58\u5728\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u96c6\u5408\u53ea\u6709\u4e00\u4e2a\u53c2\u6570-- user_name \u4f7f\u7528 curl \u53d1\u9001\u8bf7\u6c42\u540e\u53ef\u4ee5\u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53d1\u73b0\uff0c\u5982\u679c\u8bf7\u6c42\u7684\u53c2\u6570\u53ea\u6709 uid \u65f6\u80fd\u6b63\u5e38\u8fd4\u56de\uff0c\u4f46\u8bf7\u6c42\u7684\u53c2\u6570 user_name \u4e3a\u7a7a\u65f6\uff0c\u53c2\u6570 email \u5fc5\u987b\u4e3a\u7a7a\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519\u3002 \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 { \"uid\" : \"123\" , \"user_name\" :null, \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa { \"data\" : \"email requires param user_name, which if not none\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa \\& user_name \\= so1n { \"uid\" : \"123\" , \"user_name\" : \"so1n\" , \"email\" : \"aaa\" } % AtMostOneOf\u63d2\u4ef6 \u9664\u4e86\u53c2\u6570\u7684\u4e92\u76f8\u4f9d\u8d56\u5916\uff0c\u8fd8\u5b58\u5728\u53c2\u6570\u4e92\u76f8\u6392\u65a5\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u67d0\u4e2a\u63a5\u53e3\u6709\u53c2\u6570A\uff0cB\uff0cC\u4e09\u4e2a\uff0c\u5f53B\u5b58\u5728\u65f6\uff0cC\u5c31\u4e0d\u80fd\u5b58\u5728\uff0cC\u5b58\u5728\u65f6\uff0cB\u5c31\u4e0d\u80fd\u5b58\u5728\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 AtMostOneOf \u63d2\u4ef6\u914d\u7f6e\u89c4\u5219\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin.at_most_one_of import AtMostOneOfPlugin from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( post_plugin_list = [ AtMostOneOfPlugin . build ( at_most_one_of_list = [[ \"email\" , \"user_name\" ]]) ] ) async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u51fd\u6570\u672c\u610f\u4e0a\u8981\u6c42\u7684\u662f\u53c2\u6570 uid \u4e3a\u5fc5\u586b\u53c2\u6570\uff0c\u800c\u53c2\u6570 user_name \u548c email \u662f\u9009\u586b\u53c2\u6570\uff0c\u4f46\u662f\u901a\u8fc7 AtMostOneOfPlugin \u63d2\u4ef6\u540e\u5c31\u4f1a\u65b0\u589e\u4e00\u4e2a\u6821\u9a8c\u903b\u8f91\uff0c \u8fd9\u4e2a\u6821\u9a8c\u903b\u8f91\u662f\u7531\u53c2\u6570 at_most_one_of_list \u5b9a\u4e49\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u67d0\u4e00\u7ec4\u53c2\u6570\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u662f\u53c2\u6570 email \u548c user_name \u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u3002 \u4f7f\u7528 curl \u53d1\u9001\u8bf7\u6c42\u540e\u53ef\u4ee5\u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53d1\u73b0\uff0c\u53c2\u6570 email \u548c user_name \u5171\u5b58\u65f6\u5019\u4f1a\u8fd4\u56de\u9519\u8bef\uff0c\u5176\u5b83\u60c5\u51b5\u90fd\u80fd\u6b63\u5e38\u8fd4\u56de\u54cd\u5e94\u3002 \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 { \"uid\" : \"123\" , \"user_name\" :null, \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa { \"uid\" : \"123\" , \"user_name\" :null, \"email\" : \"aaa\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n { \"uid\" : \"123\" , \"user_name\" : \"so1n\" , \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa \\& user_name \\= so1n { \"data\" : \"requires at most one of param email or user_name\" } %","title":"Param check plugin"},{"location":"5_2_param_check_plugin/#required","text":"\u5728\u7f16\u5199API\u63a5\u53e3\u65f6\uff0c\u7ecf\u5e38\u4f1a\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u6bd4\u5982\u67d0\u4e2a\u63a5\u53e3\u5b58\u5728\u8bf7\u6c42\u53c2\u6570A\uff0cB\uff0cC\uff0c\u4e00\u822c\u60c5\u51b5\u4e0bB\u548cC\u90fd\u662f\u9009\u586b\uff0c\u4f46\u662f\u53c2\u6570C\u4f9d\u8d56\u4e8e\u53c2\u6570B\uff0c\u4e5f\u5c31\u662f\u53c2\u6570B\u5b58\u5728\u65f6\uff0cC\u624d\u53ef\u4ee5\u5b58\u5728\uff0c \u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 Required \u63d2\u4ef6\u914d\u7f6e\u89c4\u5219\u6765\u6ee1\u8db3\u8fd9\u4e00\u4e2a\u6761\u4ef6\uff0c\u5982\u4e0b\u4ee3\u7801\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin.required import RequiredPlugin from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( post_plugin_list = [ RequiredPlugin . build ( required_dict = { \"email\" : [ \"user_name\" ]}) ] ) async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u51fd\u6570\u672c\u610f\u4e0a\u8981\u6c42\u7684\u662f\u53c2\u6570 uid \u4e3a\u5fc5\u586b\u53c2\u6570\uff0c\u800c\u53c2\u6570 user_name \u548c email \u662f\u9009\u586b\u53c2\u6570\uff0c\u4f46\u662f\u901a\u8fc7\u4f7f\u7528 ReuiredPlugin \u63d2\u4ef6\u540e\u5c31\u4f1a\u65b0\u589e\u4e00\u4e2a\u6821\u9a8c\u903b\u8f91\uff0c \u8fd9\u4e2a\u6821\u9a8c\u903b\u8f91\u662f\u7531\u53c2\u6570 required_dict \u5b9a\u4e49\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u53c2\u6570 email \u5fc5\u987b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u53c2\u6570\u96c6\u5408\u624d\u53ef\u4ee5\u5b58\u5728\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u96c6\u5408\u53ea\u6709\u4e00\u4e2a\u53c2\u6570-- user_name \u4f7f\u7528 curl \u53d1\u9001\u8bf7\u6c42\u540e\u53ef\u4ee5\u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53d1\u73b0\uff0c\u5982\u679c\u8bf7\u6c42\u7684\u53c2\u6570\u53ea\u6709 uid \u65f6\u80fd\u6b63\u5e38\u8fd4\u56de\uff0c\u4f46\u8bf7\u6c42\u7684\u53c2\u6570 user_name \u4e3a\u7a7a\u65f6\uff0c\u53c2\u6570 email \u5fc5\u987b\u4e3a\u7a7a\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519\u3002 \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 { \"uid\" : \"123\" , \"user_name\" :null, \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa { \"data\" : \"email requires param user_name, which if not none\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa \\& user_name \\= so1n { \"uid\" : \"123\" , \"user_name\" : \"so1n\" , \"email\" : \"aaa\" } %","title":"Required\u63d2\u4ef6"},{"location":"5_2_param_check_plugin/#atmostoneof","text":"\u9664\u4e86\u53c2\u6570\u7684\u4e92\u76f8\u4f9d\u8d56\u5916\uff0c\u8fd8\u5b58\u5728\u53c2\u6570\u4e92\u76f8\u6392\u65a5\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u67d0\u4e2a\u63a5\u53e3\u6709\u53c2\u6570A\uff0cB\uff0cC\u4e09\u4e2a\uff0c\u5f53B\u5b58\u5728\u65f6\uff0cC\u5c31\u4e0d\u80fd\u5b58\u5728\uff0cC\u5b58\u5728\u65f6\uff0cB\u5c31\u4e0d\u80fd\u5b58\u5728\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 AtMostOneOf \u63d2\u4ef6\u914d\u7f6e\u89c4\u5219\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin.at_most_one_of import AtMostOneOfPlugin from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( post_plugin_list = [ AtMostOneOfPlugin . build ( at_most_one_of_list = [[ \"email\" , \"user_name\" ]]) ] ) async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u51fd\u6570\u672c\u610f\u4e0a\u8981\u6c42\u7684\u662f\u53c2\u6570 uid \u4e3a\u5fc5\u586b\u53c2\u6570\uff0c\u800c\u53c2\u6570 user_name \u548c email \u662f\u9009\u586b\u53c2\u6570\uff0c\u4f46\u662f\u901a\u8fc7 AtMostOneOfPlugin \u63d2\u4ef6\u540e\u5c31\u4f1a\u65b0\u589e\u4e00\u4e2a\u6821\u9a8c\u903b\u8f91\uff0c \u8fd9\u4e2a\u6821\u9a8c\u903b\u8f91\u662f\u7531\u53c2\u6570 at_most_one_of_list \u5b9a\u4e49\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u67d0\u4e00\u7ec4\u53c2\u6570\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u662f\u53c2\u6570 email \u548c user_name \u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u3002 \u4f7f\u7528 curl \u53d1\u9001\u8bf7\u6c42\u540e\u53ef\u4ee5\u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53d1\u73b0\uff0c\u53c2\u6570 email \u548c user_name \u5171\u5b58\u65f6\u5019\u4f1a\u8fd4\u56de\u9519\u8bef\uff0c\u5176\u5b83\u60c5\u51b5\u90fd\u80fd\u6b63\u5e38\u8fd4\u56de\u54cd\u5e94\u3002 \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 { \"uid\" : \"123\" , \"user_name\" :null, \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa { \"uid\" : \"123\" , \"user_name\" :null, \"email\" : \"aaa\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n { \"uid\" : \"123\" , \"user_name\" : \"so1n\" , \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa \\& user_name \\= so1n { \"data\" : \"requires at most one of param email or user_name\" } %","title":"AtMostOneOf\u63d2\u4ef6"},{"location":"5_3_json_response_plugin/","text":"\u76ee\u524dAPI\u63a5\u53e3\u7528\u7684\u6700\u591a\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u5c31\u662fJson\uff0c\u6240\u4ee5\u57fa\u4e8eJson\u54cd\u5e94\u6709\u5f88\u591a\u7279\u522b\u7684\u9700\u6c42\uff0c\u76ee\u524d\uff0c Pait \u81ea\u5e26\u4e86\u51e0\u4e2a\u4e0eJson\u54cd\u5e94\u76f8\u5173\u7684\u63d2\u4ef6\uff0c\u4ed6\u4eec\u90fd\u7528\u5230\u4e86 Pait \u88c5\u9970\u5668\u586b\u5199\u7684 response_model_list \u3002 Note 1.\u7531\u4e8e\u8981\u83b7\u53d6\u5230\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u63d2\u4ef6\u90fd\u4f1a\u4fb5\u5165\u5230\u539f\u6709\u6846\u67b6\uff0c\u5bfc\u81f4\u4f7f\u7528\u65b9\u6cd5\u4e0e\u539f\u6709\u6846\u67b6\u6709\u4e9b\u4e0d\u540c\u3002 2.\u8fd9\u51e0\u4e2a\u63d2\u4ef6\u90fd\u8981\u5355\u72ec\u6839\u636e\u4e0d\u540c\u7684Web\u6846\u67b6\u8fdb\u884c\u517c\u5bb9\uff0c\u6240\u4ee5\u8bf7\u4ee5 from pait.app.{web framework name}.plugin.{plugin name} import xxx \u7684\u5f62\u5f0f\u6765\u5f15\u5165\u5bf9\u5e94\u7684\u63d2\u4ef6\u3002 \u6821\u9a8cJson\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6 \u6821\u9a8cJson\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5728\u6536\u5230\u8fd4\u56de\u54cd\u5e94\u7ed3\u679c\u65f6\uff0c\u5bf9\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u6821\u9a8c\u6210\u529f\uff0c\u624d\u4f1a\u8fd4\u56de\u54cd\u5e94\uff0c\u5426\u5219\u5c31\u4f1a\u62a5\u9519\u3002 \u4ee5 example.param_verify.starlette_example.async_check_json_plugin_route \u4e3a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 from typing import Optional from typing_extensions import TypedDict # \u5bf9\u4e8ePython3.8\u4ee5\u4e0b\u7684\u53ea\u80fd\u901a\u8fc7typing_extensions\u5f15\u5165 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.app.starlette.plugin.check_json_resp import CheckJsonRespPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d2\u4ef6\u6821\u9a8c\u4e0d\u901a\u8fc7\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\uff0c\u8be5\u51fd\u6570\u4f1a\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c\u5e76\u4ee5\u8fd4\u56de\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) _sub_typed_dict = TypedDict ( \"_sub_typed_dict\" , { \"uid\" : int , \"user_name\" : str , \"email\" : str , }, ) _typed_dict = TypedDict ( \"_typed_dict\" , { \"code\" : int , \"msg\" : str , \"data\" : _sub_typed_dict , }, ) @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ CheckJsonRespPlugin . build ()]) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> _typed_dict : \"\"\"Test json plugin by resp type is typed dict\"\"\" return_dict : dict = { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } if display_age == 1 : return_dict [ \"data\" ][ \"age\" ] = age return return_dict # type: ignore app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5728\u8fd9\u4e2a\u4ee3\u7801\u4e2d\uff0c\u9996\u5148\u662f\u572823-38\u884c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a _typed_dict \u7c7b\u578b\uff0c\u4ed6\u7684\u7ed3\u6784\u4e0e UserSuccessRespModel3.response_data \u4e00\u6837\uff0c \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4f1a\u5728 demo \u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u5b9a\u4e49 demo \u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e3a _typed_dict \u3002 \u5982\u679c\u89c9\u5f97\u91cd\u590d\u5b9a\u4e49\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u53ef\u4ee5\u76f4\u63a5\u586b\u5199\u4e3a dict \uff0c \u4f46\u662f\u8fd9\u6837\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u5c31\u6ca1\u529e\u6cd5\u68c0\u67e5\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u662f\u5426\u6b63\u786e\u4e86\u3002 \u7136\u540e\u572841\u884c\u4e2d\u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a CheckJsonRespPlugin \u7684\u63d2\u4ef6\uff0c\u8be5\u63d2\u4ef6\u4f1a\u5728\u542f\u52a8\u7684\u65f6\u5019\u68c0\u67e5\u8def\u7531\u51fd\u6570\u5b9a\u4e49\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e UserSuccessRespModel3.response_data \u662f\u5426\u4e00\u81f4\uff0c\u4e0d\u4e00\u81f4\u5219\u4f1a\u62a5\u9519\u3002 \u7136\u540e\u5b83\u5728\u8fd0\u884c\u65f6\u6821\u9a8c\u8def\u7531\u51fd\u6570\u54cd\u5e94\u7684\u5b57\u5178\u7ed3\u6784\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5426\u4e0e UserSuccessRespModel3.response_data \u4e00\u81f4\uff0c\u5982\u679c\u6821\u9a8c\u5931\u8d25\u5219\u8fd4\u56de\u9519\u8bef\uff0c\u6821\u9a8c\u6210\u529f\u5219\u8c03\u7528Web\u6846\u67b6\u5bf9\u5e94\u7684Json\u54cd\u5e94\u5bf9\u8c61\u628a\u6570\u636e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u5177\u4f53\u793a\u4f8b\u5982\u4e0b\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"data\" : \"1 validation error for ResponseModel\\ndata -> age\\n field required (type=value_error.missing)\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"email\" : \"example@xxx.com\" , \"age\" :18 }} % \u901a\u8fc7\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u54cd\u5e94\u7ed3\u679c\u4e0e\u5b9a\u4e49\u7684\u54cd\u5e94Model\u4e0d\u5339\u914d\u65f6\uff0c\u4f1a\u76f4\u63a5\u629b\u51fa\u9519\u8bef\uff0c\u5339\u914d\u5219\u6b63\u5e38\u54cd\u5e94\u3002 \u81ea\u52a8\u8865\u5168Json\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6 \u5728\u7f16\u5199API\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u63a5\u53e3\u8fd4\u56de\u7684\u54cd\u5e94\u7ed3\u679c\u5e94\u8be5\u4f1a\u4e0e\u6587\u6863\u63cf\u8ff0\u7684\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u7b5b\u9009\u6761\u4ef6\u7684\u4e0d\u540c\u7ecf\u5e38\u5bfc\u81f4\u8fd4\u56de\u7684\u54cd\u5e94\u7ed3\u679c\u662f\u5b9a\u4e49\u54cd\u5e94\u6a21\u578b\u7684\u5b50\u96c6\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u505a\u7279\u6b8a\u5904\u7406\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u81ea\u52a8\u8865\u5168Json\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6\uff0c\u81ea\u52a8\u4e3a\u90a3\u4e9b\u7f3a\u5c11\u7684\u5b57\u6bb5\u8865\u4e0a\u9ed8\u8ba4\u503c\u3002 \u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u53bb\u6389\u53d8\u91cf _typed_dict \uff0c\u518d\u628a\u63d2\u4ef6 CheckJsonRespPlugin \u66ff\u6362\u4e3a AutoCompleteJsonRespPlugin \uff0c\u4ee3\u7801\u5982\u4e0b: from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.app.starlette.plugin.auto_complete_json_resp import AutoCompleteJsonRespPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ AutoCompleteJsonRespPlugin . build ()] ) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> dict : \"\"\"Test json plugin by resp type is typed dict\"\"\" return_dict : dict = { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } if display_age == 1 : return_dict [ \"data\" ][ \"age\" ] = age return return_dict # type: ignore app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u63a5\u7740\u518d\u8fd0\u884c\u4e0e\u4e0a\u9762\u4f8b\u5b50\u76f8\u540c\u7684\u8bf7\u6c42: \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"example@xxx.com\" }} % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :0, \"email\" : \"example@xxx.com\" }} % \u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u54cd\u5e94\u7ed3\u679c\u7684 age \u503c\u4e3a\u8c03\u7528\u547d\u4ee4\u65f6\u586b\u5199\u768418\uff0c\u800c\u7b2c\u4e8c\u4e2a\u54cd\u5e94\u7ed3\u679c\u4e2d\u672c\u6765\u662f\u6ca1\u6709 age \u5b57\u6bb5\u7684\uff0c\u8be5\u5b57\u6bb5\u503c\u662f\u7531\u63d2\u4ef6 AutoCompleteJsonRespPlugin \u6839\u636e age \u7684\u7c7b\u578b\u81ea\u52a8\u586b\u4e0a\u9ed8\u8ba4\u503c0\u3002 AutoCompleteJsonRespPlugin \u81ea\u52a8\u8865\u5168\u7684\u539f\u7406\u662f\u4ece response_model_list \u4e2d\u9009\u51fa\u5f00\u53d1\u8005\u586b\u5199\u7684\u7b2c\u4e00\u4e2a ResponseModel \uff0c\u6bd4\u5982\u4ee3\u7801\u4e2d\u7684\u4f8b\u5b50\u5c31\u662f UserSuccessRespModel3 \uff0c \u7136\u540e\u901a\u8fc7\u8c03\u7528 UserSuccessRespModel3 \u7684 get_default_dict \u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u9ed8\u8ba4\u503c\uff0c\u518d\u4e0e\u8def\u7531\u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u53d1\u73b0\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u7f3a\u5c11\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u5c31\u4f1a\u81ea\u52a8\u8865\u4e0a\u3002 \u5982\u679c\u5f00\u53d1\u8005\u89c9\u5f97\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4\u503c\u4e0d\u559c\u6b22\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u5b57\u6bb5\u5bf9\u5e94\u7684 Field \u6765\u6307\u5b9a\u81ea\u5df1\u60f3\u8981\u7684\u9ed8\u8ba4\u503c\uff0c\u6bd4\u5982\u5bf9 UserSuccessRespModel3 \u8fdb\u884c\u66f4\u6539: class UserSuccessRespModel3 ( PaitJsonResponseModel ): is_core : bool = True class ResponseModel ( ResponseModel ): # type: ignore class DataModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 ) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) age : int = Field ( default = 10 , description = \"age\" , gt = 1 , lt = 100 ) email : str = Field ( description = \"user email\" ) data : DataModel description : str = \"success response\" response_data : Type [ BaseModel ] = ResponseModel \u901a\u8fc7 Field \u5b9a\u4e49 age \u7684\u9ed8\u8ba4\u503c\u4e3a10,\u518d\u8fd0\u884c\u4e00\u6837\u7684\u8bf7\u6c42\u540e\u53ef\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7684 age \u9ed8\u8ba4\u503c\u53d8\u4e3a10\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"example@xxx.com\" }} % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :10, \"email\" : \"example@xxx.com\" }} %","title":"Json Response plugin"},{"location":"5_3_json_response_plugin/#json","text":"\u6821\u9a8cJson\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5728\u6536\u5230\u8fd4\u56de\u54cd\u5e94\u7ed3\u679c\u65f6\uff0c\u5bf9\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u6821\u9a8c\u6210\u529f\uff0c\u624d\u4f1a\u8fd4\u56de\u54cd\u5e94\uff0c\u5426\u5219\u5c31\u4f1a\u62a5\u9519\u3002 \u4ee5 example.param_verify.starlette_example.async_check_json_plugin_route \u4e3a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 from typing import Optional from typing_extensions import TypedDict # \u5bf9\u4e8ePython3.8\u4ee5\u4e0b\u7684\u53ea\u80fd\u901a\u8fc7typing_extensions\u5f15\u5165 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.app.starlette.plugin.check_json_resp import CheckJsonRespPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d2\u4ef6\u6821\u9a8c\u4e0d\u901a\u8fc7\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\uff0c\u8be5\u51fd\u6570\u4f1a\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c\u5e76\u4ee5\u8fd4\u56de\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) _sub_typed_dict = TypedDict ( \"_sub_typed_dict\" , { \"uid\" : int , \"user_name\" : str , \"email\" : str , }, ) _typed_dict = TypedDict ( \"_typed_dict\" , { \"code\" : int , \"msg\" : str , \"data\" : _sub_typed_dict , }, ) @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ CheckJsonRespPlugin . build ()]) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> _typed_dict : \"\"\"Test json plugin by resp type is typed dict\"\"\" return_dict : dict = { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } if display_age == 1 : return_dict [ \"data\" ][ \"age\" ] = age return return_dict # type: ignore app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5728\u8fd9\u4e2a\u4ee3\u7801\u4e2d\uff0c\u9996\u5148\u662f\u572823-38\u884c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a _typed_dict \u7c7b\u578b\uff0c\u4ed6\u7684\u7ed3\u6784\u4e0e UserSuccessRespModel3.response_data \u4e00\u6837\uff0c \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4f1a\u5728 demo \u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u5b9a\u4e49 demo \u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e3a _typed_dict \u3002 \u5982\u679c\u89c9\u5f97\u91cd\u590d\u5b9a\u4e49\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u53ef\u4ee5\u76f4\u63a5\u586b\u5199\u4e3a dict \uff0c \u4f46\u662f\u8fd9\u6837\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u5c31\u6ca1\u529e\u6cd5\u68c0\u67e5\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u662f\u5426\u6b63\u786e\u4e86\u3002 \u7136\u540e\u572841\u884c\u4e2d\u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a CheckJsonRespPlugin \u7684\u63d2\u4ef6\uff0c\u8be5\u63d2\u4ef6\u4f1a\u5728\u542f\u52a8\u7684\u65f6\u5019\u68c0\u67e5\u8def\u7531\u51fd\u6570\u5b9a\u4e49\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e UserSuccessRespModel3.response_data \u662f\u5426\u4e00\u81f4\uff0c\u4e0d\u4e00\u81f4\u5219\u4f1a\u62a5\u9519\u3002 \u7136\u540e\u5b83\u5728\u8fd0\u884c\u65f6\u6821\u9a8c\u8def\u7531\u51fd\u6570\u54cd\u5e94\u7684\u5b57\u5178\u7ed3\u6784\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5426\u4e0e UserSuccessRespModel3.response_data \u4e00\u81f4\uff0c\u5982\u679c\u6821\u9a8c\u5931\u8d25\u5219\u8fd4\u56de\u9519\u8bef\uff0c\u6821\u9a8c\u6210\u529f\u5219\u8c03\u7528Web\u6846\u67b6\u5bf9\u5e94\u7684Json\u54cd\u5e94\u5bf9\u8c61\u628a\u6570\u636e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u5177\u4f53\u793a\u4f8b\u5982\u4e0b\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"data\" : \"1 validation error for ResponseModel\\ndata -> age\\n field required (type=value_error.missing)\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"email\" : \"example@xxx.com\" , \"age\" :18 }} % \u901a\u8fc7\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u54cd\u5e94\u7ed3\u679c\u4e0e\u5b9a\u4e49\u7684\u54cd\u5e94Model\u4e0d\u5339\u914d\u65f6\uff0c\u4f1a\u76f4\u63a5\u629b\u51fa\u9519\u8bef\uff0c\u5339\u914d\u5219\u6b63\u5e38\u54cd\u5e94\u3002","title":"\u6821\u9a8cJson\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6"},{"location":"5_3_json_response_plugin/#json_1","text":"\u5728\u7f16\u5199API\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u63a5\u53e3\u8fd4\u56de\u7684\u54cd\u5e94\u7ed3\u679c\u5e94\u8be5\u4f1a\u4e0e\u6587\u6863\u63cf\u8ff0\u7684\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u7b5b\u9009\u6761\u4ef6\u7684\u4e0d\u540c\u7ecf\u5e38\u5bfc\u81f4\u8fd4\u56de\u7684\u54cd\u5e94\u7ed3\u679c\u662f\u5b9a\u4e49\u54cd\u5e94\u6a21\u578b\u7684\u5b50\u96c6\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u505a\u7279\u6b8a\u5904\u7406\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u81ea\u52a8\u8865\u5168Json\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6\uff0c\u81ea\u52a8\u4e3a\u90a3\u4e9b\u7f3a\u5c11\u7684\u5b57\u6bb5\u8865\u4e0a\u9ed8\u8ba4\u503c\u3002 \u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u53bb\u6389\u53d8\u91cf _typed_dict \uff0c\u518d\u628a\u63d2\u4ef6 CheckJsonRespPlugin \u66ff\u6362\u4e3a AutoCompleteJsonRespPlugin \uff0c\u4ee3\u7801\u5982\u4e0b: from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.app.starlette.plugin.auto_complete_json_resp import AutoCompleteJsonRespPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ AutoCompleteJsonRespPlugin . build ()] ) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> dict : \"\"\"Test json plugin by resp type is typed dict\"\"\" return_dict : dict = { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } if display_age == 1 : return_dict [ \"data\" ][ \"age\" ] = age return return_dict # type: ignore app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u63a5\u7740\u518d\u8fd0\u884c\u4e0e\u4e0a\u9762\u4f8b\u5b50\u76f8\u540c\u7684\u8bf7\u6c42: \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"example@xxx.com\" }} % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :0, \"email\" : \"example@xxx.com\" }} % \u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u54cd\u5e94\u7ed3\u679c\u7684 age \u503c\u4e3a\u8c03\u7528\u547d\u4ee4\u65f6\u586b\u5199\u768418\uff0c\u800c\u7b2c\u4e8c\u4e2a\u54cd\u5e94\u7ed3\u679c\u4e2d\u672c\u6765\u662f\u6ca1\u6709 age \u5b57\u6bb5\u7684\uff0c\u8be5\u5b57\u6bb5\u503c\u662f\u7531\u63d2\u4ef6 AutoCompleteJsonRespPlugin \u6839\u636e age \u7684\u7c7b\u578b\u81ea\u52a8\u586b\u4e0a\u9ed8\u8ba4\u503c0\u3002 AutoCompleteJsonRespPlugin \u81ea\u52a8\u8865\u5168\u7684\u539f\u7406\u662f\u4ece response_model_list \u4e2d\u9009\u51fa\u5f00\u53d1\u8005\u586b\u5199\u7684\u7b2c\u4e00\u4e2a ResponseModel \uff0c\u6bd4\u5982\u4ee3\u7801\u4e2d\u7684\u4f8b\u5b50\u5c31\u662f UserSuccessRespModel3 \uff0c \u7136\u540e\u901a\u8fc7\u8c03\u7528 UserSuccessRespModel3 \u7684 get_default_dict \u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u9ed8\u8ba4\u503c\uff0c\u518d\u4e0e\u8def\u7531\u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u53d1\u73b0\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u7f3a\u5c11\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u5c31\u4f1a\u81ea\u52a8\u8865\u4e0a\u3002 \u5982\u679c\u5f00\u53d1\u8005\u89c9\u5f97\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4\u503c\u4e0d\u559c\u6b22\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u5b57\u6bb5\u5bf9\u5e94\u7684 Field \u6765\u6307\u5b9a\u81ea\u5df1\u60f3\u8981\u7684\u9ed8\u8ba4\u503c\uff0c\u6bd4\u5982\u5bf9 UserSuccessRespModel3 \u8fdb\u884c\u66f4\u6539: class UserSuccessRespModel3 ( PaitJsonResponseModel ): is_core : bool = True class ResponseModel ( ResponseModel ): # type: ignore class DataModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 ) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) age : int = Field ( default = 10 , description = \"age\" , gt = 1 , lt = 100 ) email : str = Field ( description = \"user email\" ) data : DataModel description : str = \"success response\" response_data : Type [ BaseModel ] = ResponseModel \u901a\u8fc7 Field \u5b9a\u4e49 age \u7684\u9ed8\u8ba4\u503c\u4e3a10,\u518d\u8fd0\u884c\u4e00\u6837\u7684\u8bf7\u6c42\u540e\u53ef\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7684 age \u9ed8\u8ba4\u503c\u53d8\u4e3a10\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"example@xxx.com\" }} % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :10, \"email\" : \"example@xxx.com\" }} %","title":"\u81ea\u52a8\u8865\u5168Json\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6"},{"location":"5_4_mock_json_response_check_plugin/","text":"\u5728\u5bf9\u63a5\u4e86\u9700\u6c42\u540e\uff0c\u6211\u4eec\u9700\u8981\u5148\u51fa\u4e00\u4efd\u63a5\u53e3\u6587\u6863\u7ed9\u5ba2\u6237\u7aef\u540e\u518d\u7f16\u5199\u63a5\u53e3\u5bf9\u5e94\u7684\u903b\u8f91\u4ee3\u7801\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 Pait \u6765\u88c5\u9970\u4e00\u4e2a\u6ca1\u6709\u903b\u8f91\u529f\u80fd\u7684\u8def\u7531\u51fd\u6570\uff0c \u5e76\u901a\u8fc7 Pait \u81ea\u52a8\u751f\u6210\u4e00\u4efdAPI\u6587\u6863\u7ed9\u5ba2\u6237\u7aef\u4f7f\u7528\uff0c\u7136\u540e\u53cc\u65b9\u518d\u4e00\u8d77\u5f00\u53d1\u529f\u80fd\u3002 \u4f46\u662f\u5728\u6ca1\u8fbe\u5230\u8054\u8c03\u4e4b\u524d\u5ba2\u6237\u7aef\u5f00\u53d1\u8005\u4e5f\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u6d4b\u8bd5\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u5ba2\u6237\u7aef\u9700\u8981\u5148\u6839\u636e\u54cd\u5e94Model\u6765\u7f16\u5199\u5bf9\u5e94\u7684Mock\u6570\u636e\uff0c \u8fd9\u6837\u4f1a\u589e\u52a0\u524d\u7aef\u7684\u5de5\u4f5c\u91cf\uff0c\u540c\u65f6\u524d\u7aefMock\u7684\u6570\u636e\u5e76\u4e0d\u4e00\u5b9a\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 MockPlugin \u63d2\u4ef6\u6765\u8ba9\u63a5\u53e3\u63d0\u4f9bMock\u6570\u636e\u3002 MockPlugin \u63d2\u4ef6\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u4ee3\u7801\u5982\u4e0b: from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.app.starlette.plugin.mock_response import MockPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ MockPlugin . build ()] ) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> dict : pass app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u8fd9\u4efd\u4ee3\u7801\u4e2d\uff0c\u5f00\u53d1\u8005\u5b9e\u73b0\u4e86\u4e00\u4e2a\u8def\u7531\u51fd\u6570\u7b7e\u540d\uff0c\u8be5\u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u903b\u8f91\uff0c\u7136\u540e\u901a\u8fc7 pait \u88c5\u9970\u5668\u586b\u5199 MockPlugin \u548cResponseModel\uff0c \u5982\u679c\u6709\u591a\u4e2aResponseModel\u7684\u8bdd MockPlugin \u4f1a\u9ed8\u8ba4\u4f7f\u7528\u7b2c\u4e00\u4e2aResponseModel\uff0c\u8fd0\u884c\u8fd9\u4efd\u4ee3\u7801\u540e\u6267\u884c\u5bf9\u5e94\u7684\u8bf7\u6c42\u547d\u4ee4\u53ef\u4ee5\u5f97\u5230\u9ed8\u8ba4\u7684Mock\u54cd\u5e94\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"success\" , \"data\" : { \"uid\" :0, \"user_name\" : \"\" , \"age\" :0, \"email\" : \"\" }} % \u8fd9\u4efd\u9ed8\u8ba4\u7684\u54cd\u5e94\u6570\u636e\u662f MockPlugin \u901a\u8fc7\u8c03\u7528 UserSuccessRespModel3.get_example_value \u751f\u6210\u7684\uff0c\u5982\u679c\u5bf9\u4e8e\u751f\u6210\u7684\u9ed8\u8ba4\u503c\u4e0d\u6ee1\u610f\uff0c \u53ef\u4ee5\u901a\u8fc7 Field \u7684 example \u6765\u5b9a\u4e49\u4e0d\u540c\u7684\u54cd\u5e94\u503c\uff0c\u6bd4\u5982\u628a UserSuccessRespModel3 \u6539\u6210\u4e0b\u9762\u7684\u6837\u5b50\uff1a import random # \u5f15\u5165faker\u5e93 from faker import Faker fake = Faker () class UserSuccessRespModel3 ( PaitJsonResponseModel ): is_core : bool = True class ResponseModel ( ResponseModel ): # type: ignore class DataModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 , example = lambda : random . randint ( 100000 , 900000 )) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 , example = \"so1n\" ) age : int = Field ( description = \"age\" , gt = 1 , lt = 100 , example = 18 ) email : str = Field ( description = \"user email\" , example = fake . email ) data : DataModel description : str = \"success response\" response_data : Type [ BaseModel ] = ResponseModel \u8fd9\u6837\u4e00\u6765\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u5957\u751f\u6210\u793a\u4f8b\u503c\u7684\u89c4\u5219\uff0c\u6bd4\u5982\u5b57\u6bb5uid\u5c31\u662f\u968f\u673a\u4ece100000-900000\u4e2d\u6311\u9009\u4e00\u4e2a\u503c\uff0c\u5b57\u6bb5eamil\u5c31\u662f\u901a\u8fc7fake.email\u751f\u6210\u7684\uff0c\u800c\u5b57\u6bb5user_name\u548cage\u5219\u6709\u6307\u5b9a\u7684\u56fa\u5b9a\u503c\uff0c \u901a\u8fc7\u8fd0\u884c\u4ee3\u7801\u540e\u6267\u884c\u8bf7\u6c42\u547d\u4ee4\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7684\u793a\u4f8b\u503c\u7b26\u5408\u6211\u4eec\u7684\u5b9a\u4e49: \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"success\" , \"data\" : { \"uid\" :835740, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"warnold@example.net\" }} \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"success\" , \"data\" : { \"uid\" :203363, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"nathanthomas@example.net\" }} \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"success\" , \"data\" : { \"uid\" :508769, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"reynoldslisa@example.com\" }}","title":"Mock Response plugin"},{"location":"5_5_how_to_customize_plugin/","text":"Pait \u81ea\u5e26\u662f\u63d2\u4ef6\u5e76\u4e0d\u591a\uff0c\u4f46\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u5b9e\u73b0\u63d2\u4ef6\uff0c\u4e0b\u9762\u4ee5\u5f02\u5e38\u6355\u83b7\u63d2\u4ef6\u4e3a\u4f8b\u5b50\u9610\u8ff0\u5982\u4f55\u5236\u4f5c\u4e00\u4e2a\u63d2\u4ef6\u3002 \u4e0b\u9762\u6240\u793a\u4ee3\u7801\u662f\u4e00\u4e2a\u7b80\u5355\u7684API\u63a5\u53e3\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u63a5\u53e3\u7531 Pait \u63d0\u4f9b\u53c2\u6570\u6821\u9a8c\u529f\u80fd\uff0c\u5982\u679c\u8c03\u7528\u65b9\u53d1\u8d77\u7684\u53c2\u6570\u6709\u9519\uff0c\u5219\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u5e76\u6700\u7ec8\u88ab starlette \u6355\u83b7\u518d\u5206\u53d1\u5230 api_exception \u51fd\u6570\u5904\u7406\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u8bf7\u6c42\uff0c Pait \u5728\u6821\u9a8c\u53d1\u73b0\u7f3a\u5c11\u53c2\u6570uid\u65f6\u4f1a\u629b\u51fa\u9519\u8bef\uff0c\u6700\u540e\u88ab api_exception \u6355\u83b7\u5e76\u628a\u5f02\u5e38\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo { \"data\" : \"Can not found uid value\" } \u73b0\u5728\u8be5\u63a5\u53e3\u591a\u4e86\u4e00\u4e2a\u9700\u6c42\uff0c\u9700\u8981\u5bf9\u8be5\u8def\u7531\u51fd\u6570\u7684\u5f02\u5e38\u7684\u5904\u7406\u5b9a\u5236\u5316\uff0c\u751f\u6210\u4e0d\u4e00\u6837\u7684\u8fd4\u56de\u683c\u5f0f\uff0c\u4f46\u662f api_exception \u662f\u7edf\u4e00\u5904\u7406\u6240\u6709\u63a5\u53e3\u51fd\u6570\u7684\u5f02\u5e38\uff0c \u5b83\u4e0d\u53ef\u80fd\u4e3a\u6bcf\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e00\u4e2a\u5355\u72ec\u7684\u51fd\u6570\u5904\u7406\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u5b9a\u5236\u4e00\u4e2a\u6355\u83b7\u5f02\u5e38\u7684\u63d2\u4ef6\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u4e0b\u662f\u4e00\u4e2a\u5355\u72ec\u9488\u5bf9\u8fd9\u4e2a\u63a5\u53e3\u5b9a\u5236\u7684\u63d2\u4ef6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from typing import Any , Dict from pait.plugin.base import BasePlugin from pait.model.core import PaitCoreModel from pydantic import ValidationError from pait.exceptions import PaitBaseException class DemoExceptionPlugin ( BasePlugin ): is_pre_core : bool = True @classmethod def pre_check ( cls , pait_core_model : \"PaitCoreModel\" , kwargs : Dict ) -> Dict : if pait_core_model . func . __name__ != \"demo\" : raise RuntimeError ( f \"The { cls . __name__ } is only used for demo func\" ) return super () . cls_hook_by_core_model ( pait_core_model , kwargs ) async def __call__ ( self , * args : Any , ** kwargs : Any ) -> Any : try : return await self . call_next ( args , kwargs ) except ( ValidationError , PaitBaseException ) as e : return JSONResponse ({ \"plugin exc info\" : str ( e )}) \u5728\u8fd9\u4e2a\u793a\u4f8b\u63d2\u4ef6\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u6709\u51e0\u4e2a\u5730\u65b9\uff1a 0.\u7531\u4e8e\u8be5\u8def\u7531\u51fd\u6570\u662f async \u7684\uff0c\u6240\u4ee5 __call__ \u65b9\u6cd5\u9700\u8981\u52a0\u4e0aasync\u3002 1.\u7b2c9\u884c\u7684 is_pre_core = True \u662f\u8bbe\u7f6e\u8be5\u63d2\u4ef6\u4e3a\u524d\u7f6e\u63d2\u4ef6\uff0c\u8fd9\u6837\u5c31\u80fd\u62e6\u622a Pait \u548c\u8def\u7531\u51fd\u6570\u7684\u5f02\u5e38\u4e86\u3002 2.\u7b2c12\u884c\u7684 pre_chec \u65b9\u6cd5\u4f1a\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u68c0\u67e5\uff0c\u8be5\u68c0\u67e5\u53ea\u4f1a\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u8fd0\u884c\uff0c\u8fd9\u4e2a\u68c0\u67e5\u7684\u903b\u8f91\u662f\u5982\u679c\u5224\u5b9a\u8be5\u63d2\u4ef6\u5e76\u4e0d\u662f\u6302\u5728 demo \u51fd\u6570\u4e0a\u5c31\u4f1a\u629b\u9519\uff0c \u5176\u4e2d pait_core_model \u662f Pait \u4e3a\u8def\u7531\u51fd\u6570\u751f\u6210\u7684\u4e00\u4e9b\u5c5e\u6027\u3002 3.\u7b2c17\u884c\u7684 __call__ \u65b9\u6cd5\u662f\u8be5\u63d2\u4ef6\u7684\u4e3b\u8981\u5904\u7406\u903b\u8f91\uff0c\u5f53\u6709\u8bf7\u6c42\u8fdb\u6765\u65f6\uff0c Pait \u4f1a\u901a\u8fc7 __call__ \u65b9\u6cd5\u8c03\u7528\u63d2\u4ef6\uff0c\u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7 call_next \u6765\u8c03\u7528\u4e0b\u4e00\u4e2a\u63d2\u4ef6\uff0c \u8be5\u63d2\u4ef6\u901a\u8fc7 try...except \u6765\u6355\u83b7\u540e\u7eed\u6240\u6709\u8c03\u7528\u6bb5\u5f02\u5e38\uff0c\u5982\u679c\u662f\u7b26\u5408\u6761\u4ef6\u7684\u5f02\u5e38\u5c31\u4f1a\u88ab\u6355\u83b7\uff0c\u5e76\u751f\u6210\u4e0d\u4e00\u6837\u7684\u54cd\u5e94\u7ed3\u679c\u3002 \u7f16\u5199\u5b8c\u6bd5\u63d2\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e86\uff0c\u5bf9\u4e0a\u9762\u4ee3\u7801\u8fdb\u884c\u5982\u4e0b\u7684\u5c0f\u66f4\u6539: @pait ( plugin_list = [ DemoExceptionPlugin . build ]) async def demo ( ... ): pass \u7136\u540e\u91cd\u542f\u7a0b\u5e8f\u5e76\u8fd0\u884c\u540c\u6837\u7684\u8bf7\u6c42\uff0c\u53ef\u4ee5\u53d1\u73b0\u54cd\u5e94\u7ed3\u679c\u5df2\u7ecf\u53d8\u4e3a\u63d2\u4ef6\u81ea\u5df1\u629b\u51fa\u7684\u7ed3\u679c\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo { \"plugin exc info\" : \"File \\\"/home/so1n/demo.py\\\", line 48, in demo.\\nerror:Can not found uid value\" }","title":"How to customize plugin"},{"location":"6_config/","text":"config config\u80fd\u4e3a Pait \u63d0\u4f9b\u4e00\u4e9b\u914d\u7f6e\u652f\u6301, \u4e0d\u8fc7\u7531\u4e8e Pait \u662f\u4ee5\u4e00\u4e2a\u88c5\u9970\u5668\u673a\u5236\u8fd0\u884c\u7740\uff0c\u6240\u4ee5\u4e0d\u662f\u8def\u7531\u51fd\u6570\u8fd0\u884c\u65f6\u6765\u8bfb\u53d6\u914d\u7f6e\uff0c\u800c\u662f config \u4e3b\u52a8\u53bb\u8986\u76d6\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684 Pait \u5c5e\u6027\uff0c\u6240\u4ee5\u5b83\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u5c31\u662f\u9700\u8981\u5728app\u88ab\u8fd0\u884c\u4e4b\u524d\uff0c load_app \u4e4b\u540e\u521d\u59cb\u5316, \u540c\u65f6\u6574\u4e2a\u8fd0\u884c\u65f6\u53ea\u5141\u8bb8\u521d\u59cb\u5316\u4e00\u6b21\uff0c\u5982\u4e0b\u4ee3\u7801\uff1a from starlette.applications import Starlette from pait.g import config from pait.app import load_app # ------ # \u901a\u8fc7from ... import \u5bfc\u5165\u8def\u7531\u6a21\u5757 # ------ app : Starlette = Starlette () # -------- # app.add_route # -------- load_app ( app ) config . init_config ( author = \"so1n\" ) # -------- # run app # -------- \u8be5\u4ee3\u7801\u4e2d\u5728 run app \u4ee3\u7801\u5757\u4e4b\u524d\u901a\u8fc7\u8c03\u7528 config.init_config \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u76ee\u524d config.init_config \u652f\u6301\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570: author: \u5168\u5c40\u7684\u9ed8\u8ba4API\u4f5c\u8005, \u5982\u679c @pait \u4e2d\u6ca1\u6709\u586b\u5199author, \u5219\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684auth\u4e3a config.author status: \u5168\u5c40\u7684\u9ed8\u8ba4API\u72b6\u6001, \u5982\u679c @pait \u4e2d\u6ca1\u6709\u586b\u5199status, \u5219\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684status\u4e3a config.status json_type_default_value_dict: \u914d\u7f6ejson\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c\uff0c\u7528\u4e8ePait\u751f\u6210\u4e00\u4e9b\u9ed8\u8ba4Json\u503c\u3002 python_type_default_valur_dict: \u914d\u7f6ePython\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c\uff0c\u7528\u4e8ePait\u751f\u6210\u4e00\u4e9bPython\u9ed8\u8ba4\u503c\u3002 json_encoder: Pait\u5168\u5c40\u8c03\u7528\u7684Json\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 i18n_local: Pait\u5168\u5c40\u4f7f\u7528\u7684i18n\u8bed\u8a00 i18n_config_dict: Pait i18n\u7684\u5b57\u6bb5\u914d\u7f6e\uff0c\u5982\u679c\u8ddf\u9ed8\u8ba4\u7684\u914d\u7f6e\u6709\u76f8\u540c\u7684Key\u5219\u4f1a\u8986\u76d6\u6389\u5bf9\u5e94Key\u7684\u503c apply_func_list: \u6309\u7167\u4e00\u5b9a\u89c4\u5219\u9002\u914d\u8def\u7531\u51fd\u6570\u5c5e\u6027\u7684\u51fd\u6570\u5217\u8868 apply func\u4ecb\u7ecd \u5728\u4f7f\u7528 Pait \u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u4f9d\u636e\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684\u751f\u547d\u5468\u671f\u6765\u5e94\u7528\u4e0d\u540c\u7684 Pait \u5c5e\u6027\uff0c\u6bd4\u5982\u5bf9\u4e8e status \u4e3adesign\u7684\u8def\u7531\u51fd\u6570\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528Mock\u63d2\u4ef6\uff0c\u800c\u5bf9\u4e8e status \u4e3atest\u7684\u8def\u7531\u51fd\u6570\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528\u54cd\u5e94\u7ed3\u679c\u68c0\u67e5\u7684\u63d2\u4ef6\u7b49\u7b49\u3002\u5982\u679c\u6bcf\u6b21\u90fd\u662f\u624b\u52a8\u53bb\u6539\u4f1a\u975e\u5e38\u9ebb\u70e6\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528apply func\u529f\u80fd\u3002 Pait \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684apply func\uff0c\u6bcf\u4e2aapply func\u53ea\u6709\u5e94\u7528\u4e00\u79cd Pait \u5c5e\u6027\uff0c\u4ed6\u4eec\u90fd\u662f\u63a5\u65362\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8def\u7531\u51fd\u6570 Pait \u5bf9\u5e94\u5c5e\u6027\u8981\u8981\u5e94\u7528\u7684\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5339\u914d\u89c4\u5219\uff0c\u5339\u914d\u89c4\u5219\u5c01\u88c5\u5728\u4e00\u4e2a MatchRule \u5bf9\u8c61\u4e2d\uff0c\u5bf9\u8c61\u5982\u4e0b\uff1a MatchKeyLiteral = Literal [ \"all\" , # \u6240\u6709\u8def\u7531\u51fd\u6570\u90fd\u4f1a\u5339\u914d \"status\" , # \u8def\u7531\u51fd\u6570\u7684status\u4e3a\u5bf9\u5e94\u503c\u5f97\u90fd\u4f1a\u5339\u914d \"group\" , # \u8def\u7531\u51fd\u6570\u7684group\u4e3a\u5bf9\u5e94\u503c\u5f97\u90fd\u4f1a\u5339\u914d \"tag\" , # \u8def\u7531\u51fd\u6570\u7684tag\u5305\u542b\u5bf9\u5e94\u503c\u5f97\u90fd\u4f1a\u5339\u914d \"method_list\" , # \u8def\u7531\u51fd\u6570\u7684http\u8bf7\u6c42\u65b9\u6cd5\u5305\u542b\u5bf9\u5e94\u503c\u5f97\u90fd\u4f1a\u5339\u914d \"path\" , # \u8def\u7531\u51fd\u6570\u7684url\u4e0e\u8f93\u5165\u7684\u6b63\u5219\u5339\u914d\u5230\u7684\u90fd\u4f1a\u5339\u914d \"!status\" , \"!group\" , \"!tag\" , \"!method_list\" , \"!path\" , ] @dataclass class MatchRule ( object ): key : MatchKeyLiteral = \"all\" target : Any = None \u8fd9\u4e2a\u5bf9\u8c61\u7684Key\u662f\u6307\u8def\u7531\u51fd\u6570 Pait \u5c5e\u6027\u7684Key\uff0c\u5176\u4e2d all \u4ee3\u8868\u6240\u6709\u8def\u7531\u51fd\u6570\u90fd\u5339\u914d\uff0c\u4ee5 ! \u5f00\u5934\u7684\u4ee3\u8868\u662f\u53cd\u5411\u5339\u914d\uff0c\u6bd4\u5982 MatchRule(!status, \"test\") \u4ee3\u8868\u662f\u5339\u914d status \u7684\u503c\u4e0d\u662f test \u7684\u8def\u7531\u51fd\u6570\uff0c\u800ctarget\u5219\u662f\u5bf9\u5e94\u7684\u503c\u3002 Note \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0capply func\u63d0\u4f9b\u7684\u662f\u8ffd\u52a0\u529f\u80fd\uff0c\u5e76\u4e0d\u4f1a\u8986\u76d6\u6389\u4e4b\u524d\u7684\u503c\u3002 apply_extra_openapi_model \u5728\u4f7f\u7528Web\u6846\u67b6\u7684\u65f6\u5019\uff0c\u7ecf\u5e38\u4f1a\u4f7f\u7528\u4e2d\u95f4\u4ef6\u7b49\u5176\u5b83\u7528\u5230\u8bf7\u6c42\u53c2\u6570\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u6709\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u4ed6\u4f1a\u6839\u636eApp\u7248\u672c\u53f7\u6765\u8fdb\u884c\u9650\u5236\uff0c\u7248\u672c\u53f7\u5c0f\u4e8e1\u7684\u90fd\u8fd4\u56de404\u3002\u8fd9\u79cd\u60c5\u51b5 Pait \u65e0\u6cd5\u6258\u7ba1\u5230\u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u4f7f\u7528\u7684\u8bf7\u6c42\u503c\uff0c\u5bfc\u81f4\u5bfc\u51fa\u7684OpanAPI\u6587\u4ef6\uff0c\u4f1a\u7f3a\u5c11\u8fd9\u4e2a\u8bf7\u6c42\u503c\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 apply_extra_openapi_model \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5b83\u7684\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.field import Header from pait.extra.config import apply_extra_openapi_model class DemoModel ( BaseModel ): \"\"\"\u4e2d\u95f4\u4ef6\u4e00\u822c\u90fd\u662f\u901a\u8fc7Header\u8bfb\u53d6\u5bf9\u5e94\u7684\u7248\u672c\u53f7\u503c\"\"\" version_code : int = Header . i ( description = \"\u7248\u672c\u53f7\" ) version_name : str = Header . i ( description = \"\u7248\u672c\u540d\u79f0\" ) # \u901a\u8fc7apply_extra_openapi_model\u5e94\u7528\u5f53\u524d\u8fd9\u4e2aModel\uff0c\u7531\u4e8e\u4e2d\u95f4\u4ef6\u90fd\u662f\u5e94\u7528\u5230\u6240\u6709\u7684\u8def\u7531\u51fd\u6570\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528MatchRule\u7684\u9ed8\u8ba4\u503c\u3002 config . init_config ( apply_func_list = [ apply_extra_openapi_model ( DemoModel )]) apply_response_model \u4e0eapply_extra_openapi_model\u4e00\u6837\uff0c\u5728\u4f7f\u7528\u4e2d\u95f4\u4ef6\u9650\u5236\u7248\u672c\u53f7\u5c0f\u4e8e1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5185\u90e8\u7684\u54cd\u5e94\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528apply_response_model\u6765\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u7684\u54cd\u5e94\uff0c\u9700\u8981\u6ce8\u610f\u70b9\u662f\uff0c\u6dfb\u52a0\u7684\u8fd9\u4e2a\u9ed8\u8ba4\u54cd\u5e94\u6a21\u578b\u7684 is_core \u5c5e\u6027\u5fc5\u987b\u4e3aFalse\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.extra.config import apply_response_model from pait.g import config from pait.model.response import PaitHtmlResponseModel class DefaultResponseModel ( PaitHtmlResponseModel ): is_core = False # \u7531\u4e8e\u4e2d\u95f4\u4ef6\u90fd\u662f\u5e94\u7528\u5230\u6240\u6709\u7684\u8def\u7531\u51fd\u6570\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528MatchRule\u7684\u9ed8\u8ba4\u503c\u3002 config . init_config ( apply_func_list = [ apply_response_model ([ DefaultResponseModel ])]) apply_block_http_method_set \u7531\u4e8e Pait \u53ea\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u4ed6\u53ea\u80fd\u6355\u83b7\u5230\u8def\u7531\u51fd\u6570\u672c\u8eab\u7684\u5c5e\u6027\uff0c\u50cfUrl, Http\u65b9\u6cd5\u4e4b\u7c7b\u7684\u9700\u8981\u540e\u7eed\u8c03\u7528 load_app \u6765\u8865\u5168\uff0c\u4f46\u662f\u5f88\u591aWeb\u6846\u67b6\u4f1a\u81ea\u52a8\u4e3a\u8def\u7531\u51fd\u6570\u8865\u4e0a HEAD \uff0c OPTIONS \u7b49Http\u65b9\u6cd5\uff0c\u5373\u4f7f\u5f00\u53d1\u8005\u5728\u6ce8\u518c\u8def\u7531\u65f6\u5e76\u6ca1\u6709\u586b\u5199\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5bfc\u51fa\u6765\u7684OpenAPI\u6570\u636e\u4f1a\u5f88\u591a\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 apply_block_http_method_set \u6765\u7981\u7528\u4e00\u4e9b\u65b9\u6cd5\u4e0d\u88ab Pait \u6355\u83b7\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.extra.config import apply_block_http_method_set from pait.g import config config . init_config ( apply_func_list = [ apply_block_http_method_set ({ \"HEAD\" , \"OPTIONS\" })]) apply_default_pydantic_model_config \u524d\u9762\u8bf4\u5230\uff0c Pait \u5b9e\u9645\u4e0a\u4f1a\u628a\u5f00\u53d1\u8005\u586b\u5199\u7684\u51fd\u6570\u7b7e\u540d\u8f6c\u6362\u4e3a\u4e00\u4e2a pydantic.BaseModel \u518d\u8fdb\u884c\u6821\u9a8c\u548c\u7c7b\u578b\u8f6c\u6362\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6709\u65f6\u5019\u9700\u8981\u4f7f\u7528 pydantic.BaseConfig \u529f\u80fd\uff0c\u6bd4\u5982 pydantic \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u5bf9\u5f00\u53d1\u8005\u586b\u5199\u7684 default \u503c\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u9700\u8981\u8fdb\u884c\u6821\u9a8c\uff0c\u5219\u9700\u8981\u4f7f\u7528 pydantic.BaseConfig \u529f\u80fd\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 apply_default_pydantic_model_config \uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.extra.config import apply_default_pydantic_model_config from pait.g import config from pydantic import BaseConfig class MyBaseConfig ( BaseConfig ): validate_assignment = True config . init_config ( apply_func_list = [ apply_default_pydantic_model_config ( MyBaseConfig )]) apply_multi_plugin \u63d2\u4ef6\u662f Pait \u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5176\u4e2d\u6709\u4e9b\u63d2\u4ef6\u53ea\u9002\u7528\u4e86\u63a5\u53e3\u7684\u67d0\u4e9b\u751f\u547d\u5468\u671f\uff0c\u6240\u4ee5\u6bd4\u8f83\u63a8\u8350\u4ee5\u4e0b\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u6839\u636e\u8def\u7531\u51fd\u6570\u7684\u72b6\u6001\u6765\u5224\u65ad\u8981\u5e94\u7528\u54ea\u4e9b\u63d2\u4ef6\uff0c\u5982\u4e0b: from pait.app.starlette.plugin.mock_response import AsyncMockPlugin from pait.app.starlette.plugin.check_json_resp import AsyncCheckJsonRespPlugin from pait.extra.config import apply_multi_plugin from pait.g import config from pait.model.core import MatchRule from pait.model.status import PaitStatus config . init_config ( apply_func_list = [ apply_multi_plugin ( # \u4e3a\u4e86\u80fd\u590d\u7528\u63d2\u4ef6\uff0c\u8fd9\u91cc\u53ea\u5141\u8bb8lambda\u5199\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528pait\u81ea\u5e26\u7684create_factory [ lambda : AsyncMockPlugin . build ()], # \u9650\u5b9astatus\u4e3adesign\u7684\u4f7f\u7528Mock\u63d2\u4ef6 match_rule = MatchRule ( key = \"status\" , target = PaitStatus . design ) ), apply_multi_plugin ( [ lambda : AsyncCheckJsonRespPlugin . build ()], # \u9650\u5b9astatus\u4e3atest\u7684\u4f7f\u7528\u54cd\u5e94\u4f53\u68c0\u67e5\u63d2\u4ef6 match_rule = MatchRule ( key = \"status\" , target = PaitStatus . test ) ), ] ) apply_pre_depend \u5927\u591a\u6570\u65f6\u5019\u53ef\u80fd\u4f1a\u4e3a\u67d0\u4e00\u7ec4\u8def\u7531\u51fd\u6570\u4f7f\u7528\u4e00\u4e2atoken\u68c0\u9a8c\u51fd\u6570\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u9002\u5408\u4f7f\u7528\u4e2d\u95f4\u4ef6\uff0c\u4f46\u662f\u4e00\u4e2a\u4e00\u4e2a\u8def\u7531\u51fd\u6570\u53bb\u6dfb\u52a0depend\u5374\u662f\u5f88\u9ebb\u70e6\u7684\u4e00\u4ef6\u4e8b\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 apply_pre_depend ,\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.extra.config import apply_pre_depend from pait.field import Header from pait.g import config from pait.model.core import MatchRule def check_token ( token : str = Header . i ( \"\" )) -> bool : return bool ( token ) config . init_config ( apply_func_list = [ # \u5339\u914durl\u4ee5/api/v1/user\u5f00\u5934\u7684 apply_pre_depend ( check_token , match_rule = MatchRule ( key = \"path\" , target = \"^/api/v1/user\" )), # \u5339\u914d\u8def\u7531\u51fd\u6570\u7684group\u5c5e\u6027\u4e3auser\u7684 apply_pre_depend ( check_token , match_rule = MatchRule ( key = \"group\" , target = \"user\" )) ], )","title":"config"},{"location":"6_config/#config","text":"config\u80fd\u4e3a Pait \u63d0\u4f9b\u4e00\u4e9b\u914d\u7f6e\u652f\u6301, \u4e0d\u8fc7\u7531\u4e8e Pait \u662f\u4ee5\u4e00\u4e2a\u88c5\u9970\u5668\u673a\u5236\u8fd0\u884c\u7740\uff0c\u6240\u4ee5\u4e0d\u662f\u8def\u7531\u51fd\u6570\u8fd0\u884c\u65f6\u6765\u8bfb\u53d6\u914d\u7f6e\uff0c\u800c\u662f config \u4e3b\u52a8\u53bb\u8986\u76d6\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684 Pait \u5c5e\u6027\uff0c\u6240\u4ee5\u5b83\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u5c31\u662f\u9700\u8981\u5728app\u88ab\u8fd0\u884c\u4e4b\u524d\uff0c load_app \u4e4b\u540e\u521d\u59cb\u5316, \u540c\u65f6\u6574\u4e2a\u8fd0\u884c\u65f6\u53ea\u5141\u8bb8\u521d\u59cb\u5316\u4e00\u6b21\uff0c\u5982\u4e0b\u4ee3\u7801\uff1a from starlette.applications import Starlette from pait.g import config from pait.app import load_app # ------ # \u901a\u8fc7from ... import \u5bfc\u5165\u8def\u7531\u6a21\u5757 # ------ app : Starlette = Starlette () # -------- # app.add_route # -------- load_app ( app ) config . init_config ( author = \"so1n\" ) # -------- # run app # -------- \u8be5\u4ee3\u7801\u4e2d\u5728 run app \u4ee3\u7801\u5757\u4e4b\u524d\u901a\u8fc7\u8c03\u7528 config.init_config \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u76ee\u524d config.init_config \u652f\u6301\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570: author: \u5168\u5c40\u7684\u9ed8\u8ba4API\u4f5c\u8005, \u5982\u679c @pait \u4e2d\u6ca1\u6709\u586b\u5199author, \u5219\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684auth\u4e3a config.author status: \u5168\u5c40\u7684\u9ed8\u8ba4API\u72b6\u6001, \u5982\u679c @pait \u4e2d\u6ca1\u6709\u586b\u5199status, \u5219\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684status\u4e3a config.status json_type_default_value_dict: \u914d\u7f6ejson\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c\uff0c\u7528\u4e8ePait\u751f\u6210\u4e00\u4e9b\u9ed8\u8ba4Json\u503c\u3002 python_type_default_valur_dict: \u914d\u7f6ePython\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c\uff0c\u7528\u4e8ePait\u751f\u6210\u4e00\u4e9bPython\u9ed8\u8ba4\u503c\u3002 json_encoder: Pait\u5168\u5c40\u8c03\u7528\u7684Json\u5e8f\u5217\u5316\u7684\u5bf9\u8c61 i18n_local: Pait\u5168\u5c40\u4f7f\u7528\u7684i18n\u8bed\u8a00 i18n_config_dict: Pait i18n\u7684\u5b57\u6bb5\u914d\u7f6e\uff0c\u5982\u679c\u8ddf\u9ed8\u8ba4\u7684\u914d\u7f6e\u6709\u76f8\u540c\u7684Key\u5219\u4f1a\u8986\u76d6\u6389\u5bf9\u5e94Key\u7684\u503c apply_func_list: \u6309\u7167\u4e00\u5b9a\u89c4\u5219\u9002\u914d\u8def\u7531\u51fd\u6570\u5c5e\u6027\u7684\u51fd\u6570\u5217\u8868","title":"config"},{"location":"6_config/#apply-func","text":"\u5728\u4f7f\u7528 Pait \u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u4f9d\u636e\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684\u751f\u547d\u5468\u671f\u6765\u5e94\u7528\u4e0d\u540c\u7684 Pait \u5c5e\u6027\uff0c\u6bd4\u5982\u5bf9\u4e8e status \u4e3adesign\u7684\u8def\u7531\u51fd\u6570\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528Mock\u63d2\u4ef6\uff0c\u800c\u5bf9\u4e8e status \u4e3atest\u7684\u8def\u7531\u51fd\u6570\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528\u54cd\u5e94\u7ed3\u679c\u68c0\u67e5\u7684\u63d2\u4ef6\u7b49\u7b49\u3002\u5982\u679c\u6bcf\u6b21\u90fd\u662f\u624b\u52a8\u53bb\u6539\u4f1a\u975e\u5e38\u9ebb\u70e6\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528apply func\u529f\u80fd\u3002 Pait \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684apply func\uff0c\u6bcf\u4e2aapply func\u53ea\u6709\u5e94\u7528\u4e00\u79cd Pait \u5c5e\u6027\uff0c\u4ed6\u4eec\u90fd\u662f\u63a5\u65362\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8def\u7531\u51fd\u6570 Pait \u5bf9\u5e94\u5c5e\u6027\u8981\u8981\u5e94\u7528\u7684\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5339\u914d\u89c4\u5219\uff0c\u5339\u914d\u89c4\u5219\u5c01\u88c5\u5728\u4e00\u4e2a MatchRule \u5bf9\u8c61\u4e2d\uff0c\u5bf9\u8c61\u5982\u4e0b\uff1a MatchKeyLiteral = Literal [ \"all\" , # \u6240\u6709\u8def\u7531\u51fd\u6570\u90fd\u4f1a\u5339\u914d \"status\" , # \u8def\u7531\u51fd\u6570\u7684status\u4e3a\u5bf9\u5e94\u503c\u5f97\u90fd\u4f1a\u5339\u914d \"group\" , # \u8def\u7531\u51fd\u6570\u7684group\u4e3a\u5bf9\u5e94\u503c\u5f97\u90fd\u4f1a\u5339\u914d \"tag\" , # \u8def\u7531\u51fd\u6570\u7684tag\u5305\u542b\u5bf9\u5e94\u503c\u5f97\u90fd\u4f1a\u5339\u914d \"method_list\" , # \u8def\u7531\u51fd\u6570\u7684http\u8bf7\u6c42\u65b9\u6cd5\u5305\u542b\u5bf9\u5e94\u503c\u5f97\u90fd\u4f1a\u5339\u914d \"path\" , # \u8def\u7531\u51fd\u6570\u7684url\u4e0e\u8f93\u5165\u7684\u6b63\u5219\u5339\u914d\u5230\u7684\u90fd\u4f1a\u5339\u914d \"!status\" , \"!group\" , \"!tag\" , \"!method_list\" , \"!path\" , ] @dataclass class MatchRule ( object ): key : MatchKeyLiteral = \"all\" target : Any = None \u8fd9\u4e2a\u5bf9\u8c61\u7684Key\u662f\u6307\u8def\u7531\u51fd\u6570 Pait \u5c5e\u6027\u7684Key\uff0c\u5176\u4e2d all \u4ee3\u8868\u6240\u6709\u8def\u7531\u51fd\u6570\u90fd\u5339\u914d\uff0c\u4ee5 ! \u5f00\u5934\u7684\u4ee3\u8868\u662f\u53cd\u5411\u5339\u914d\uff0c\u6bd4\u5982 MatchRule(!status, \"test\") \u4ee3\u8868\u662f\u5339\u914d status \u7684\u503c\u4e0d\u662f test \u7684\u8def\u7531\u51fd\u6570\uff0c\u800ctarget\u5219\u662f\u5bf9\u5e94\u7684\u503c\u3002 Note \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0capply func\u63d0\u4f9b\u7684\u662f\u8ffd\u52a0\u529f\u80fd\uff0c\u5e76\u4e0d\u4f1a\u8986\u76d6\u6389\u4e4b\u524d\u7684\u503c\u3002","title":"apply func\u4ecb\u7ecd"},{"location":"6_config/#apply_extra_openapi_model","text":"\u5728\u4f7f\u7528Web\u6846\u67b6\u7684\u65f6\u5019\uff0c\u7ecf\u5e38\u4f1a\u4f7f\u7528\u4e2d\u95f4\u4ef6\u7b49\u5176\u5b83\u7528\u5230\u8bf7\u6c42\u53c2\u6570\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u6709\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u4ed6\u4f1a\u6839\u636eApp\u7248\u672c\u53f7\u6765\u8fdb\u884c\u9650\u5236\uff0c\u7248\u672c\u53f7\u5c0f\u4e8e1\u7684\u90fd\u8fd4\u56de404\u3002\u8fd9\u79cd\u60c5\u51b5 Pait \u65e0\u6cd5\u6258\u7ba1\u5230\u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u4f7f\u7528\u7684\u8bf7\u6c42\u503c\uff0c\u5bfc\u81f4\u5bfc\u51fa\u7684OpanAPI\u6587\u4ef6\uff0c\u4f1a\u7f3a\u5c11\u8fd9\u4e2a\u8bf7\u6c42\u503c\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 apply_extra_openapi_model \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5b83\u7684\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.field import Header from pait.extra.config import apply_extra_openapi_model class DemoModel ( BaseModel ): \"\"\"\u4e2d\u95f4\u4ef6\u4e00\u822c\u90fd\u662f\u901a\u8fc7Header\u8bfb\u53d6\u5bf9\u5e94\u7684\u7248\u672c\u53f7\u503c\"\"\" version_code : int = Header . i ( description = \"\u7248\u672c\u53f7\" ) version_name : str = Header . i ( description = \"\u7248\u672c\u540d\u79f0\" ) # \u901a\u8fc7apply_extra_openapi_model\u5e94\u7528\u5f53\u524d\u8fd9\u4e2aModel\uff0c\u7531\u4e8e\u4e2d\u95f4\u4ef6\u90fd\u662f\u5e94\u7528\u5230\u6240\u6709\u7684\u8def\u7531\u51fd\u6570\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528MatchRule\u7684\u9ed8\u8ba4\u503c\u3002 config . init_config ( apply_func_list = [ apply_extra_openapi_model ( DemoModel )])","title":"apply_extra_openapi_model"},{"location":"6_config/#apply_response_model","text":"\u4e0eapply_extra_openapi_model\u4e00\u6837\uff0c\u5728\u4f7f\u7528\u4e2d\u95f4\u4ef6\u9650\u5236\u7248\u672c\u53f7\u5c0f\u4e8e1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5185\u90e8\u7684\u54cd\u5e94\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528apply_response_model\u6765\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u7684\u54cd\u5e94\uff0c\u9700\u8981\u6ce8\u610f\u70b9\u662f\uff0c\u6dfb\u52a0\u7684\u8fd9\u4e2a\u9ed8\u8ba4\u54cd\u5e94\u6a21\u578b\u7684 is_core \u5c5e\u6027\u5fc5\u987b\u4e3aFalse\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.extra.config import apply_response_model from pait.g import config from pait.model.response import PaitHtmlResponseModel class DefaultResponseModel ( PaitHtmlResponseModel ): is_core = False # \u7531\u4e8e\u4e2d\u95f4\u4ef6\u90fd\u662f\u5e94\u7528\u5230\u6240\u6709\u7684\u8def\u7531\u51fd\u6570\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528MatchRule\u7684\u9ed8\u8ba4\u503c\u3002 config . init_config ( apply_func_list = [ apply_response_model ([ DefaultResponseModel ])])","title":"apply_response_model"},{"location":"6_config/#apply_block_http_method_set","text":"\u7531\u4e8e Pait \u53ea\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u4ed6\u53ea\u80fd\u6355\u83b7\u5230\u8def\u7531\u51fd\u6570\u672c\u8eab\u7684\u5c5e\u6027\uff0c\u50cfUrl, Http\u65b9\u6cd5\u4e4b\u7c7b\u7684\u9700\u8981\u540e\u7eed\u8c03\u7528 load_app \u6765\u8865\u5168\uff0c\u4f46\u662f\u5f88\u591aWeb\u6846\u67b6\u4f1a\u81ea\u52a8\u4e3a\u8def\u7531\u51fd\u6570\u8865\u4e0a HEAD \uff0c OPTIONS \u7b49Http\u65b9\u6cd5\uff0c\u5373\u4f7f\u5f00\u53d1\u8005\u5728\u6ce8\u518c\u8def\u7531\u65f6\u5e76\u6ca1\u6709\u586b\u5199\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5bfc\u51fa\u6765\u7684OpenAPI\u6570\u636e\u4f1a\u5f88\u591a\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 apply_block_http_method_set \u6765\u7981\u7528\u4e00\u4e9b\u65b9\u6cd5\u4e0d\u88ab Pait \u6355\u83b7\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.extra.config import apply_block_http_method_set from pait.g import config config . init_config ( apply_func_list = [ apply_block_http_method_set ({ \"HEAD\" , \"OPTIONS\" })])","title":"apply_block_http_method_set"},{"location":"6_config/#apply_default_pydantic_model_config","text":"\u524d\u9762\u8bf4\u5230\uff0c Pait \u5b9e\u9645\u4e0a\u4f1a\u628a\u5f00\u53d1\u8005\u586b\u5199\u7684\u51fd\u6570\u7b7e\u540d\u8f6c\u6362\u4e3a\u4e00\u4e2a pydantic.BaseModel \u518d\u8fdb\u884c\u6821\u9a8c\u548c\u7c7b\u578b\u8f6c\u6362\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6709\u65f6\u5019\u9700\u8981\u4f7f\u7528 pydantic.BaseConfig \u529f\u80fd\uff0c\u6bd4\u5982 pydantic \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u5bf9\u5f00\u53d1\u8005\u586b\u5199\u7684 default \u503c\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u9700\u8981\u8fdb\u884c\u6821\u9a8c\uff0c\u5219\u9700\u8981\u4f7f\u7528 pydantic.BaseConfig \u529f\u80fd\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 apply_default_pydantic_model_config \uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.extra.config import apply_default_pydantic_model_config from pait.g import config from pydantic import BaseConfig class MyBaseConfig ( BaseConfig ): validate_assignment = True config . init_config ( apply_func_list = [ apply_default_pydantic_model_config ( MyBaseConfig )])","title":"apply_default_pydantic_model_config"},{"location":"6_config/#apply_multi_plugin","text":"\u63d2\u4ef6\u662f Pait \u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5176\u4e2d\u6709\u4e9b\u63d2\u4ef6\u53ea\u9002\u7528\u4e86\u63a5\u53e3\u7684\u67d0\u4e9b\u751f\u547d\u5468\u671f\uff0c\u6240\u4ee5\u6bd4\u8f83\u63a8\u8350\u4ee5\u4e0b\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u6839\u636e\u8def\u7531\u51fd\u6570\u7684\u72b6\u6001\u6765\u5224\u65ad\u8981\u5e94\u7528\u54ea\u4e9b\u63d2\u4ef6\uff0c\u5982\u4e0b: from pait.app.starlette.plugin.mock_response import AsyncMockPlugin from pait.app.starlette.plugin.check_json_resp import AsyncCheckJsonRespPlugin from pait.extra.config import apply_multi_plugin from pait.g import config from pait.model.core import MatchRule from pait.model.status import PaitStatus config . init_config ( apply_func_list = [ apply_multi_plugin ( # \u4e3a\u4e86\u80fd\u590d\u7528\u63d2\u4ef6\uff0c\u8fd9\u91cc\u53ea\u5141\u8bb8lambda\u5199\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528pait\u81ea\u5e26\u7684create_factory [ lambda : AsyncMockPlugin . build ()], # \u9650\u5b9astatus\u4e3adesign\u7684\u4f7f\u7528Mock\u63d2\u4ef6 match_rule = MatchRule ( key = \"status\" , target = PaitStatus . design ) ), apply_multi_plugin ( [ lambda : AsyncCheckJsonRespPlugin . build ()], # \u9650\u5b9astatus\u4e3atest\u7684\u4f7f\u7528\u54cd\u5e94\u4f53\u68c0\u67e5\u63d2\u4ef6 match_rule = MatchRule ( key = \"status\" , target = PaitStatus . test ) ), ] )","title":"apply_multi_plugin"},{"location":"6_config/#apply_pre_depend","text":"\u5927\u591a\u6570\u65f6\u5019\u53ef\u80fd\u4f1a\u4e3a\u67d0\u4e00\u7ec4\u8def\u7531\u51fd\u6570\u4f7f\u7528\u4e00\u4e2atoken\u68c0\u9a8c\u51fd\u6570\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u9002\u5408\u4f7f\u7528\u4e2d\u95f4\u4ef6\uff0c\u4f46\u662f\u4e00\u4e2a\u4e00\u4e2a\u8def\u7531\u51fd\u6570\u53bb\u6dfb\u52a0depend\u5374\u662f\u5f88\u9ebb\u70e6\u7684\u4e00\u4ef6\u4e8b\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 apply_pre_depend ,\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a from pait.extra.config import apply_pre_depend from pait.field import Header from pait.g import config from pait.model.core import MatchRule def check_token ( token : str = Header . i ( \"\" )) -> bool : return bool ( token ) config . init_config ( apply_func_list = [ # \u5339\u914durl\u4ee5/api/v1/user\u5f00\u5934\u7684 apply_pre_depend ( check_token , match_rule = MatchRule ( key = \"path\" , target = \"^/api/v1/user\" )), # \u5339\u914d\u8def\u7531\u51fd\u6570\u7684group\u5c5e\u6027\u4e3auser\u7684 apply_pre_depend ( check_token , match_rule = MatchRule ( key = \"group\" , target = \"user\" )) ], )","title":"apply_pre_depend"},{"location":"7_gRPC_gateway/","text":"1.\u4ecb\u7ecd gRPC\u57fa\u4e8eHTTP/2.0\u8fdb\u884c\u901a\u4fe1\uff0c\u7406\u8bba\u4e0a\u5f88\u5bb9\u6613\u81ea\u52a8\u8f6c\u6362\u6210\u4e00\u4e2aRESTful\u63a5\u53e3\uff0c\u6240\u4ee5 Go gRPC \u5f88\u5bb9\u6613\u7684\u5c31\u80fd\u5b9e\u73b0 gRPC GatwWay \u529f\u80fd\uff0c\u5982 grpc-gateway \u3002\u4f46\u662f Python gRPC \u5374\u5f88\u96be\u505a\u5230\uff0c\u56e0\u4e3a\u5b83\u4e0d\u50cf Go gRPC \u4e00\u6837\u662f\u4f7f\u7528Go\u8bed\u8a00\u7f16\u5199\u7684\u5e93\uff0c\u800c\u662f\u7528C\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u540c\u65f6 Python gRPC \u63d0\u4f9b\u7684API\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5 Python \u8981\u5199\u4e00\u4e2a\u8f6c\u53d1HTTP\u8bf7\u6c42\u5230gRPC\u670d\u52a1\u6bd4\u8f83\u9ebb\u70e6\uff0c\u800c Pait \u63d0\u4f9b\u7684 gRPC GateWay \u529f\u80fd\u53ef\u4ee5\u4e3a\u5f00\u53d1\u8005\u4ee5\u6700\u5c0f\u7684\u4ee3\u7801\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 gRPC Gateway \u3002 Note Pait \u63d0\u4f9b\u7684 gRPC GateWay \u529f\u80fd\u5b9e\u9645\u4e0a\u662f\u7c7b\u4f3c\u4e00\u4e2a\u4ee3\u7406\u670d\u52a1\uff0c\u5b83\u4f1a\u628aHTTP\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u8bf7\u6c42\u8f6c\u4e3a\u5bf9\u5e94\u7684Msg\u5bf9\u8c61\uff0c\u518d\u901a\u8fc7channel\u53d1\u9001\u7ed9gRPC\u670d\u52a1\u7aef\uff0c\u6700\u540e\u628agRPC\u670d\u52a1\u7aef\u8fd4\u56de\u7684Msg\u5bf9\u8c61\u8f6c\u4e3a\u6846\u67b6\u5bf9\u5e94\u7684Json\u54cd\u5e94\u8fd4\u56de\u7ed9HTTP\u5ba2\u6237\u7aef\u3002 2.\u4f7f\u7528 gRPC GateWay \u7684\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c \u4ee3\u7801\u4f8b\u5b50\u5982\u4e0b\uff1a from typing import Any import grpc from starlette.applications import Starlette from pait.app.starlette.grpc_route import GrpcGatewayRoute from pait.app.starlette import AddDocRoute from pait.util.grpc_inspect.message_to_pydantic import grpc_timestamp_int_handler # \u5f15\u5165\u6839\u636eProtobuf\u6587\u4ef6\u751f\u6210\u7684\u5bf9\u5e94\u4ee3\u7801 from example.example_grpc.python_example_proto_code.example_proto.user import user_pb2_grpc from example.example_grpc.python_example_proto_code.example_proto.book import social_pb2_grpc , manager_pb2_grpc def create_app () -> Starlette : app : Starlette = Starlette () # \u4e3aapp\u6ce8\u518cUserStub,BookSocialStub\u548cBookManagerStub\u7684\u8def\u7531\u51fd\u6570 grpc_gateway_route : GrpcGatewayRoute = GrpcGatewayRoute ( app , # \u4f20\u5165\u5bf9\u5e94\u7684Stub\u7c7b user_pb2_grpc . UserStub , social_pb2_grpc . BookSocialStub , manager_pb2_grpc . BookManagerStub , # \u6307\u5b9aurl\u5f00\u5934 prefix = \"/api\" , # \u6307\u5b9a\u751f\u6210\u7684\u8def\u7531\u51fd\u6570\u540d\u7684\u5f00\u5934 title = \"Grpc\" , # \u6307\u5b9aTimestamp\u7684\u89e3\u6790\u65b9\u6cd5 grpc_timestamp_handler_tuple = ( int , grpc_timestamp_int_handler ), # \u89c1\u4e0b\u9762\u8bf4\u660e parse_msg_desc = \"by_mypy\" , ) def _before_server_start ( * _ : Any ) -> None : # \u542f\u52a8\u65f6\u6ce8\u518c\u5bf9\u5e94\u7684channel,\u8fd9\u6837\u6ce8\u518c\u7684\u8def\u7531\u51fd\u6570\u5728\u63a5\u6536\u8bf7\u6c42\u65f6\u53ef\u4ee5\u628a\u53c2\u6570\u901a\u8fc7grpc.channel\u4f20\u7ed9grpc\u670d\u52a1\u7aef grpc_gateway_route . init_channel ( grpc . aio . insecure_channel ( \"0.0.0.0:9000\" )) async def _after_server_stop ( * _ : Any ) -> None : # \u5173\u95ed\u65f6\u5173\u95ed\u5efa\u7acb\u7684channel await grpc_gateway_route . channel . close () app . add_event_handler ( \"startup\" , _before_server_start ) app . add_event_handler ( \"shutdown\" , _after_server_stop ) # \u6ce8\u518c\u6587\u6863\u8def\u7531\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u7684\u770b\u51faGrpcGateWayRoute\u7684\u8def\u7531\u51fd\u6570\u662f\u4ec0\u4e48 AddDocRoute ( prefix = \"/api-doc\" , title = \"Pait Api Doc\" ) . gen_route ( app ) return app if __name__ == \"__main__\" : import uvicorn # type: ignore from pait.extra.config import apply_block_http_method_set from pait.g import config config . init_config ( apply_func_list = [ apply_block_http_method_set ({ \"HEAD\" , \"OPTIONS\" })] ) uvicorn . run ( create_app (), log_level = \"debug\" ) \u8fd0\u884c\u4ee3\u7801\u540e\uff0c\u8bbf\u95ee\u5bf9\u5e94\u7684\u94fe\u63a5 http://127.0.0.1:8000/api-doc/swagge \u5c31\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u9875\u9762\uff1a \u9875\u9762\u4e2d\u7684API\u90fd\u662f GrpcGatewayRoute \u901a\u8fc7\u89e3\u6790Protobuf\u751f\u6210\u7684Stub\u7c7b\u751f\u6210\u7684\uff0c\u5177\u4f53\u7684Protobuf\u6587\u4ef6\u53ef\u4ee5\u8bbf\u95ee example_proto \u4e86\u89e3\u3002 Note \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0d\u901a\u8fc7 GrpcGatewayRoute \u7684 init_channel \u65b9\u6cd5\u6307\u5b9agrpc.channel\uff0c\u90a3\u4e48\u8def\u7531\u51fd\u6570\u6536\u5230\u8bf7\u6c42\u540e\u65e0\u6cd5\u628a\u8be5\u8bf7\u6c42\u8f6c\u6210grpc\u8bf7\u6c42\u53d1\u9001\u7ed9\u5bf9\u5e94\u7684gRPC\u670d\u52a1\u3002 3.\u53c2\u6570\u4ecb\u7ecd GrpcGatewayRoute \u63d0\u4f9b\u7684\u53c2\u6570\u90fd\u4f1a\u5e94\u7528\u5230\u6240\u6709Stub\u4e2d\uff0c\u5982\u679c\u6bcf\u4e2aStub\u9700\u8981\u5e94\u7528\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u5219\u53ef\u4ee5\u5206\u5f00\u6ce8\u518cStub\uff0c GrpcGatewayRoute \u652f\u6301\u7684\u53c2\u6570\u5982\u4e0b: app: \u5fc5\u586b\uff0c\u4e14\u5fc5\u987b\u662f\u5bf9\u5e94\u7684app\u5b9e\u4f8b\uff0c GrpcGatewayRoute \u4f1a\u628aStub\u751f\u6210\u7684\u8def\u7531\u51fd\u6570\u6ce8\u518c\u5230\u5bf9\u5e94\u7684app\u5b9e\u4f8b\u4e2d\u3002 stub: \u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u7684stub\u53c2\u6570\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f20\u5165\u7684Stub\u5fc5\u987b\u662f\u7531Protobuf\u751f\u6210\u7684gRPC Stub\u7c7b\u3002 prefix: \u751f\u6210\u8def\u7531\u51fd\u6570\u7684URL\u524d\u7f00\uff0c\u5047\u5982 prefix \u4e3a /api \uff0cStub\u7c7b\u7684\u4e00\u4e2agRPC\u65b9\u6cd5\u5bf9\u5e94\u7684URL\u4e3a /user.User/get_uid_by_token \uff0c\u90a3\u4e48\u751f\u6210\u7684URL\u5219\u662f /api/user.User/get_uid_by_token \u3002 title: \u751f\u6210\u8def\u7531\u51fd\u6570\u540d\u662f\u7531title\u4ee5\u53ca\u4e00\u4e2agRPC\u65b9\u6cd5\u7684\u65b9\u6cd5\u540d\u51b3\u5b9a\u7684\uff0c\u5982\u679c\u4e00\u4e2aapp\u5b9e\u4f8b\u7ed1\u5b9a\u8fc7\u4e2a\u76f8\u540c\u7684Stub\u7c7b\uff0c\u5219title\u5fc5\u987b\u4e0d\u540c\u3002\uff08\u5bf9\u4e8e Tornado \uff0c\u662f\u901a\u8fc7title\u548cgRPC\u65b9\u6cd5\u540d\u6765\u5b9a\u4e49\u5bf9\u5e94Handler\u7c7b\u7684\u540d\u79f0\u3002\uff09 parse_msg_desc: \u6307\u5b9a\u8981\u89e3\u6790msg\u6ce8\u91ca\u7684\u7c7b\u578b\uff0c\u5982\u679c\u586b\u5165\u7684\u503c\u4e3a by_mypy \uff0c\u5219\u4f1a\u89e3\u6790\u901a\u8fc7 mypy-protobuf \u63d2\u4ef6\u751f\u6210\u7684pyi\u6587\u4ef6\uff0c\u5982\u679c\u586b\u5165\u7684\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219\u4f1a\u89e3\u6790\u5bf9\u5e94\u8def\u5f84\u4e0b\u7684Protobuf\u6587\u4ef6\u3002 msg_to_dict: \u9ed8\u8ba4\u4e3a google.protobuf.json_format.MessageToDict \u3002\u8def\u7531\u51fd\u6570\u6536\u5230gRPC\u670d\u52a1\u8fd4\u56de\u7684Message\u5bf9\u8c61\u540e\uff0c\u4f1a\u901a\u8fc7msg_to_dict\u8f6c\u4e3aPython\u7684dict\u5bf9\u8c61\uff0c\u518d\u8fd4\u56dejson\u5230\u5ba2\u6237\u7aef\u3002 parse_dict: \u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u8be5\u53c2\u6570\u4ec5\u652f\u6301 google.protobuf.json_format.ParseDict \u4ee5\u53ca\u5b83\u7684\u53d8\u4f53\u3002\u8def\u7531\u51fd\u6570\u6536\u5230HTTP\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u540e\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u8f6c\u4e3agRPC\u65b9\u6cd5\u9700\u8981\u7684Message\u5bf9\u8c61\u3002 pait: \u7528\u4e8e\u88c5\u9970\u8def\u7531\u51fd\u6570\u7684 pait \u88c5\u9970\u5668\u5bf9\u8c61\u3002 make_response: \u8d1f\u8d23\u628a\u8def\u7531\u51fd\u6570\u8fd4\u56de\u7684Dict\u5bf9\u8c61\u8f6c\u4e3a\u5bf9\u5e94Web\u6846\u67b6\u7684Json\u54cd\u5e94\u5bf9\u8c61\u3002 url_handler: \u7528\u4e8e\u66f4\u6539gRPC\u81ea\u5e26\u7684URL\uff0c\u9ed8\u8ba4\u4f1a\u628agRPC\u65b9\u6cd5\u7684 . \u6539\u4e3a - \u3002 request_param_field_dict: \u6307\u5b9a\u4e00\u4e2a\u53c2\u6570\u540d\u5bf9\u5e94\u7684field\u5bf9\u8c61\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u662f\u4f1a\u5e94\u7528\u5230\u6240\u6709\u7684Stub\u5bf9\u8c61\u3002 grpc_timestamp_handler_tuple: \u8be5\u65b9\u6cd5\u652f\u6301\u4f20\u5165\u4e00\u4e2a(type, callback)\u7684\u6570\u7ec4\uff0ctype\u4ee3\u8868\u5b57\u6bb5\u5bf9\u5e94\u7684\u7c7b\u578b\uff0ccallback\u4ee3\u8868\u8f6c\u6362\u65b9\u6cd5\uff0c\u5b57\u6bb5\u7684\u7c7b\u578b\u4e3aTimestamp\u65f6\u4f1a\u542f\u7528\u3002\u56e0\u4e3agRPC\u7684Timestamp\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ea\u652f\u6301\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u6240\u4ee5\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u6765\u652f\u6301\u5176\u5b83\u7c7b\u578b\u8f6c\u4e3agRPC Timestamp\u5bf9\u8c61\uff0c\u6bd4\u5982\u628aint\u7c7b\u578b\u8f6c\u4e3aTimestamp\u5bf9\u8c61\uff0c\u5219\u5bf9\u5e94\u7684callback\u53ef\u4ee5\u5199\u4e3a: def grpc_timestamp_int_handler ( cls : Any , v : int ) -> Timestamp : t : Timestamp = Timestamp () if v : t . FromDatetime ( datetime . datetime . fromtimestamp ( v )) return t 4.\u901a\u8fc7Protobuf\u6587\u4ef6\u6ce8\u91ca\u5b9a\u4e49\u8def\u7531\u7684\u5c5e\u6027 \u901a\u8fc7Swagger\u9875\u9762\u53ef\u4ee5\u53d1\u73b0\uff0cUserStub\u76f8\u5173\u7684\u8def\u7531\u51fd\u6570\u7684url\u4e0e\u5176\u5b83Stub\u7684\u8def\u7531\u51fd\u6570\u4e0d\u4e00\u6837\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728Protobuf\u4e2d\u901a\u8fc7\u6ce8\u91ca\u5b9a\u4e49\u4e86UserStub\u751f\u6210\u8def\u7531\u51fd\u6570\u7684\u4e00\u4e9b\u884c\u4e3a\u3002\u6bd4\u5982UserStub\u5bf9\u5e94\u7684 user.proto \u6587\u4ef6\u7684 service \u5757\uff0c\u8fd9\u91cc\u901a\u8fc7\u6ce8\u91ca\u5b9a\u4e49\u4e86UserStub\u8def\u7531\u51fd\u6570\u7684\u884c\u4e3a\uff0c\u8fd9\u4e9b\u6ce8\u91ca\u90fd\u662f\u901a\u8fc7 pait: \u5f00\u5934\uff0c\u7136\u540e\u8ddf\u7740\u7684\u662f\u4e00\u6bb5json\u6570\u636e\uff0c\u5177\u4f53\u5982\u4e0b\uff1a // \u5b9a\u4e49\u4e86\u6574\u4e2aUser\u670d\u52a1\u751f\u6210\u7684\u8def\u7531\u51fd\u6570\u7684group\u90fd\u662fuser, tag\u90fd\u662fgrpc-user(\u540e\u9762\u8ddf\u7740\u7684grpc_user_service\u662f\u5bf9\u5e94\u7684\u6587\u6863\u63cf\u8ff0) // pait: {\"group\": \"user\", \"tag\": [[\"grpc-user\", \"grpc_user_service\"]]} service User { // \u5b9a\u4e49\u4e0d\u8981\u751f\u6210get_uid_by_token\u7684\u8def\u7531\u51fd\u6570 // pait: {\"enable\": false} rpc get_uid_by_token ( GetUidByTokenRequest ) returns ( GetUidByTokenResult ); // \u5b9a\u4e49logout_user \u51fd\u6570\u7684summary\u548curl // pait: {\"summary\": \"User exit from the system\", \"url\": \"/user/logout\"} rpc logout_user ( LogoutUserRequest ) returns ( google.protobuf.Empty ); // pait: {\"summary\": \"User login to system\", \"url\": \"/user/login\"} rpc login_user ( LoginUserRequest ) returns ( LoginUserResult ); // pait: {\"tag\": [[\"grpc-user\", \"grpc_user_service\"], [\"grpc-user-system\", \"grpc_user_service\"]]} // pait: {\"summary\": \"Create users through the system\", \"url\": \"/user/create\"} rpc create_user ( CreateUserRequest ) returns ( google.protobuf.Empty ); // pait: {\"url\": \"/user/delete\", \"tag\": [[\"grpc-user\", \"grpc_user_service\"], [\"grpc-user-system\", \"grpc_user_service\"]]} // pait: {\"desc\": \"This interface performs a logical delete, not a physical delete\"} rpc delete_user ( DeleteUserRequest ) returns ( google.protobuf.Empty ); } \u8fd9\u4efd\u6587\u4ef6\u7684\u6ce8\u91ca\u90fd\u662f\u901a\u8fc7 pait: \u5f00\u5934\uff0c\u7136\u540e\u8ddf\u7740\u4e00\u6bb5json\u6570\u636e\uff0c\u76ee\u524d\u89e3\u6790\u65b9\u6cd5\u5e76\u4e0d\u662f\u975e\u5e38\u7684\u667a\u80fd\uff0c\u6240\u4ee5\u4e0d\u652f\u6301\u6362\u884c\uff0c\u5982\u679c\u5b9a\u4e49\u7684\u5c5e\u6027\u8fc7\u591a\u5219\u9700\u8981\u53e6\u8d77\u4e00\u884c\u6ce8\u91ca\uff0c\u8fd9\u884c\u6ce8\u91ca\u4e5f\u9700\u8981\u4ee5 pait: \u5f00\u5934\uff0c\u540c\u65f6\u6ce8\u91ca\u4e00\u5b9a\u8981\u5199\u5728\u5bf9\u5e94\u65b9\u6cd5\u7684\u524d\u9762\u3002\u5982\u679cservice\u5b9a\u4e49\u4e86\u5bf9\u5e94\u7684\u5c5e\u6027\uff0c\u800crpc\u65b9\u6cd5\u6ca1\u6709\u5b9a\u4e49\uff0c\u5219\u5728\u751f\u4ea7rpc\u65b9\u6cd5\u5bf9\u5e94\u7684\u8def\u7531\u65f6\u4f1a\u91c7\u7528service\u5b9a\u4e49\u7684\u5c5e\u6027\u3002 \u76ee\u524d\u652f\u6301\u7684\u53ef\u5b9a\u4e49\u7684\u5c5e\u6027\u5982\u4e0b: name: \u8def\u7531\u51fd\u6570\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32 tag: \u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684tag\u5217\u8868\uff0c\u5217\u8868\u5185\u5fc5\u987b\u662f\u4e00\u4e2a\u5143\u7956\uff0c\u5206\u522b\u4e3atag\u7684\u540d\u548ctag\u7684\u63cf\u8ff0 group\uff1a\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684group summary: \u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684\u63cf\u8ff0 url: \u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684url enable: \u662f\u5426\u8981\u751f\u6210\u5bf9\u5e94\u65b9\u6cd5\u7684\u8def\u7531\uff0c\u9ed8\u8ba4\u4e3afalse 5.\u901a\u8fc7Protobuf\u6587\u4ef6\u6ce8\u91ca\u5b9a\u4e49Message\u7684\u5c5e\u6027 \u5728\u751f\u6210\u8def\u7531\u51fd\u6570\u65f6\uff0c GrpcGatewayRoute \u4f1a\u628a\u65b9\u6cd5\u5bf9\u5e94\u7684\u8bf7\u6c42message\u548c\u54cd\u5e94message\u89e3\u6790\u4e3a\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u7684\u7c7b\u578b\u90fd\u4e3a pydantic.BaseModel \uff0c\u4e4b\u540e Pait \u5c31\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5e94\u7684 pydantic.BaseModel \u5bf9\u8c61\u6765\u751f\u6210\u6587\u6863\u6216\u8005\u505a\u53c2\u6570\u6821\u9a8c\u3002 \u76ee\u524d\u4e5f\u662f\u901a\u8fc7\u6ce8\u91ca\u6765\u5b9a\u4e49Message\u7684\u6bcf\u4e2a\u5b57\u6bb5\u5bf9\u5e94\u7684Field\u5bf9\u8c61\u5c5e\u6027\uff0c\u4e0d\u8fc7 Python \u7684gRPC\u5728\u901a\u8fc7Protobuf\u6587\u4ef6\u751f\u6210\u5bf9\u5e94\u7684Python\u5bf9\u8c61\u65f6\uff0c\u5e76\u4e0d\u4f1a\u628a\u5bf9\u5e94\u7684\u6ce8\u91ca\u5e26\u8fc7\u6765\uff0c\u6240\u4ee5 GrpcGatewayRoute \u9700\u8981\u901a\u8fc7 parse_msg_desc \u53c2\u6570\u6765\u77e5\u9053\u8981\u89e3\u6790\u7684\u6765\u6e90\u6587\u4ef6\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u6765\u6e90\u6587\u4ef6\u7684\u6ce8\u91ca\u6700\u7ec8\u90fd\u662f\u901a\u8fc7Protobuf\u6587\u4ef6\u7684\u6ce8\u91ca\u751f\u6210\u7684\uff0c\u6bd4\u5982 user.proto \u6587\u4ef6\u7684 CreateUserRequest \uff0c\u5b83\u7684\u6ce8\u91ca\u5982\u4e0b\uff1a message CreateUserRequest { // \u901a\u5e38Protobuf\u7684Message\u90fd\u6709\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u6307\u5b9amiss_default\u4e3atrue\uff0c\u5219\u4e0d\u4f1a\u4f7f\u7528gRPC\u7684\u9ed8\u8ba4\u503c // pait: {\"miss_default\": true, \"example\": \"10086\", \"title\": \"UID\", \"description\": \"user union id\"} string uid = 1 ; // pait: {\"description\": \"user name\"} // pait: {\"default\": \"\", \"min_length\": 1, \"max_length\": \"10\", \"example\": \"so1n\"} string user_name = 2 ; // pait: {\"description\": \"user password\"} // pait: {\"alias\": \"pw\", \"min_length\": 6, \"max_length\": 18, \"example\": \"123456\"} string password = 3 ; SexType sex = 4 ; } \u4e4b\u540e\u751f\u6210\u7684\u6587\u6863\u4e2d\u5173\u4e8e CreateUserRequest \u7684\u5c55\u793a\u5982\u4e0b: \u53ef\u4ee5\u53d1\u73b0Message\u6ce8\u91ca\u7f16\u5199\u7684\u65b9\u6cd5\u4e0eService\u7684\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u662f\u5c5e\u6027\u4e0d\u540c\uff0cMessage\u652f\u6301\u7684\u5c5e\u6027\u9664\u4e86 miss_default \u5916\uff0c\u4e0e Pait \u7684Field\u5bf9\u8c61\u4e00\u81f4\uff0c miss_default \u9ed8\u8ba4\u4e3afalse\uff0c\u5982\u679c\u4e3atrue,\u5219\u4ee3\u8868\u8be5\u5b57\u6bb5\u6ca1\u6709\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u4e3afalse\uff0c\u5219\u4ee3\u8868\u8be5\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u4e3aProtobuf\u5bf9\u5e94\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u3002 \u652f\u6301\u7684\u5c5e\u6027\u5217\u8868 miss_default example alias title description const gt ge lt le min_length max_length min_items max_items multiple_of regex extra","title":"gRPC Gateway"},{"location":"7_gRPC_gateway/#1","text":"gRPC\u57fa\u4e8eHTTP/2.0\u8fdb\u884c\u901a\u4fe1\uff0c\u7406\u8bba\u4e0a\u5f88\u5bb9\u6613\u81ea\u52a8\u8f6c\u6362\u6210\u4e00\u4e2aRESTful\u63a5\u53e3\uff0c\u6240\u4ee5 Go gRPC \u5f88\u5bb9\u6613\u7684\u5c31\u80fd\u5b9e\u73b0 gRPC GatwWay \u529f\u80fd\uff0c\u5982 grpc-gateway \u3002\u4f46\u662f Python gRPC \u5374\u5f88\u96be\u505a\u5230\uff0c\u56e0\u4e3a\u5b83\u4e0d\u50cf Go gRPC \u4e00\u6837\u662f\u4f7f\u7528Go\u8bed\u8a00\u7f16\u5199\u7684\u5e93\uff0c\u800c\u662f\u7528C\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u540c\u65f6 Python gRPC \u63d0\u4f9b\u7684API\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5 Python \u8981\u5199\u4e00\u4e2a\u8f6c\u53d1HTTP\u8bf7\u6c42\u5230gRPC\u670d\u52a1\u6bd4\u8f83\u9ebb\u70e6\uff0c\u800c Pait \u63d0\u4f9b\u7684 gRPC GateWay \u529f\u80fd\u53ef\u4ee5\u4e3a\u5f00\u53d1\u8005\u4ee5\u6700\u5c0f\u7684\u4ee3\u7801\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 gRPC Gateway \u3002 Note Pait \u63d0\u4f9b\u7684 gRPC GateWay \u529f\u80fd\u5b9e\u9645\u4e0a\u662f\u7c7b\u4f3c\u4e00\u4e2a\u4ee3\u7406\u670d\u52a1\uff0c\u5b83\u4f1a\u628aHTTP\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u8bf7\u6c42\u8f6c\u4e3a\u5bf9\u5e94\u7684Msg\u5bf9\u8c61\uff0c\u518d\u901a\u8fc7channel\u53d1\u9001\u7ed9gRPC\u670d\u52a1\u7aef\uff0c\u6700\u540e\u628agRPC\u670d\u52a1\u7aef\u8fd4\u56de\u7684Msg\u5bf9\u8c61\u8f6c\u4e3a\u6846\u67b6\u5bf9\u5e94\u7684Json\u54cd\u5e94\u8fd4\u56de\u7ed9HTTP\u5ba2\u6237\u7aef\u3002","title":"1.\u4ecb\u7ecd"},{"location":"7_gRPC_gateway/#2","text":"gRPC GateWay \u7684\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c \u4ee3\u7801\u4f8b\u5b50\u5982\u4e0b\uff1a from typing import Any import grpc from starlette.applications import Starlette from pait.app.starlette.grpc_route import GrpcGatewayRoute from pait.app.starlette import AddDocRoute from pait.util.grpc_inspect.message_to_pydantic import grpc_timestamp_int_handler # \u5f15\u5165\u6839\u636eProtobuf\u6587\u4ef6\u751f\u6210\u7684\u5bf9\u5e94\u4ee3\u7801 from example.example_grpc.python_example_proto_code.example_proto.user import user_pb2_grpc from example.example_grpc.python_example_proto_code.example_proto.book import social_pb2_grpc , manager_pb2_grpc def create_app () -> Starlette : app : Starlette = Starlette () # \u4e3aapp\u6ce8\u518cUserStub,BookSocialStub\u548cBookManagerStub\u7684\u8def\u7531\u51fd\u6570 grpc_gateway_route : GrpcGatewayRoute = GrpcGatewayRoute ( app , # \u4f20\u5165\u5bf9\u5e94\u7684Stub\u7c7b user_pb2_grpc . UserStub , social_pb2_grpc . BookSocialStub , manager_pb2_grpc . BookManagerStub , # \u6307\u5b9aurl\u5f00\u5934 prefix = \"/api\" , # \u6307\u5b9a\u751f\u6210\u7684\u8def\u7531\u51fd\u6570\u540d\u7684\u5f00\u5934 title = \"Grpc\" , # \u6307\u5b9aTimestamp\u7684\u89e3\u6790\u65b9\u6cd5 grpc_timestamp_handler_tuple = ( int , grpc_timestamp_int_handler ), # \u89c1\u4e0b\u9762\u8bf4\u660e parse_msg_desc = \"by_mypy\" , ) def _before_server_start ( * _ : Any ) -> None : # \u542f\u52a8\u65f6\u6ce8\u518c\u5bf9\u5e94\u7684channel,\u8fd9\u6837\u6ce8\u518c\u7684\u8def\u7531\u51fd\u6570\u5728\u63a5\u6536\u8bf7\u6c42\u65f6\u53ef\u4ee5\u628a\u53c2\u6570\u901a\u8fc7grpc.channel\u4f20\u7ed9grpc\u670d\u52a1\u7aef grpc_gateway_route . init_channel ( grpc . aio . insecure_channel ( \"0.0.0.0:9000\" )) async def _after_server_stop ( * _ : Any ) -> None : # \u5173\u95ed\u65f6\u5173\u95ed\u5efa\u7acb\u7684channel await grpc_gateway_route . channel . close () app . add_event_handler ( \"startup\" , _before_server_start ) app . add_event_handler ( \"shutdown\" , _after_server_stop ) # \u6ce8\u518c\u6587\u6863\u8def\u7531\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u7684\u770b\u51faGrpcGateWayRoute\u7684\u8def\u7531\u51fd\u6570\u662f\u4ec0\u4e48 AddDocRoute ( prefix = \"/api-doc\" , title = \"Pait Api Doc\" ) . gen_route ( app ) return app if __name__ == \"__main__\" : import uvicorn # type: ignore from pait.extra.config import apply_block_http_method_set from pait.g import config config . init_config ( apply_func_list = [ apply_block_http_method_set ({ \"HEAD\" , \"OPTIONS\" })] ) uvicorn . run ( create_app (), log_level = \"debug\" ) \u8fd0\u884c\u4ee3\u7801\u540e\uff0c\u8bbf\u95ee\u5bf9\u5e94\u7684\u94fe\u63a5 http://127.0.0.1:8000/api-doc/swagge \u5c31\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u9875\u9762\uff1a \u9875\u9762\u4e2d\u7684API\u90fd\u662f GrpcGatewayRoute \u901a\u8fc7\u89e3\u6790Protobuf\u751f\u6210\u7684Stub\u7c7b\u751f\u6210\u7684\uff0c\u5177\u4f53\u7684Protobuf\u6587\u4ef6\u53ef\u4ee5\u8bbf\u95ee example_proto \u4e86\u89e3\u3002 Note \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0d\u901a\u8fc7 GrpcGatewayRoute \u7684 init_channel \u65b9\u6cd5\u6307\u5b9agrpc.channel\uff0c\u90a3\u4e48\u8def\u7531\u51fd\u6570\u6536\u5230\u8bf7\u6c42\u540e\u65e0\u6cd5\u628a\u8be5\u8bf7\u6c42\u8f6c\u6210grpc\u8bf7\u6c42\u53d1\u9001\u7ed9\u5bf9\u5e94\u7684gRPC\u670d\u52a1\u3002","title":"2.\u4f7f\u7528"},{"location":"7_gRPC_gateway/#3","text":"GrpcGatewayRoute \u63d0\u4f9b\u7684\u53c2\u6570\u90fd\u4f1a\u5e94\u7528\u5230\u6240\u6709Stub\u4e2d\uff0c\u5982\u679c\u6bcf\u4e2aStub\u9700\u8981\u5e94\u7528\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u5219\u53ef\u4ee5\u5206\u5f00\u6ce8\u518cStub\uff0c GrpcGatewayRoute \u652f\u6301\u7684\u53c2\u6570\u5982\u4e0b: app: \u5fc5\u586b\uff0c\u4e14\u5fc5\u987b\u662f\u5bf9\u5e94\u7684app\u5b9e\u4f8b\uff0c GrpcGatewayRoute \u4f1a\u628aStub\u751f\u6210\u7684\u8def\u7531\u51fd\u6570\u6ce8\u518c\u5230\u5bf9\u5e94\u7684app\u5b9e\u4f8b\u4e2d\u3002 stub: \u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u7684stub\u53c2\u6570\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f20\u5165\u7684Stub\u5fc5\u987b\u662f\u7531Protobuf\u751f\u6210\u7684gRPC Stub\u7c7b\u3002 prefix: \u751f\u6210\u8def\u7531\u51fd\u6570\u7684URL\u524d\u7f00\uff0c\u5047\u5982 prefix \u4e3a /api \uff0cStub\u7c7b\u7684\u4e00\u4e2agRPC\u65b9\u6cd5\u5bf9\u5e94\u7684URL\u4e3a /user.User/get_uid_by_token \uff0c\u90a3\u4e48\u751f\u6210\u7684URL\u5219\u662f /api/user.User/get_uid_by_token \u3002 title: \u751f\u6210\u8def\u7531\u51fd\u6570\u540d\u662f\u7531title\u4ee5\u53ca\u4e00\u4e2agRPC\u65b9\u6cd5\u7684\u65b9\u6cd5\u540d\u51b3\u5b9a\u7684\uff0c\u5982\u679c\u4e00\u4e2aapp\u5b9e\u4f8b\u7ed1\u5b9a\u8fc7\u4e2a\u76f8\u540c\u7684Stub\u7c7b\uff0c\u5219title\u5fc5\u987b\u4e0d\u540c\u3002\uff08\u5bf9\u4e8e Tornado \uff0c\u662f\u901a\u8fc7title\u548cgRPC\u65b9\u6cd5\u540d\u6765\u5b9a\u4e49\u5bf9\u5e94Handler\u7c7b\u7684\u540d\u79f0\u3002\uff09 parse_msg_desc: \u6307\u5b9a\u8981\u89e3\u6790msg\u6ce8\u91ca\u7684\u7c7b\u578b\uff0c\u5982\u679c\u586b\u5165\u7684\u503c\u4e3a by_mypy \uff0c\u5219\u4f1a\u89e3\u6790\u901a\u8fc7 mypy-protobuf \u63d2\u4ef6\u751f\u6210\u7684pyi\u6587\u4ef6\uff0c\u5982\u679c\u586b\u5165\u7684\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u5219\u4f1a\u89e3\u6790\u5bf9\u5e94\u8def\u5f84\u4e0b\u7684Protobuf\u6587\u4ef6\u3002 msg_to_dict: \u9ed8\u8ba4\u4e3a google.protobuf.json_format.MessageToDict \u3002\u8def\u7531\u51fd\u6570\u6536\u5230gRPC\u670d\u52a1\u8fd4\u56de\u7684Message\u5bf9\u8c61\u540e\uff0c\u4f1a\u901a\u8fc7msg_to_dict\u8f6c\u4e3aPython\u7684dict\u5bf9\u8c61\uff0c\u518d\u8fd4\u56dejson\u5230\u5ba2\u6237\u7aef\u3002 parse_dict: \u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u8be5\u53c2\u6570\u4ec5\u652f\u6301 google.protobuf.json_format.ParseDict \u4ee5\u53ca\u5b83\u7684\u53d8\u4f53\u3002\u8def\u7531\u51fd\u6570\u6536\u5230HTTP\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u540e\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u8f6c\u4e3agRPC\u65b9\u6cd5\u9700\u8981\u7684Message\u5bf9\u8c61\u3002 pait: \u7528\u4e8e\u88c5\u9970\u8def\u7531\u51fd\u6570\u7684 pait \u88c5\u9970\u5668\u5bf9\u8c61\u3002 make_response: \u8d1f\u8d23\u628a\u8def\u7531\u51fd\u6570\u8fd4\u56de\u7684Dict\u5bf9\u8c61\u8f6c\u4e3a\u5bf9\u5e94Web\u6846\u67b6\u7684Json\u54cd\u5e94\u5bf9\u8c61\u3002 url_handler: \u7528\u4e8e\u66f4\u6539gRPC\u81ea\u5e26\u7684URL\uff0c\u9ed8\u8ba4\u4f1a\u628agRPC\u65b9\u6cd5\u7684 . \u6539\u4e3a - \u3002 request_param_field_dict: \u6307\u5b9a\u4e00\u4e2a\u53c2\u6570\u540d\u5bf9\u5e94\u7684field\u5bf9\u8c61\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u662f\u4f1a\u5e94\u7528\u5230\u6240\u6709\u7684Stub\u5bf9\u8c61\u3002 grpc_timestamp_handler_tuple: \u8be5\u65b9\u6cd5\u652f\u6301\u4f20\u5165\u4e00\u4e2a(type, callback)\u7684\u6570\u7ec4\uff0ctype\u4ee3\u8868\u5b57\u6bb5\u5bf9\u5e94\u7684\u7c7b\u578b\uff0ccallback\u4ee3\u8868\u8f6c\u6362\u65b9\u6cd5\uff0c\u5b57\u6bb5\u7684\u7c7b\u578b\u4e3aTimestamp\u65f6\u4f1a\u542f\u7528\u3002\u56e0\u4e3agRPC\u7684Timestamp\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ea\u652f\u6301\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u6240\u4ee5\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u6765\u652f\u6301\u5176\u5b83\u7c7b\u578b\u8f6c\u4e3agRPC Timestamp\u5bf9\u8c61\uff0c\u6bd4\u5982\u628aint\u7c7b\u578b\u8f6c\u4e3aTimestamp\u5bf9\u8c61\uff0c\u5219\u5bf9\u5e94\u7684callback\u53ef\u4ee5\u5199\u4e3a: def grpc_timestamp_int_handler ( cls : Any , v : int ) -> Timestamp : t : Timestamp = Timestamp () if v : t . FromDatetime ( datetime . datetime . fromtimestamp ( v )) return t","title":"3.\u53c2\u6570\u4ecb\u7ecd"},{"location":"7_gRPC_gateway/#4protobuf","text":"\u901a\u8fc7Swagger\u9875\u9762\u53ef\u4ee5\u53d1\u73b0\uff0cUserStub\u76f8\u5173\u7684\u8def\u7531\u51fd\u6570\u7684url\u4e0e\u5176\u5b83Stub\u7684\u8def\u7531\u51fd\u6570\u4e0d\u4e00\u6837\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728Protobuf\u4e2d\u901a\u8fc7\u6ce8\u91ca\u5b9a\u4e49\u4e86UserStub\u751f\u6210\u8def\u7531\u51fd\u6570\u7684\u4e00\u4e9b\u884c\u4e3a\u3002\u6bd4\u5982UserStub\u5bf9\u5e94\u7684 user.proto \u6587\u4ef6\u7684 service \u5757\uff0c\u8fd9\u91cc\u901a\u8fc7\u6ce8\u91ca\u5b9a\u4e49\u4e86UserStub\u8def\u7531\u51fd\u6570\u7684\u884c\u4e3a\uff0c\u8fd9\u4e9b\u6ce8\u91ca\u90fd\u662f\u901a\u8fc7 pait: \u5f00\u5934\uff0c\u7136\u540e\u8ddf\u7740\u7684\u662f\u4e00\u6bb5json\u6570\u636e\uff0c\u5177\u4f53\u5982\u4e0b\uff1a // \u5b9a\u4e49\u4e86\u6574\u4e2aUser\u670d\u52a1\u751f\u6210\u7684\u8def\u7531\u51fd\u6570\u7684group\u90fd\u662fuser, tag\u90fd\u662fgrpc-user(\u540e\u9762\u8ddf\u7740\u7684grpc_user_service\u662f\u5bf9\u5e94\u7684\u6587\u6863\u63cf\u8ff0) // pait: {\"group\": \"user\", \"tag\": [[\"grpc-user\", \"grpc_user_service\"]]} service User { // \u5b9a\u4e49\u4e0d\u8981\u751f\u6210get_uid_by_token\u7684\u8def\u7531\u51fd\u6570 // pait: {\"enable\": false} rpc get_uid_by_token ( GetUidByTokenRequest ) returns ( GetUidByTokenResult ); // \u5b9a\u4e49logout_user \u51fd\u6570\u7684summary\u548curl // pait: {\"summary\": \"User exit from the system\", \"url\": \"/user/logout\"} rpc logout_user ( LogoutUserRequest ) returns ( google.protobuf.Empty ); // pait: {\"summary\": \"User login to system\", \"url\": \"/user/login\"} rpc login_user ( LoginUserRequest ) returns ( LoginUserResult ); // pait: {\"tag\": [[\"grpc-user\", \"grpc_user_service\"], [\"grpc-user-system\", \"grpc_user_service\"]]} // pait: {\"summary\": \"Create users through the system\", \"url\": \"/user/create\"} rpc create_user ( CreateUserRequest ) returns ( google.protobuf.Empty ); // pait: {\"url\": \"/user/delete\", \"tag\": [[\"grpc-user\", \"grpc_user_service\"], [\"grpc-user-system\", \"grpc_user_service\"]]} // pait: {\"desc\": \"This interface performs a logical delete, not a physical delete\"} rpc delete_user ( DeleteUserRequest ) returns ( google.protobuf.Empty ); } \u8fd9\u4efd\u6587\u4ef6\u7684\u6ce8\u91ca\u90fd\u662f\u901a\u8fc7 pait: \u5f00\u5934\uff0c\u7136\u540e\u8ddf\u7740\u4e00\u6bb5json\u6570\u636e\uff0c\u76ee\u524d\u89e3\u6790\u65b9\u6cd5\u5e76\u4e0d\u662f\u975e\u5e38\u7684\u667a\u80fd\uff0c\u6240\u4ee5\u4e0d\u652f\u6301\u6362\u884c\uff0c\u5982\u679c\u5b9a\u4e49\u7684\u5c5e\u6027\u8fc7\u591a\u5219\u9700\u8981\u53e6\u8d77\u4e00\u884c\u6ce8\u91ca\uff0c\u8fd9\u884c\u6ce8\u91ca\u4e5f\u9700\u8981\u4ee5 pait: \u5f00\u5934\uff0c\u540c\u65f6\u6ce8\u91ca\u4e00\u5b9a\u8981\u5199\u5728\u5bf9\u5e94\u65b9\u6cd5\u7684\u524d\u9762\u3002\u5982\u679cservice\u5b9a\u4e49\u4e86\u5bf9\u5e94\u7684\u5c5e\u6027\uff0c\u800crpc\u65b9\u6cd5\u6ca1\u6709\u5b9a\u4e49\uff0c\u5219\u5728\u751f\u4ea7rpc\u65b9\u6cd5\u5bf9\u5e94\u7684\u8def\u7531\u65f6\u4f1a\u91c7\u7528service\u5b9a\u4e49\u7684\u5c5e\u6027\u3002 \u76ee\u524d\u652f\u6301\u7684\u53ef\u5b9a\u4e49\u7684\u5c5e\u6027\u5982\u4e0b: name: \u8def\u7531\u51fd\u6570\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32 tag: \u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684tag\u5217\u8868\uff0c\u5217\u8868\u5185\u5fc5\u987b\u662f\u4e00\u4e2a\u5143\u7956\uff0c\u5206\u522b\u4e3atag\u7684\u540d\u548ctag\u7684\u63cf\u8ff0 group\uff1a\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684group summary: \u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684\u63cf\u8ff0 url: \u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684url enable: \u662f\u5426\u8981\u751f\u6210\u5bf9\u5e94\u65b9\u6cd5\u7684\u8def\u7531\uff0c\u9ed8\u8ba4\u4e3afalse","title":"4.\u901a\u8fc7Protobuf\u6587\u4ef6\u6ce8\u91ca\u5b9a\u4e49\u8def\u7531\u7684\u5c5e\u6027"},{"location":"7_gRPC_gateway/#5protobufmessage","text":"\u5728\u751f\u6210\u8def\u7531\u51fd\u6570\u65f6\uff0c GrpcGatewayRoute \u4f1a\u628a\u65b9\u6cd5\u5bf9\u5e94\u7684\u8bf7\u6c42message\u548c\u54cd\u5e94message\u89e3\u6790\u4e3a\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u7684\u7c7b\u578b\u90fd\u4e3a pydantic.BaseModel \uff0c\u4e4b\u540e Pait \u5c31\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5e94\u7684 pydantic.BaseModel \u5bf9\u8c61\u6765\u751f\u6210\u6587\u6863\u6216\u8005\u505a\u53c2\u6570\u6821\u9a8c\u3002 \u76ee\u524d\u4e5f\u662f\u901a\u8fc7\u6ce8\u91ca\u6765\u5b9a\u4e49Message\u7684\u6bcf\u4e2a\u5b57\u6bb5\u5bf9\u5e94\u7684Field\u5bf9\u8c61\u5c5e\u6027\uff0c\u4e0d\u8fc7 Python \u7684gRPC\u5728\u901a\u8fc7Protobuf\u6587\u4ef6\u751f\u6210\u5bf9\u5e94\u7684Python\u5bf9\u8c61\u65f6\uff0c\u5e76\u4e0d\u4f1a\u628a\u5bf9\u5e94\u7684\u6ce8\u91ca\u5e26\u8fc7\u6765\uff0c\u6240\u4ee5 GrpcGatewayRoute \u9700\u8981\u901a\u8fc7 parse_msg_desc \u53c2\u6570\u6765\u77e5\u9053\u8981\u89e3\u6790\u7684\u6765\u6e90\u6587\u4ef6\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u6765\u6e90\u6587\u4ef6\u7684\u6ce8\u91ca\u6700\u7ec8\u90fd\u662f\u901a\u8fc7Protobuf\u6587\u4ef6\u7684\u6ce8\u91ca\u751f\u6210\u7684\uff0c\u6bd4\u5982 user.proto \u6587\u4ef6\u7684 CreateUserRequest \uff0c\u5b83\u7684\u6ce8\u91ca\u5982\u4e0b\uff1a message CreateUserRequest { // \u901a\u5e38Protobuf\u7684Message\u90fd\u6709\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u6307\u5b9amiss_default\u4e3atrue\uff0c\u5219\u4e0d\u4f1a\u4f7f\u7528gRPC\u7684\u9ed8\u8ba4\u503c // pait: {\"miss_default\": true, \"example\": \"10086\", \"title\": \"UID\", \"description\": \"user union id\"} string uid = 1 ; // pait: {\"description\": \"user name\"} // pait: {\"default\": \"\", \"min_length\": 1, \"max_length\": \"10\", \"example\": \"so1n\"} string user_name = 2 ; // pait: {\"description\": \"user password\"} // pait: {\"alias\": \"pw\", \"min_length\": 6, \"max_length\": 18, \"example\": \"123456\"} string password = 3 ; SexType sex = 4 ; } \u4e4b\u540e\u751f\u6210\u7684\u6587\u6863\u4e2d\u5173\u4e8e CreateUserRequest \u7684\u5c55\u793a\u5982\u4e0b: \u53ef\u4ee5\u53d1\u73b0Message\u6ce8\u91ca\u7f16\u5199\u7684\u65b9\u6cd5\u4e0eService\u7684\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u662f\u5c5e\u6027\u4e0d\u540c\uff0cMessage\u652f\u6301\u7684\u5c5e\u6027\u9664\u4e86 miss_default \u5916\uff0c\u4e0e Pait \u7684Field\u5bf9\u8c61\u4e00\u81f4\uff0c miss_default \u9ed8\u8ba4\u4e3afalse\uff0c\u5982\u679c\u4e3atrue,\u5219\u4ee3\u8868\u8be5\u5b57\u6bb5\u6ca1\u6709\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u4e3afalse\uff0c\u5219\u4ee3\u8868\u8be5\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u4e3aProtobuf\u5bf9\u5e94\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u3002 \u652f\u6301\u7684\u5c5e\u6027\u5217\u8868 miss_default example alias title description const gt ge lt le min_length max_length min_items max_items multiple_of regex extra","title":"5.\u901a\u8fc7Protobuf\u6587\u4ef6\u6ce8\u91ca\u5b9a\u4e49Message\u7684\u5c5e\u6027"},{"location":"8_other/","text":"\u9690\u5f0f\u5f15\u5165\u4e0e\u663e\u5f0f\u5f15\u5165 pait \u5bf9\u591a\u4e2a\u6846\u67b6\u90fd\u63d0\u4f9b\u652f\u6301, \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u4e2d\u53ea\u5b89\u88c5\u4e86\u5176\u4e2d\u7684\u4e00\u4e2a\u6846\u67b6, \u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u9690\u5f0f\u5f15\u5165: from pait.app import add_doc_route , load_app , pait \u4f46\u662f\u5982\u679c\u540c\u65f6\u5b89\u88c5\u4e86\u591a\u4e2a\u6846\u67b6, \u90a3\u4e48\u4e0a\u9762\u7684\u5f15\u5165\u4f1a\u629b\u51fa\u9519\u8bef, \u5efa\u8bae\u4f7f\u7528\u663e\u793a\u5f15\u5165, \u5982: from pait.app.starlette import add_doc_route , load_app , pait data\u4e0eload_app data \u7531\u4e8e pait \u7684\u901a\u8fc7\u4e00\u4e2a\u88c5\u9970\u5668\u6765\u63d0\u4f9b\u529f\u80fd\u652f\u6301, \u6240\u4ee5\u5728\u7f16\u8bd1\u5668\u542f\u52a8\u65f6, \u6240\u6709\u6570\u636e\u90fd\u6ce8\u5165\u5230data\u4e2d, \u4e3a\u540e\u7eed\u7684\u6587\u6863\u751f\u6210\u7b49\u529f\u80fd\u63d0\u4f9b\u652f\u6301\u3002 load_app data\u91cc\u9762\u6709\u5f88\u591a\u8def\u7531\u51fd\u6570\u7684\u4fe1\u606f, \u4f46\u662f\u4f1a\u7f3a\u5c11\u5173\u952e\u7684\u53c2\u6570\u5982 url , method \u7b49\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u4f7f\u7528load_app\u628a\u76f8\u5173\u53c2\u6570\u4e0e pait \u88c5\u9970\u5668\u88c5\u9970\u7684\u8def\u7531\u51fd\u6570\u6570\u636e\u5728data\u4e2d\u7ed1\u5b9a, \u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355, \u4e0d\u8fc7\u8981\u8bb0\u4f4f, \u4e00\u5b9a\u8981\u5728\u6ce8\u518c\u6240\u6709\u8def\u7531\u540e\u518d\u8c03\u7528: from starlette.applications import Starlette from pait.app.starlette import load_app app : Starlette = Starlette () # \u9519\u8bef\u7684 load_app ( app ) # -------- # app.add_route # -------- # \u6210\u529f\u7684 load_app ( app ) \u5982\u4f55\u5728\u5176\u5b83Web\u6846\u67b6\u4f7f\u7528Pait \u76ee\u524d Pait \u8fd8\u5728\u5feb\u901f\u8fed\u4ee3\u4e2d\uff0c\u6240\u4ee5\u8fd8\u662f\u4ee5\u529f\u80fd\u5f00\u53d1\u4e3a\u4e3b\uff0c\u5982\u679c\u8981\u5728\u5176\u4ed6\u5c1a\u672a\u652f\u6301\u7684\u6846\u67b6\u4e2d\u4f7f\u7528 Pait , \u6216\u8005\u8981\u5bf9\u529f\u80fd\u8fdb\u884c\u62d3\u5c55, \u53ef\u4ee5\u53c2\u7167\u4e24\u4e2a\u6846\u67b6\u8fdb\u884c\u7b80\u5355\u7684\u9002\u914d\u5373\u53ef. \u540c\u6b65\u7c7b\u578b\u7684web\u6846\u67b6\u8bf7\u53c2\u7167 pait.app.flask \u5f02\u6b65\u7c7b\u578b\u7684web\u6846\u67b6\u8bf7\u53c2\u7167 pait.app.starlette IDE\u652f\u6301 pait\u7684\u7c7b\u578b\u6821\u9a8c\u548c\u8f6c\u6362\u4ee5\u53ca\u7c7b\u578b\u62d3\u5c55\u5f97\u76ca\u4e8e Pydantic ,\u540c\u65f6\u4e5f\u4ece pydantic \u6216\u5f97\u5230IDE\u7684\u652f\u6301\uff0c\u76ee\u524d\u652f\u6301 Pycharm \u548c Mypy - PyCharm plugin - Mypy plugin \u793a\u4f8b\u4ee3\u7801 \u66f4\u591a\u5b8c\u6574\u793a\u4f8b\u8bf7\u53c2\u8003 example \u53d1\u884c\u8bf4\u660e \u8be6\u7ec6\u7684\u53d1\u7248\u8bf4\u660e\u89c1 CHANGELOG","title":"Other"},{"location":"8_other/#_1","text":"pait \u5bf9\u591a\u4e2a\u6846\u67b6\u90fd\u63d0\u4f9b\u652f\u6301, \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u4e2d\u53ea\u5b89\u88c5\u4e86\u5176\u4e2d\u7684\u4e00\u4e2a\u6846\u67b6, \u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u9690\u5f0f\u5f15\u5165: from pait.app import add_doc_route , load_app , pait \u4f46\u662f\u5982\u679c\u540c\u65f6\u5b89\u88c5\u4e86\u591a\u4e2a\u6846\u67b6, \u90a3\u4e48\u4e0a\u9762\u7684\u5f15\u5165\u4f1a\u629b\u51fa\u9519\u8bef, \u5efa\u8bae\u4f7f\u7528\u663e\u793a\u5f15\u5165, \u5982: from pait.app.starlette import add_doc_route , load_app , pait","title":"\u9690\u5f0f\u5f15\u5165\u4e0e\u663e\u5f0f\u5f15\u5165"},{"location":"8_other/#dataload_app","text":"data \u7531\u4e8e pait \u7684\u901a\u8fc7\u4e00\u4e2a\u88c5\u9970\u5668\u6765\u63d0\u4f9b\u529f\u80fd\u652f\u6301, \u6240\u4ee5\u5728\u7f16\u8bd1\u5668\u542f\u52a8\u65f6, \u6240\u6709\u6570\u636e\u90fd\u6ce8\u5165\u5230data\u4e2d, \u4e3a\u540e\u7eed\u7684\u6587\u6863\u751f\u6210\u7b49\u529f\u80fd\u63d0\u4f9b\u652f\u6301\u3002 load_app data\u91cc\u9762\u6709\u5f88\u591a\u8def\u7531\u51fd\u6570\u7684\u4fe1\u606f, \u4f46\u662f\u4f1a\u7f3a\u5c11\u5173\u952e\u7684\u53c2\u6570\u5982 url , method \u7b49\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u4f7f\u7528load_app\u628a\u76f8\u5173\u53c2\u6570\u4e0e pait \u88c5\u9970\u5668\u88c5\u9970\u7684\u8def\u7531\u51fd\u6570\u6570\u636e\u5728data\u4e2d\u7ed1\u5b9a, \u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355, \u4e0d\u8fc7\u8981\u8bb0\u4f4f, \u4e00\u5b9a\u8981\u5728\u6ce8\u518c\u6240\u6709\u8def\u7531\u540e\u518d\u8c03\u7528: from starlette.applications import Starlette from pait.app.starlette import load_app app : Starlette = Starlette () # \u9519\u8bef\u7684 load_app ( app ) # -------- # app.add_route # -------- # \u6210\u529f\u7684 load_app ( app )","title":"data\u4e0eload_app"},{"location":"8_other/#webpait","text":"\u76ee\u524d Pait \u8fd8\u5728\u5feb\u901f\u8fed\u4ee3\u4e2d\uff0c\u6240\u4ee5\u8fd8\u662f\u4ee5\u529f\u80fd\u5f00\u53d1\u4e3a\u4e3b\uff0c\u5982\u679c\u8981\u5728\u5176\u4ed6\u5c1a\u672a\u652f\u6301\u7684\u6846\u67b6\u4e2d\u4f7f\u7528 Pait , \u6216\u8005\u8981\u5bf9\u529f\u80fd\u8fdb\u884c\u62d3\u5c55, \u53ef\u4ee5\u53c2\u7167\u4e24\u4e2a\u6846\u67b6\u8fdb\u884c\u7b80\u5355\u7684\u9002\u914d\u5373\u53ef. \u540c\u6b65\u7c7b\u578b\u7684web\u6846\u67b6\u8bf7\u53c2\u7167 pait.app.flask \u5f02\u6b65\u7c7b\u578b\u7684web\u6846\u67b6\u8bf7\u53c2\u7167 pait.app.starlette","title":"\u5982\u4f55\u5728\u5176\u5b83Web\u6846\u67b6\u4f7f\u7528Pait"},{"location":"8_other/#ide","text":"pait\u7684\u7c7b\u578b\u6821\u9a8c\u548c\u8f6c\u6362\u4ee5\u53ca\u7c7b\u578b\u62d3\u5c55\u5f97\u76ca\u4e8e Pydantic ,\u540c\u65f6\u4e5f\u4ece pydantic \u6216\u5f97\u5230IDE\u7684\u652f\u6301\uff0c\u76ee\u524d\u652f\u6301 Pycharm \u548c Mypy - PyCharm plugin - Mypy plugin","title":"IDE\u652f\u6301"},{"location":"8_other/#_2","text":"\u66f4\u591a\u5b8c\u6574\u793a\u4f8b\u8bf7\u53c2\u8003 example","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"8_other/#_3","text":"\u8be6\u7ec6\u7684\u53d1\u7248\u8bf4\u660e\u89c1 CHANGELOG","title":"\u53d1\u884c\u8bf4\u660e"}]}