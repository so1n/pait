{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4ecb\u7ecd Pait \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684Python Api\u5f00\u53d1\u5de5\u5177\uff0c\u62e5\u6709\u53c2\u6570\u7c7b\u578b\u68c0\u67e5, \u7c7b\u578b\u8f6c\u6362\u548c\u63d0\u4f9b\u6587\u6863\u8f93\u51fa\u7b49\u529f\u80fd\uff0c\u975e\u5e38\u9002\u5408\u7528\u4e8e\u540e\u7aef\u7684\u63a5\u53e3\u5f00\u53d1\uff0c \u5b83\u88ab\u8bbe\u8ba1\u517c\u5bb9\u591a\u4e2aPython\u7684Web\u5e94\u7528\u5f00\u53d1\u6846\u67b6(\u76ee\u524d\u9002\u914d\u4e86 Flask , Starlette , Sanic , Tornado )\uff0c\u4e14\u505a\u5230\u5c3d\u91cf\u5c11\u5730\u4fb5\u5165\u539f\u6709\u6846\u67b6\uff0c Pait \u8bbe\u8ba1\u7075\u611f\u89c1\u6587\u7ae0 \u300a\u7ed9python\u63a5\u53e3\u52a0\u4e0a\u4e00\u5c42\u7c7b\u578b\u68c0\u300b \u3002 NOTE: mypy check 100% test coverage 95%+ (\u6392\u9664api_doc) python version >= 3.7 (\u652f\u6301\u5ef6\u8fdf\u6ce8\u91ca) \u4ee5\u4e0b\u4ee3\u7801\u6ca1\u6709\u7279\u522b\u8bf4\u660e, \u90fd\u9ed8\u8ba4\u4ee5starlette\u6846\u67b6\u4e3a\u4f8b \u529f\u80fd \u53c2\u6570\u6821\u9a8c\u548c\u81ea\u52a8\u8f6c\u5316(\u53c2\u6570\u6821\u9a8c\u4f9d\u8d56\u4e8e Pydantic ) \u53c2\u6570\u5173\u7cfb\u4f9d\u8d56\u6821\u9a8c \u81ea\u52a8\u751f\u6210openapi\u6587\u4ef6 \u652f\u6301swagger,redoc\u8def\u7531 \u652f\u6301mock\u54cd\u5e94 TestClient\u652f\u6301, \u652f\u6301\u6d4b\u8bd5\u7528\u4f8b\u7684\u54cd\u5e94\u7ed3\u679c\u6821\u9a8c \u652f\u6301\u63d2\u4ef6\u62d3\u5c55 \u672c\u5730api\u6587\u6863\u7ba1\u7406 \u8981\u6c42 Python3.7+ \u5728\u9879\u76ee\u4e2d\u4f7f\u7528TypeHints \u5b89\u88c5 pip3 install pait \u793a\u4f8b \u53c2\u6570\u6821\u9a8c\u4e0e\u6587\u6863\u751f\u6210 Pait \u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c \u4ee5 starlette \u6846\u67b6\u4e3a\u4f8b\u5b50\uff1a from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait , add_doc_route from pait.field import Body from pait.model.response import PaitResponseModel from pydantic import BaseModel , Field class DemoResponseModel ( PaitResponseModel ): \"\"\"\u54cd\u5e94\u7ed3\u6784\u4f53\u6a21\u578b\uff0c\u53ef\u4ee5\u4f9bPait\u4f7f\u7528\"\"\" class ResponseModel ( BaseModel ): uid : int = Field () user_name : str = Field () description : str = \"demo response\" response_data : Type [ BaseModel ] = ResponseModel # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait ( response_model_list = [ DemoResponseModel ]) async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'uid' : uid , 'user_name' : user_name }) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u6ce8\u518cOpenAPI\u63a5\u53e3 add_doc_route ( app ) uvicorn . run ( app ) \u53ea\u9700\u8981\u6dfb\u52a0\u9ad8\u4eae\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u63a5\u53e3\uff0c\u63a5\u7740\u8fd0\u884c\u4ee3\u7801\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u8bbf\u95ee: http://127.0.0.1:8000/swagger ,\u53ef\u4ee5\u770b\u5230\u6709\u4e2aSwaggerUI\u7684\u9875\u9762\uff0c\u76ee\u524d\u6709\u4e24\u7ec4\u63a5\u53e3\uff1a \u5176\u4e2d\u4e00\u7ec4\u662f Pait doc \u81ea\u5e26\u76843\u4e2a\u63a5\u53e3\uff0c\u53e6\u5916\u4e00\u7ec4\u662f default \uff0c\u91cc\u9762\u6709\u6211\u4eec\u521a\u521b\u5efa\u7684 /api \u63a5\u53e3\uff0c\u70b9\u5f00 /api \u63a5\u53e3\uff0c\u7136\u540e\u4f1a\u5f39\u51fa\u8be5\u63a5\u53e3\u7684\u8be6\u60c5\uff1a \u8be6\u60c5\u91cc\u7684\u6570\u636e\u662f\u7531 Pait \u901a\u8fc7\u8bfb\u53d6\u51fd\u6570\u7b7e\u540d\u4ee5\u53ca\u4f20\u5165\u7684 DemoResponseModel \u751f\u6210\u7684\uff0c \u63a5\u7740\u53ef\u4ee5\u70b9\u51fb try it out \uff0c\u5e76\u8f93\u5165\u53c2\u6570\u5e76\u70b9\u51fb Excute \uff0c\u65e2\u53ef\u4ee5\u770b\u5230Curl\u547d\u4ee4\u751f\u6210\u7ed3\u679c\u4ee5\u53ca\u670d\u52a1\u5668\u54cd\u5e94\u7ed3\u679c: \u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u8def\u7531\u51fd\u6570\u6b63\u5e38\u5de5\u4f5c\uff0c\u800c\u8def\u7531\u51fd\u6570\u7684\u53c2\u6570\u662f Pait \u81ea\u52a8\u4eceJson Body\u4e2d\u63d0\u53d6uid\u548cuser_name\u7684\u503c\u5e76\u4f20\u5165\u7684\u3002 \u63d2\u4ef6 \u9664\u4e86\u53c2\u6570\u6821\u9a8c\u548c\u6587\u6863\u751f\u6210\u5916\uff0c Pait \u8fd8\u62e5\u6709\u4e00\u4e2a\u63d2\u4ef6\u7cfb\u7edf\uff0c\u901a\u8fc7\u63d2\u4ef6\u7cfb\u7edf\u53ef\u4ee5\u62d3\u5c55\u5176\u5b83\u529f\u80fd\uff0c\u6bd4\u5982Mock\u54cd\u5e94\u529f\u80fd\uff0c\u5b83\u80fd\u6839\u636eResponseModel\u6765\u81ea\u52a8\u8fd4\u56de\u6570\u636e\uff0c\u5373\u4f7f\u8fd9\u4e2a\u8def\u7531\u6ca1\u6709\u6570\u636e\u8fd4\u56de\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait , add_doc_route from pait.app.starlette.plugin.mock_response import MockAsyncPlugin from pait.field import Body from pait.model.response import PaitResponseModel from pait.plugin import PluginManager from pydantic import BaseModel , Field class DemoResponseModel ( PaitResponseModel ): \"\"\"\u54cd\u5e94\u7ed3\u6784\u4f53\u6a21\u578b\uff0c\u53ef\u4ee5\u4f9bPait\u4f7f\u7528\"\"\" class ResponseModel ( BaseModel ): uid : int = Field ( example = 999 ) user_name : str = Field () description : str = \"demo response\" response_data : Type [ BaseModel ] = ResponseModel # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait ( post_plugin_list = [ PluginManager ( MockAsyncPlugin )], response_model_list = [ DemoResponseModel ] ) async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : pass app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u6ce8\u518cOpenAPI\u63a5\u53e3 add_doc_route ( app ) uvicorn . run ( app ) \u8be5\u4ee3\u7801\u662f\u6839\u636e\u4e0a\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u66f4\u6539\uff0c\u5b83\u79fb\u9664\u4e86\u8fd4\u56de\u54cd\u5e94\uff0c\u540c\u65f6\u5f15\u5165\u4e86\u9ad8\u4eae\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u5176\u4e2d\u7b2c18\u884c\u4e2d\u7684 uid: int = Field(example=999) \u6307\u5b9a\u4e86\u4e86example\u503c\u4e3a999\uff0c\u63a5\u7740\u8fd0\u884c\u4ee3\u7801\uff0c\u5e76\u8fd0\u884c\u4e0a\u9762Swagger\u8fd4\u56de\u7684 Curl \u547d\u4ee4: \u279c ~ curl -X 'POST' \\ 'http://127.0.0.1:8000/api' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"uid\": 666, \"user_name\": \"so1n\" }' { \"uid\" :999, \"user_name\" : \"\" } \u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u63a5\u53e3\u4ecd\u7136\u53ef\u4ee5\u8fd4\u56de\u54cd\u5e94\uff0c\u8be5\u54cd\u5e94\u662f\u7531Mock\u63d2\u4ef6\u81ea\u52a8\u751f\u6210\u7684\uff0c\u54cd\u5e94\u4e2d uid \u7684\u503c\u662f999\uff0c\u4e0e\u6211\u4eec\u4ee3\u7801\u4e2d uid: int = Field(example=999) \u8bbe\u5b9a\u7684\u503c\u4e00\u81f4\uff0c\u800c user_name \u7684\u503c\u5219\u662f\u9ed8\u8ba4\u7684\u7a7a\u5b57\u7b26\u4e32\u3002 \u9664\u6b64\u4e4b\u5916\uff0c Pait \u8fd8\u6709\u5176\u5b83\u7684\u63d2\u4ef6\u548c\u5176\u5b83\u529f\u80fd\uff0c\u5c06\u5728\u540e\u7eed\u7684\u6587\u6863\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u6027\u80fd Pait \u57fa\u4e8e Python \u81ea\u5e26\u7684 inspect \u5b9e\u73b0\u51fd\u6570\u7b7e\u540d\u63d0\u53d6\uff0c \u57fa\u4e8e Pydantic \u5b9e\u73b0\u53c2\u6570\u6821\u9a8c\u548c\u7c7b\u578b\u8f6c\u6362\uff0c\u6240\u4ee5 Pait \u7684\u6027\u80fd\u8868\u73b0\u5341\u5206\u4f18\u8d8a\u3002\u4e0d\u8fc7\u76ee\u524d\u7684 Pait \u8fd8\u5728\u6210\u957f\u4e2d\uff0c \u8fd8\u6709\u8bb8\u591a\u9700\u8981\u4f18\u5316\u7684\u5730\u65b9\u3002 \u4f7f\u7528\u793a\u4f8b Pait \u9488\u5bf9\u6bcf\u4e00\u4e2a\u652f\u6301\u7684Web\u6846\u67b6\u90fd\u6709\u5b8c\u5584\u7684\u4ee3\u7801\u793a\u4f8b\uff0c \u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u793a\u4f8b\u4ee3\u7801\u4e86\u89e3\u6700\u4f73\u5b9e\u8df5: flask example sanic example starlette example tornado example","title":"\u4ecb\u7ecd"},{"location":"#_1","text":"Pait \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684Python Api\u5f00\u53d1\u5de5\u5177\uff0c\u62e5\u6709\u53c2\u6570\u7c7b\u578b\u68c0\u67e5, \u7c7b\u578b\u8f6c\u6362\u548c\u63d0\u4f9b\u6587\u6863\u8f93\u51fa\u7b49\u529f\u80fd\uff0c\u975e\u5e38\u9002\u5408\u7528\u4e8e\u540e\u7aef\u7684\u63a5\u53e3\u5f00\u53d1\uff0c \u5b83\u88ab\u8bbe\u8ba1\u517c\u5bb9\u591a\u4e2aPython\u7684Web\u5e94\u7528\u5f00\u53d1\u6846\u67b6(\u76ee\u524d\u9002\u914d\u4e86 Flask , Starlette , Sanic , Tornado )\uff0c\u4e14\u505a\u5230\u5c3d\u91cf\u5c11\u5730\u4fb5\u5165\u539f\u6709\u6846\u67b6\uff0c Pait \u8bbe\u8ba1\u7075\u611f\u89c1\u6587\u7ae0 \u300a\u7ed9python\u63a5\u53e3\u52a0\u4e0a\u4e00\u5c42\u7c7b\u578b\u68c0\u300b \u3002 NOTE: mypy check 100% test coverage 95%+ (\u6392\u9664api_doc) python version >= 3.7 (\u652f\u6301\u5ef6\u8fdf\u6ce8\u91ca) \u4ee5\u4e0b\u4ee3\u7801\u6ca1\u6709\u7279\u522b\u8bf4\u660e, \u90fd\u9ed8\u8ba4\u4ee5starlette\u6846\u67b6\u4e3a\u4f8b","title":"\u4ecb\u7ecd"},{"location":"#_2","text":"\u53c2\u6570\u6821\u9a8c\u548c\u81ea\u52a8\u8f6c\u5316(\u53c2\u6570\u6821\u9a8c\u4f9d\u8d56\u4e8e Pydantic ) \u53c2\u6570\u5173\u7cfb\u4f9d\u8d56\u6821\u9a8c \u81ea\u52a8\u751f\u6210openapi\u6587\u4ef6 \u652f\u6301swagger,redoc\u8def\u7531 \u652f\u6301mock\u54cd\u5e94 TestClient\u652f\u6301, \u652f\u6301\u6d4b\u8bd5\u7528\u4f8b\u7684\u54cd\u5e94\u7ed3\u679c\u6821\u9a8c \u652f\u6301\u63d2\u4ef6\u62d3\u5c55 \u672c\u5730api\u6587\u6863\u7ba1\u7406","title":"\u529f\u80fd"},{"location":"#_3","text":"Python3.7+ \u5728\u9879\u76ee\u4e2d\u4f7f\u7528TypeHints","title":"\u8981\u6c42"},{"location":"#_4","text":"pip3 install pait","title":"\u5b89\u88c5"},{"location":"#_5","text":"","title":"\u793a\u4f8b"},{"location":"#_6","text":"Pait \u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c \u4ee5 starlette \u6846\u67b6\u4e3a\u4f8b\u5b50\uff1a from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait , add_doc_route from pait.field import Body from pait.model.response import PaitResponseModel from pydantic import BaseModel , Field class DemoResponseModel ( PaitResponseModel ): \"\"\"\u54cd\u5e94\u7ed3\u6784\u4f53\u6a21\u578b\uff0c\u53ef\u4ee5\u4f9bPait\u4f7f\u7528\"\"\" class ResponseModel ( BaseModel ): uid : int = Field () user_name : str = Field () description : str = \"demo response\" response_data : Type [ BaseModel ] = ResponseModel # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait ( response_model_list = [ DemoResponseModel ]) async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'uid' : uid , 'user_name' : user_name }) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u6ce8\u518cOpenAPI\u63a5\u53e3 add_doc_route ( app ) uvicorn . run ( app ) \u53ea\u9700\u8981\u6dfb\u52a0\u9ad8\u4eae\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u63a5\u53e3\uff0c\u63a5\u7740\u8fd0\u884c\u4ee3\u7801\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u8bbf\u95ee: http://127.0.0.1:8000/swagger ,\u53ef\u4ee5\u770b\u5230\u6709\u4e2aSwaggerUI\u7684\u9875\u9762\uff0c\u76ee\u524d\u6709\u4e24\u7ec4\u63a5\u53e3\uff1a \u5176\u4e2d\u4e00\u7ec4\u662f Pait doc \u81ea\u5e26\u76843\u4e2a\u63a5\u53e3\uff0c\u53e6\u5916\u4e00\u7ec4\u662f default \uff0c\u91cc\u9762\u6709\u6211\u4eec\u521a\u521b\u5efa\u7684 /api \u63a5\u53e3\uff0c\u70b9\u5f00 /api \u63a5\u53e3\uff0c\u7136\u540e\u4f1a\u5f39\u51fa\u8be5\u63a5\u53e3\u7684\u8be6\u60c5\uff1a \u8be6\u60c5\u91cc\u7684\u6570\u636e\u662f\u7531 Pait \u901a\u8fc7\u8bfb\u53d6\u51fd\u6570\u7b7e\u540d\u4ee5\u53ca\u4f20\u5165\u7684 DemoResponseModel \u751f\u6210\u7684\uff0c \u63a5\u7740\u53ef\u4ee5\u70b9\u51fb try it out \uff0c\u5e76\u8f93\u5165\u53c2\u6570\u5e76\u70b9\u51fb Excute \uff0c\u65e2\u53ef\u4ee5\u770b\u5230Curl\u547d\u4ee4\u751f\u6210\u7ed3\u679c\u4ee5\u53ca\u670d\u52a1\u5668\u54cd\u5e94\u7ed3\u679c: \u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u8def\u7531\u51fd\u6570\u6b63\u5e38\u5de5\u4f5c\uff0c\u800c\u8def\u7531\u51fd\u6570\u7684\u53c2\u6570\u662f Pait \u81ea\u52a8\u4eceJson Body\u4e2d\u63d0\u53d6uid\u548cuser_name\u7684\u503c\u5e76\u4f20\u5165\u7684\u3002","title":"\u53c2\u6570\u6821\u9a8c\u4e0e\u6587\u6863\u751f\u6210"},{"location":"#_7","text":"\u9664\u4e86\u53c2\u6570\u6821\u9a8c\u548c\u6587\u6863\u751f\u6210\u5916\uff0c Pait \u8fd8\u62e5\u6709\u4e00\u4e2a\u63d2\u4ef6\u7cfb\u7edf\uff0c\u901a\u8fc7\u63d2\u4ef6\u7cfb\u7edf\u53ef\u4ee5\u62d3\u5c55\u5176\u5b83\u529f\u80fd\uff0c\u6bd4\u5982Mock\u54cd\u5e94\u529f\u80fd\uff0c\u5b83\u80fd\u6839\u636eResponseModel\u6765\u81ea\u52a8\u8fd4\u56de\u6570\u636e\uff0c\u5373\u4f7f\u8fd9\u4e2a\u8def\u7531\u6ca1\u6709\u6570\u636e\u8fd4\u56de\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait , add_doc_route from pait.app.starlette.plugin.mock_response import MockAsyncPlugin from pait.field import Body from pait.model.response import PaitResponseModel from pait.plugin import PluginManager from pydantic import BaseModel , Field class DemoResponseModel ( PaitResponseModel ): \"\"\"\u54cd\u5e94\u7ed3\u6784\u4f53\u6a21\u578b\uff0c\u53ef\u4ee5\u4f9bPait\u4f7f\u7528\"\"\" class ResponseModel ( BaseModel ): uid : int = Field ( example = 999 ) user_name : str = Field () description : str = \"demo response\" response_data : Type [ BaseModel ] = ResponseModel # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait ( post_plugin_list = [ PluginManager ( MockAsyncPlugin )], response_model_list = [ DemoResponseModel ] ) async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : pass app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u6ce8\u518cOpenAPI\u63a5\u53e3 add_doc_route ( app ) uvicorn . run ( app ) \u8be5\u4ee3\u7801\u662f\u6839\u636e\u4e0a\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u66f4\u6539\uff0c\u5b83\u79fb\u9664\u4e86\u8fd4\u56de\u54cd\u5e94\uff0c\u540c\u65f6\u5f15\u5165\u4e86\u9ad8\u4eae\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u5176\u4e2d\u7b2c18\u884c\u4e2d\u7684 uid: int = Field(example=999) \u6307\u5b9a\u4e86\u4e86example\u503c\u4e3a999\uff0c\u63a5\u7740\u8fd0\u884c\u4ee3\u7801\uff0c\u5e76\u8fd0\u884c\u4e0a\u9762Swagger\u8fd4\u56de\u7684 Curl \u547d\u4ee4: \u279c ~ curl -X 'POST' \\ 'http://127.0.0.1:8000/api' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"uid\": 666, \"user_name\": \"so1n\" }' { \"uid\" :999, \"user_name\" : \"\" } \u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u63a5\u53e3\u4ecd\u7136\u53ef\u4ee5\u8fd4\u56de\u54cd\u5e94\uff0c\u8be5\u54cd\u5e94\u662f\u7531Mock\u63d2\u4ef6\u81ea\u52a8\u751f\u6210\u7684\uff0c\u54cd\u5e94\u4e2d uid \u7684\u503c\u662f999\uff0c\u4e0e\u6211\u4eec\u4ee3\u7801\u4e2d uid: int = Field(example=999) \u8bbe\u5b9a\u7684\u503c\u4e00\u81f4\uff0c\u800c user_name \u7684\u503c\u5219\u662f\u9ed8\u8ba4\u7684\u7a7a\u5b57\u7b26\u4e32\u3002 \u9664\u6b64\u4e4b\u5916\uff0c Pait \u8fd8\u6709\u5176\u5b83\u7684\u63d2\u4ef6\u548c\u5176\u5b83\u529f\u80fd\uff0c\u5c06\u5728\u540e\u7eed\u7684\u6587\u6863\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u3002","title":"\u63d2\u4ef6"},{"location":"#_8","text":"Pait \u57fa\u4e8e Python \u81ea\u5e26\u7684 inspect \u5b9e\u73b0\u51fd\u6570\u7b7e\u540d\u63d0\u53d6\uff0c \u57fa\u4e8e Pydantic \u5b9e\u73b0\u53c2\u6570\u6821\u9a8c\u548c\u7c7b\u578b\u8f6c\u6362\uff0c\u6240\u4ee5 Pait \u7684\u6027\u80fd\u8868\u73b0\u5341\u5206\u4f18\u8d8a\u3002\u4e0d\u8fc7\u76ee\u524d\u7684 Pait \u8fd8\u5728\u6210\u957f\u4e2d\uff0c \u8fd8\u6709\u8bb8\u591a\u9700\u8981\u4f18\u5316\u7684\u5730\u65b9\u3002","title":"\u6027\u80fd"},{"location":"#_9","text":"Pait \u9488\u5bf9\u6bcf\u4e00\u4e2a\u652f\u6301\u7684Web\u6846\u67b6\u90fd\u6709\u5b8c\u5584\u7684\u4ee3\u7801\u793a\u4f8b\uff0c \u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u793a\u4f8b\u4ee3\u7801\u4e86\u89e3\u6700\u4f73\u5b9e\u8df5: flask example sanic example starlette example tornado example","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"1_1_introduction/","text":"\u4ecb\u7ecd \u4f7f\u7528 Pait \u6765\u8fdb\u884c\u53c2\u6570\u7c7b\u578b\u8f6c\u6362\u4e0e\u53c2\u6570\u6821\u9a8c\u975e\u5e38\u7b80\u5355\uff0c\u4ee5\u793a\u4f8b\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait.field import Body # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : { 'uid' : uid , 'user_name' : user_name }}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ]), ] ) uvicorn . run ( app ) \u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u7684\u7b2c\u4e00\u90e8\u5206\u662f Pait \u7684\u6838\u5fc3\uff0c Pait \u7684\u6240\u6709\u8fd0\u884c\u529f\u80fd\u90fd\u5728\u8fd9\u4e2a\u88c5\u9970\u5668\u4e2d\u5b9e\u73b0\uff0c\u5728\u8fd9\u4e2a\u6838\u5fc3\u4e2d\uff0c\u4f1a\u901a\u8fc7 inspect \u83b7\u53d6\u5230\u51fd\u6570\u5bf9\u5e94\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u5e76\u901a\u8fc7\u51fd\u6570\u7b7e\u540d\u77e5\u9053\u5982\u4f55\u83b7\u53d6\u503c, \u5728\u7ecf\u8fc7\u7ec4\u88c5\u540e\u4ea4\u7531Pydantic\u8fdb\u884c\u6821\u9a8c\u548c\u8f6c\u6362\u540e\u518d\u6839\u636e\u51fd\u6570\u7b7e\u540d\u8fd4\u56de\u7ed9\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\u3002 \u9ad8\u4eae\u7684\u7b2c\u4e8c\u90e8\u5206\u5219\u662f\u7528\u6237\u81ea\u5df1\u586b\u5199\u7684\u53c2\u6570\uff0c \u7528\u6237\u5728\u7f16\u5199\u51fd\u6570\u65f6\uff0c \u53ea\u8981\u628a\u51fd\u6570\u7684\u53c2\u6570\u90fd\u5199\u6210\u7c7b\u4f3c\u4e8e <name>:<type>=<default> \u5173\u952e\u53c2\u6570\u5373\u53ef\uff0c\u9664\u4e86\u7b26\u5408\u6807\u51c6\u5916\uff0c Pait \u8fd8\u4f1a\u8d4b\u4e88\u5176\u5b83\u7684\u610f\u4e49\uff1a name \u4e3a\u53c2\u6570\u540d\uff0c \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f5c\u4e3aKey\u4f7f\u7528 type \u4e3a\u503c\u5bf9\u5e94\u7684\u7c7b\u578b\uff0c Pait \u4f1a\u7528\u6765\u505a\u53c2\u6570\u6821\u9a8c\u548c\u8f6c\u5316 default \u5219\u662f Pait \u7684 field \u5bf9\u8c61\uff0c\u4e0d\u540c\u7684 field \u4ee3\u8868\u4ece\u4e0d\u540c\u7684\u8bf7\u6c42\u7c7b\u578b\u83b7\u53d6\u503c\uff0c \u800c\u5bf9\u8c61\u7684\u5c5e\u6027\u5219\u544a\u8bc9 Pait \u8be5\u5982\u4f55\u53bb\u9884\u5904\u7406\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6\u7684\u503c\u3002 \u4ee5\u4e0a\u9762\u7684 uid \u53c2\u6570\u4e3a\u4f8b\u5b50\uff0c\u4ee3\u8868\u4ece\u8bf7\u6c42\u4e2d\u7684Body\u83b7\u53d6Json\u6570\u636e\uff0c\u83b7\u53d6Key\u4e3auid\u7684\u503c\u5e76\u8f6c\u5316\u6216\u9a8c\u8bc1\u662f\u5426\u4e3a int \u7c7b\u578b\uff0c \u6700\u540e\u518d\u5224\u65ad\u662f\u5426\u5904\u4e8e10-1000\u4e4b\u95f4\uff0c \u518d\u8d4b\u503c\u7ed9 uid \u8fd9\u4e2a\u53d8\u91cf\u3002 \u6ce8: \u76f4\u63a5\u4f7f\u7528Body()\u65f6, mypy\u4f1a\u68c0\u67e5\u5230\u7c7b\u578b\u4e0d\u5339\u914d, \u800cBody.i()\u5219\u53ef\u517c\u5bb9\u8fd9\u4e2a\u95ee\u9898\uff0c \u4e00\u822c\u60c5\u51b5\u4e0b\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528Body.i()\u3002","title":"\u4ecb\u7ecd"},{"location":"1_1_introduction/#_1","text":"\u4f7f\u7528 Pait \u6765\u8fdb\u884c\u53c2\u6570\u7c7b\u578b\u8f6c\u6362\u4e0e\u53c2\u6570\u6821\u9a8c\u975e\u5e38\u7b80\u5355\uff0c\u4ee5\u793a\u4f8b\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait.field import Body # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( uid : int = Body . i ( description = \"user id\" , gt = 10 , lt = 1000 ), user_name : str = Body . i ( description = \"user name\" , min_length = 2 , max_length = 4 ) ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : { 'uid' : uid , 'user_name' : user_name }}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ]), ] ) uvicorn . run ( app ) \u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u7684\u7b2c\u4e00\u90e8\u5206\u662f Pait \u7684\u6838\u5fc3\uff0c Pait \u7684\u6240\u6709\u8fd0\u884c\u529f\u80fd\u90fd\u5728\u8fd9\u4e2a\u88c5\u9970\u5668\u4e2d\u5b9e\u73b0\uff0c\u5728\u8fd9\u4e2a\u6838\u5fc3\u4e2d\uff0c\u4f1a\u901a\u8fc7 inspect \u83b7\u53d6\u5230\u51fd\u6570\u5bf9\u5e94\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u5e76\u901a\u8fc7\u51fd\u6570\u7b7e\u540d\u77e5\u9053\u5982\u4f55\u83b7\u53d6\u503c, \u5728\u7ecf\u8fc7\u7ec4\u88c5\u540e\u4ea4\u7531Pydantic\u8fdb\u884c\u6821\u9a8c\u548c\u8f6c\u6362\u540e\u518d\u6839\u636e\u51fd\u6570\u7b7e\u540d\u8fd4\u56de\u7ed9\u8def\u7531\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\u3002 \u9ad8\u4eae\u7684\u7b2c\u4e8c\u90e8\u5206\u5219\u662f\u7528\u6237\u81ea\u5df1\u586b\u5199\u7684\u53c2\u6570\uff0c \u7528\u6237\u5728\u7f16\u5199\u51fd\u6570\u65f6\uff0c \u53ea\u8981\u628a\u51fd\u6570\u7684\u53c2\u6570\u90fd\u5199\u6210\u7c7b\u4f3c\u4e8e <name>:<type>=<default> \u5173\u952e\u53c2\u6570\u5373\u53ef\uff0c\u9664\u4e86\u7b26\u5408\u6807\u51c6\u5916\uff0c Pait \u8fd8\u4f1a\u8d4b\u4e88\u5176\u5b83\u7684\u610f\u4e49\uff1a name \u4e3a\u53c2\u6570\u540d\uff0c \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f5c\u4e3aKey\u4f7f\u7528 type \u4e3a\u503c\u5bf9\u5e94\u7684\u7c7b\u578b\uff0c Pait \u4f1a\u7528\u6765\u505a\u53c2\u6570\u6821\u9a8c\u548c\u8f6c\u5316 default \u5219\u662f Pait \u7684 field \u5bf9\u8c61\uff0c\u4e0d\u540c\u7684 field \u4ee3\u8868\u4ece\u4e0d\u540c\u7684\u8bf7\u6c42\u7c7b\u578b\u83b7\u53d6\u503c\uff0c \u800c\u5bf9\u8c61\u7684\u5c5e\u6027\u5219\u544a\u8bc9 Pait \u8be5\u5982\u4f55\u53bb\u9884\u5904\u7406\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6\u7684\u503c\u3002 \u4ee5\u4e0a\u9762\u7684 uid \u53c2\u6570\u4e3a\u4f8b\u5b50\uff0c\u4ee3\u8868\u4ece\u8bf7\u6c42\u4e2d\u7684Body\u83b7\u53d6Json\u6570\u636e\uff0c\u83b7\u53d6Key\u4e3auid\u7684\u503c\u5e76\u8f6c\u5316\u6216\u9a8c\u8bc1\u662f\u5426\u4e3a int \u7c7b\u578b\uff0c \u6700\u540e\u518d\u5224\u65ad\u662f\u5426\u5904\u4e8e10-1000\u4e4b\u95f4\uff0c \u518d\u8d4b\u503c\u7ed9 uid \u8fd9\u4e2a\u53d8\u91cf\u3002 \u6ce8: \u76f4\u63a5\u4f7f\u7528Body()\u65f6, mypy\u4f1a\u68c0\u67e5\u5230\u7c7b\u578b\u4e0d\u5339\u914d, \u800cBody.i()\u5219\u53ef\u517c\u5bb9\u8fd9\u4e2a\u95ee\u9898\uff0c \u4e00\u822c\u60c5\u51b5\u4e0b\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528Body.i()\u3002","title":"\u4ecb\u7ecd"},{"location":"1_2_how_to_use_field/","text":"field \u5728 Pait \u4e2d\u8d77\u5230\u4e86\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\uff0c Pait \u9664\u4e86\u4f7f\u7528 field \u7528\u4e8e\u83b7\u53d6\u6570\u636e\u6765\u6e90\u5916\uff0c \u8fd8\u901a\u8fc7\u5b83\u5b9e\u73b0\u4e86\u5f88\u591a\u5176\u5b83\u7684\u529f\u80fd\uff0c \u5728\u672c\u7ae0\u4e2d\u53ea\u7740\u91cd\u8bf4\u660e\u53c2\u6570\u6821\u9a8c\u8fd9\u4e00\u5757\u3002 1.Field\u7684\u79cd\u7c7b \u9664\u4e86\u4e0a\u6587\u63d0\u5230\u7684Body\u5916\uff0c Field \u8fd8\u62e5\u6709\u5176\u5b83\u7684\u79cd\u7c7b\uff0c \u5b83\u4eec\u7684\u540d\u79f0\u548c\u4f5c\u7528\u5982\u4e0b: Body: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684Json\u6570\u636e Cookie: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684Cookie\u6570\u636e(\u6ce8\u610f\uff0c \u76ee\u524dCookie\u6570\u636e\u4f1a\u88ab\u8f6c\u5316\u4e3a\u4e00\u4e2aPython\u5b57\u5178\uff0c \u8fd9\u610f\u5473\u7740Cookie\u7684Key\u4e0d\u80fd\u91cd\u590d\u3002\u540c\u65f6\uff0c \u5728Field\u4e3aCookie\u65f6\uff0c type\u6700\u597d\u662fstr) File\uff1a\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684file\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4e0e\u539f\u6587Web\u6846\u67b6\u7684file\u5bf9\u8c61\u4e00\u81f4 Form\uff1a\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684form\u6570\u636e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u91cd\u590dKey\uff0c\u53ea\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c Header: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684header\u6570\u636e Path: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684path\u6570\u636e\uff0c\u5982 /api/{version}/test \uff0c\u5219\u4f1a\u83b7\u53d6\u5230version\u7684\u6570\u636e Query: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684Url\u53c2\u6570\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u91cd\u590dKey\uff0c\u53ea\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c MultiForm\uff1a\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684form\u6570\u636e\uff0c \u8fd4\u56deKey\u5bf9\u5e94\u7684\u6570\u636e\u5217\u8868 MultiQuery\uff1a\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684Url\u53c2\u6570\u5bf9\u5e94\u7684\u6570\u636e\uff0c \u8fd4\u56deKey\u5bf9\u5e94\u7684\u6570\u636e\u5217\u8868 \u5404\u4e2a\u79cd\u7c7b\u7684\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u586b\u5165 <name>:<type>=<default> \u4e2d\u7684 default \u4f4d\u7f6e\u5373\u53ef\uff0c\u4ee5\u8fd9\u6bb5\u4ee3\u7801\u4e3a\u4f8b\u5b50(\u4e3a\u4e86\u786e\u4fdd\u80fd\u590d\u5236\u7c98\u8d34\u540e\u8fd0\u884c\uff0c\u6ca1\u6709\u6f14\u793afield.File): from typing import List , Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( form_a : str = field . Form . i (), form_b : str = field . Form . i (), multi_form_c : List [ str ] = field . MultiForm . i (), cookie : dict = field . Cookie . i ( raw_return = True ), multi_user_name : List [ str ] = field . MultiQuery . i ( min_length = 2 , max_length = 4 ), age : int = field . Path . i ( gt = 1 , lt = 100 ), uid : int = field . Query . i ( gt = 10 , lt = 1000 ), user_name : str = field . Query . i ( min_length = 2 , max_length = 4 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" ), accept : str = field . Header . i () ) -> JSONResponse : \"\"\"Test the use of all BaseField-based\"\"\" return JSONResponse ( { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"accept\" : accept , \"form_a\" : form_a , \"form_b\" : form_b , \"form_c\" : multi_form_c , \"cookie\" : cookie , \"multi_user_name\" : multi_user_name , \"age\" : age , \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } ) app = Starlette ( routes = [ Route ( \"/api/demo/ {age} \" , demo , methods = [ \"POST\" ]), ] ) uvicorn . run ( app ) \u8fd9\u6bb5\u4ee3\u7801\u6765\u81ea\u4e8e pait base field example , \u5e76\u505a\u4e86\u4e00\u4e9b\u5c0f\u6539\u52a8\uff0c\u8be5\u63a5\u53e3\u7684\u4e3b\u8981\u8d23\u4efb\u5c31\u662f\u628a\u53c2\u6570\u901a\u8fc7json\u7684\u683c\u5f0f\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002 \u63a5\u4e0b\u6765\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u4e00\u6b21\u8bf7\u6c42\u6d4b\u8bd5\uff0c \u901a\u8fc7\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c Pait \u90fd\u80fd\u901a\u8fc7 field \u7684\u79cd\u7c7b\u51c6\u786e\u7684\u62ff\u5230\u5bf9\u5e94\u7684\u503c\uff0c \u5e76\u8d4b\u503c\u5230\u53d8\u91cf\u4e2d\u3002 curl -X 'POST' \\ 'http://127.0.0.1:8000/api/demo/12?uid=99&user_name=so1n&multi_user_name=so1n' \\ -H 'accept: application/json' \\ -H 'Cookie: cookie=cookie=test cookie' \\ -H 'Content-Type: multipart/form-data' \\ -F 'form_a=a' \\ -F 'form_b=b' \\ -F 'multi_form_c=string,string' { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"accept\" : \"application/json\" , \"form_a\" : \"a\" , \"form_b\" : \"b\" , \"form_c\" : [ \"string,string\" ] , \"cookie\" : { \"cookie\" : \"cookie=test cookie\" } , \"multi_user_name\" : [ \"so1n\" ] , \"age\" : 12 , \"uid\" : 99 , \"user_name\" : \"so1n\" , \"email\" : \"example@xxx.com\" } } 2.Field\u7684\u529f\u80fd \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c \u8bf7\u6c42\u4e2d\u6ca1\u6709\u5e26\u4e0a email \u53c2\u6570\uff0c \u4f46\u662f\u8be5\u63a5\u53e3\u4efb\u7136\u53ef\u4ee5\u5f97\u5230 email \u7684\u503c example@xxx.com \uff0c \u8fd9\u662f\u56e0\u4e3a\u5728\u586b\u5199 email \u7684 field \u65f6\uff0c\u6211\u628a example@xxx.com \u586b\u5199\u5230default\u503c\u4e2d\uff0c\u8fd9\u6837 Pait \u4f1a\u5728\u83b7\u53d6\u4e0d\u5230\u8be5\u53d8\u91cf\u7684\u5bf9\u5e94\u503c\u7684\u60c5\u51b5\u4e0b\uff0c`\u4e5f\u80fd\u628a\u9ed8\u8ba4\u503c\u8d4b\u7ed9\u5bf9\u5e94\u7684\u53d8\u91cf\u3002 \u9664\u4e86\u9ed8\u8ba4\u503c\u4e4b\u5916\uff0c field \u4e5f\u6709\u5f88\u591a\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u5927\u90e8\u5206\u6765\u6e90\u4e8e field \u6240\u7ee7\u627f\u7684 pydantic.Field \u3002 2.1.default Pait \u901a\u8fc7\u8be5\u53c2\u6570\u652f\u6301\u9ed8\u8ba4\u503c\uff0c \u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u503c\u53ef\u4ee5\u76f4\u63a5\u4e0d\u586b\u5199\u8be5\u53c2\u6570\u7684\u503c\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u4e24\u4e2a\u63a5\u53e3\u90fd\u76f4\u63a5\u8fd4\u56de\u83b7\u53d6\u5230\u7684\u503c demo_value \uff0c\u5176\u4e2d demo \u63a5\u53e3\u5e26\u6709\u9ed8\u8ba4\u503c\uff0c \u9ed8\u8ba4\u503c\u4e3a\u5b57\u7b26\u4e32123\uff0c\u800c demo1 \u63a5\u53e3\u6ca1\u6709\u9ed8\u8ba4\u503c: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException async def api_exception ( request : Request , exc : Exception ) -> PlainTextResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return PlainTextResponse ( str ( exc )) @pait () async def demo ( demo_value : str = field . Query . i ( default = \"123\" )) -> PlainTextResponse : return PlainTextResponse ( demo_value ) @pait () async def demo1 ( demo_value : str = field . Query . i ()) -> PlainTextResponse : return PlainTextResponse ( demo_value ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"GET\" ]), ] ) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6709\u9ed8\u8ba4\u503c\u5f97\u63a5\u53e3 /api/demo \uff0c\u5f53\u6ca1\u6709\u4f20\u53c2\u6570demo_value\u65f6\uff0c\u9ed8\u8ba4\u8fd4\u56de123, \u4f20\u53c2\u6570456\u65f6\uff0c\u8fd4\u56de\u503c\u662f456: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 123 \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=456\" 456 \u800c\u6ca1\u6709\u5e26\u53c2\u6570\u7684\u8bf7\u6c42\u4f1a\u770b\u5230\u6709\u4e2a\u62a5\u9519\uff0c \u63d0\u793a\u6ca1\u6709\u627e\u5230 demo_value \u7684\u503c: \u279c curl \"http://127.0.0.1:8000/api/demo1\" Can not found demo_value value 2.2.default_factory \u8be5\u53c2\u6570\u7528\u4e8e\u9ed8\u8ba4\u503c\u662f\u51fd\u6570\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u6765\u586b\u5199\u7c7b\u4f3c\u4e8e datetime.datetime.now \u7684\u9ed8\u8ba4\u503c\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u7b2c\u4e00\u4e2a\u63a5\u53e3\u7684\u9ed8\u8ba4\u503c\u662f\u5f53\u524d\u65f6\u95f4\uff0c \u7b2c\u4e8c\u4e2a\u63a5\u53e3\u7684\u9ed8\u8ba4\u503c\u662fuuid\uff0c\u4ed6\u4eec\u6bcf\u6b21\u8c03\u7528\u6bb5\u8fd4\u56de\u503c\u90fd\u662f\u6536\u5230\u8bf7\u6c42\u65f6\u751f\u6210\u7684: import datetime import uuid import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( now : datetime . datetime = field . Query . i ( default_factory = datetime . datetime . now ) ) -> PlainTextResponse : return PlainTextResponse ( now ) @pait () async def demo1 ( demo_value : str = field . Query . i ( default_factory = lambda : uuid . uuid4 () . hex )) -> PlainTextResponse : return PlainTextResponse ( demo_value ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"GET\" ]), ] ) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u8fd4\u56de\u7684\u7ed3\u679c\u90fd\u662f\u4e0d\u4e00\u6837\u7684: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 2022 -02-07T14:54:29.127519 \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 2022 -02-07T14:54:33.789994 \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" 7e4659e18103471da9db91ed4843d962 \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" ef84f04fa9fc4ea9a8b44449c76146b8 2.3.alias \u53c2\u6570\u7684\u522b\u540d\uff0c\u4e00\u4e9b\u53c2\u6570\u53ef\u80fd\u88ab\u547d\u540d\u4e3a Content-Type , \u4f46\u662fPython\u4e0d\u652f\u6301\u8fd9\u79cd\u547d\u540d\u65b9\u5f0f\uff0c \u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u522b\u540d\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( content_type : str = field . Header . i ( alias = \"Content-Type\" )) -> PlainTextResponse : return PlainTextResponse ( content_type ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff0c Pait \u6b63\u5e38\u7684\u4eceHeader\u4e2d\u63d0\u53d6 Content-Type \u7684\u503c\u5e76\u8d4b\u7ed9\u4e86content_type: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" -H \"Content-Type:123\" 123 2.4.\u6570\u5b57\u6821\u9a8c\u4e4bgt\uff0cge\uff0clt\uff0cle\uff0cmultiple_of \u8fd9\u51e0\u4e2a\u503c\u90fd\u662f\u6821\u9a8c\u6570\u5b57\u662f\u5426\u5408\u6cd5\uff0c\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4ed6\u4eec\u7684\u4f5c\u7528\u5404\u4e0d\u76f8\u540c\uff1a gt\uff1a\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u6570\u503c\u662f\u5426\u5927\u4e8e\u8be5\u503c\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728OpenAPI\u6dfb\u52a0 exclusiveMinimum \u5c5e\u6027\u3002 ge\uff1a\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u6570\u503c\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728OpenAPI\u6dfb\u52a0 exclusiveMinimum \u5c5e\u6027\u3002 lt\uff1a\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u6570\u503c\u662f\u5426\u5c0f\u4e8e\u8be5\u503c\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728OpenAPI\u6dfb\u52a0 exclusiveMaximum \u5c5e\u6027\u3002 le\uff1a\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u6570\u503c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u503c\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728OpenAPI\u6dfb\u52a0 exclusiveMaximum \u5c5e\u6027\u3002 multiple_of\uff1a\u4ec5\u7528\u4e8e\u6570\u5b57\uff0c \u4f1a\u6821\u9a8c\u8be5\u6570\u5b57\u662f\u5426\u662f\u6307\u5b9a\u503c\u5f97\u500d\u6570\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u8fd9\u4e2a\u793a\u4f8b\u4ee3\u7801\u53ea\u6709\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f46\u662f\u63a5\u53d7\u4e86\u4e09\u4e2a\u53c2\u6570 demo_value1 , demo_value2 , demo_value3 \uff0c\u4ed6\u4eec\u5206\u522b\u53ea\u63a5\u6536\u7b26\u5408\u5927\u4e8e1\u5c0f\u4e8e10\uff1b\u7b49\u4e8e1;3\u7684\u500d\u6570\u7684\u4e09\u4e2a\u6570\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u7684\u629b\u9519 return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value1 : int = field . Query . i ( gt = 1 , lt = 10 ), demo_value2 : int = field . Query . i ( ge = 1 , le = 1 ), demo_value3 : int = field . Query . i ( multiple_of = 3 ), ) -> JSONResponse : return JSONResponse ({ \"data\" : [ demo_value1 , demo_value2 , demo_value3 ]}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u7b26\u5408\u8981\u6c42\u5e76\u5f97\u5230\u4e86\u60f3\u8981\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u5219\u4e09\u4e2a\u53c2\u6570\u90fd\u9519\u4e86\uff0c\u5e76\u8fd4\u56de Pydantic.ValidationError \u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4ece\u9519\u8bef\u4fe1\u606f\u53ef\u4ee5\u7b80\u5355\u7684\u770b\u51fa\u6765\u4e09\u4e2a\u53c2\u6570\u90fd\u4e0d\u7b26\u5408\u63a5\u53e3\u8bbe\u7f6e\u7684\u9650\u5b9a\u6761\u4ef6\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value1=2&demo_value2=1&demo_value3=3\" { \"data\" : [ 2 ,1,3 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value1=11&demo_value2=2&demo_value3=2\" { \"data\" : [ { \"loc\" : [ \"demo_value1\" ] , \"msg\" : \"ensure this value is less than 10\" , \"type\" : \"value_error.number.not_lt\" , \"ctx\" : { \"limit_value\" : 10 } } , { \"loc\" : [ \"demo_value2\" ] , \"msg\" : \"ensure this value is less than or equal to 1\" , \"type\" : \"value_error.number.not_le\" , \"ctx\" : { \"limit_value\" : 1 } } , { \"loc\" : [ \"demo_value3\" ] , \"msg\" : \"ensure this value is a multiple of 3\" , \"type\" : \"value_error.number.not_multiple\" , \"ctx\" : { \"multiple_of\" : 3 } } ] } 2.5.\u6570\u7ec4\u6821\u9a8c\u4e4bmin_items\uff0cmax_items \u8fd9\u51e0\u4e2a\u503c\u90fd\u662f\u6821\u9a8c\u6570\u7ec4\u662f\u5426\u5408\u6cd5\uff0c\u4ec5\u7528\u4e8e\u6570\u7ec4\u7684\u7c7b\u578b\uff0c\u4ed6\u4eec\u7684\u4f5c\u7528\u5404\u4e0d\u76f8\u540c\uff1a min_items\uff1a\u4ec5\u7528\u4e8e\u6570\u7ec4\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u5217\u8868\u662f\u5426\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u6307\u5b9a\u7684\u503c\u3002 max_items\uff1a \u4ec5\u7528\u4e8e\u6570\u7ec4\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u5217\u8868\u662f\u5426\u6ee1\u8db3\u5c0f\u4e8e\u7b49\u4e8e\u6307\u5b9a\u7684\u503c\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u8be5\u63a5\u53e3\u901a\u8fc7 field.MultiQuery \u4ece\u8bf7\u6c42Url\u4e2d\u83b7\u53d6\u53c2\u6570 demo_value \u7684\u6570\u7ec4\uff0c\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\uff0c\u5176\u4e2d\u6570\u7ec4\u7684\u957f\u5ea6\u9650\u5b9a\u5728\u5927\u4e8e\u7b49\u4e8e1\u4e14\u5c0f\u4e8e\u7b49\u4e8e2\u4e4b\u95f4\uff1a from typing import List import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc if isinstance ( exc , ValidationError ): return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value : List [ int ] = field . MultiQuery . i ( min_items = 1 , max_items = 2 )) -> JSONResponse : return JSONResponse ({ \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4e0e2.4\u4e00\u6837\uff0c\u901a\u8fc7 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\u5408\u6cd5\u7684\u53c2\u6570\u4f1a\u653e\u884c\uff0c\u4e0d\u5408\u6cd5\u7684\u53c2\u6570\u4f1a\u629b\u9519\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1\" { \"data\" : [ 1 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1&demo_value=2\" { \"data\" : [ 1 ,2 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1&demo_value=2&demo_value=3\" { \"data\" : [ { \"loc\" : [ \"demo_value\" ] , \"msg\" : \"ensure this value has at most 2 items\" , \"type\" : \"value_error.list.max_items\" , \"ctx\" : { \"limit_value\" : 2 } } ] } 2.6.\u5b57\u7b26\u4e32\u6821\u9a8c\u4e4bmin_length\uff0cmax_length\uff0cregex \u8fd9\u51e0\u4e2a\u503c\u90fd\u662f\u6821\u9a8c\u5b57\u7b26\u4e32\u662f\u5426\u5408\u6cd5\uff0c\u4ec5\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u7c7b\u578b\uff0c\u4ed6\u4eec\u7684\u4f5c\u7528\u5404\u4e0d\u76f8\u540c\uff1a min_length\uff1a\u4ec5\u7528\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u6307\u5b9a\u7684\u503c\u3002 max_length\uff1a\u4ec5\u7528\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426\u6ee1\u8db3\u5c0f\u4e8e\u7b49\u4e8e\u6307\u5b9a\u7684\u503c\u3002 regex\uff1a\u4ec5\u7528\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u7b26\u4e32\u662f\u5426\u7b26\u5408\u8be5\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c \u8be5\u63a5\u53e3\u9700\u8981\u4eceUrl\u4e2d\u83b7\u53d6\u4e00\u4e2a\u503c\uff0c \u8fd9\u4e2a\u503c\u5f97\u957f\u5ea6\u5927\u5c0f\u4e3a6\uff0c\u4e14\u5fc5\u987b\u4e3a\u82f1\u6587\u5b57\u6bcdu\u5f00\u5934\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc if isinstance ( exc , ValidationError ): return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value : str = field . Query . i ( min_length = 6 , max_length = 6 , regex = \"^u\" )) -> JSONResponse : return JSONResponse ({ \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4f7f\u7528 curl \u8fdb\u884c\u4e09\u6b21\u8bf7\u6c42\uff0c\u7b2c\u4e00\u6b21\u4e3a\u6b63\u5e38\u6570\u636e\uff0c\u7b2c\u4e8c\u6b21\u4e3a\u4e0d\u7b26\u5408\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u7b2c\u4e09\u6b21\u4e3a\u957f\u5ea6\u4e0d\u7b26\u5408\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=u66666\" { \"data\" : \"u66666\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=666666\" { \"data\" : [{ \"loc\" : [ \"demo_value\" ] , \"msg\" : \"string does not match regex \\\"^u\\\"\" , \"type\" : \"value_error.str.regex\" , \"ctx\" : { \"pattern\" : \"^u\" }}]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1\" { \"data\" : [{ \"loc\" : [ \"demo_value\" ] , \"msg\" : \"ensure this value has at least 6 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" :6 }}]} 2.7.raw_return \u8be5\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u4e3a False \uff0c\u5982\u679c\u4e3a True \uff0c\u5219 Pait \u4e0d\u4f1a\u6839\u636e\u53c2\u6570\u540d\u6216\u8005 alias \u4e3akey\u4ece\u8bf7\u6c42\u6570\u636e\u83b7\u53d6\u503c\uff0c \u800c\u662f\u628a\u6574\u4e2a\u8bf7\u6c42\u503c\u8fd4\u56de\u7ed9\u5bf9\u5e94\u7684\u53d8\u91cf\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c \u8be5\u63a5\u53e3\u4e3a\u4e00\u4e2aPOST\u63a5\u53e3\uff0c \u8be5\u63a5\u53e3\u9700\u8981\u4e24\u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u503c\u4e3a\u6574\u4e2a\u5ba2\u6237\u7aef\u4f20\u8fc7\u6765\u7684Json\u53c2\u6570\uff0c \u800c\u7b2c\u4e8c\u4e2a\u503c\u4e3a\u5ba2\u6237\u7aef\u4f20\u8fc7\u6765\u7684Json\u53c2\u6570\u4e2dKey\u4e3aa\u7684\u503c\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( demo_value1 : dict = field . Body . i ( raw_return = True ), a : str = field . Body . i (), ) -> JSONResponse : return JSONResponse ({ \"demo_value\" : demo_value1 , \"a\" : a }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"POST\" ])]) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\uff0c \u53ef\u4ee5\u53d1\u73b0\u7ed3\u679c\u7b26\u5408\u9884\u671f\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" -X POST -d '{\"a\": \"1\", \"b\": \"2\"}' --header \"Content-Type: application/json\" { \"demo_value\" : { \"a\" : \"1\" , \"b\" : \"2\" } , \"a\" : \"1\" } 2.8.\u5176\u5b83\u529f\u80fd \u9664\u4e86\u4e0a\u8ff0\u529f\u80fd\u5916\uff0c Pait \u8fd8\u6709\u5176\u5b83\u5c5e\u6027\uff0c \u4f46\u662f\u90fd\u53ea\u4e0eOpenAPI\u6709\u5173\uff0c \u6240\u4ee5\u672c\u7ae0\u53ea\u505a\u7b80\u5355\u4ecb\u7ecd\uff1a link\uff1a\u7528\u4e8e\u652f\u6301OpenApi\u7684link\u529f\u80fd\u3002 media_type\uff1aField\u5bf9\u5e94\u7684media_type\uff0c\u7528\u4e8eOpenAPI\u7684Scheme\u7684\u53c2\u6570media type\u5206\u7c7b\u3002 example\uff1a\u7528\u4e8e\u6587\u6863\u7684\u793a\u4f8b\u503c\uff0c\u4ee5\u53caMock\u8bf7\u6c42\u4e0e\u54cd\u5e94\u7b49Mock\u529f\u80fd\uff0c\u540c\u65f6\u652f\u6301\u53d8\u91cf\u548c\u53ef\u8c03\u7528\u51fd\u6570\u5982 datetime.datetim.now \uff0c\u63a8\u8350\u4e0e faker \u4e00\u8d77\u4f7f\u7528\u3002 openapi_serialization\uff1a\u7528\u4e8e\u8be5\u503c\u5728OpenAPI\u7684Schema\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u3002 description: \u7528\u4e8eOpenAPI\u7684\u53c2\u6570\u63cf\u8ff0","title":"\u5982\u4f55\u4f7f\u7528Field"},{"location":"1_2_how_to_use_field/#1field","text":"\u9664\u4e86\u4e0a\u6587\u63d0\u5230\u7684Body\u5916\uff0c Field \u8fd8\u62e5\u6709\u5176\u5b83\u7684\u79cd\u7c7b\uff0c \u5b83\u4eec\u7684\u540d\u79f0\u548c\u4f5c\u7528\u5982\u4e0b: Body: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684Json\u6570\u636e Cookie: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684Cookie\u6570\u636e(\u6ce8\u610f\uff0c \u76ee\u524dCookie\u6570\u636e\u4f1a\u88ab\u8f6c\u5316\u4e3a\u4e00\u4e2aPython\u5b57\u5178\uff0c \u8fd9\u610f\u5473\u7740Cookie\u7684Key\u4e0d\u80fd\u91cd\u590d\u3002\u540c\u65f6\uff0c \u5728Field\u4e3aCookie\u65f6\uff0c type\u6700\u597d\u662fstr) File\uff1a\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684file\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4e0e\u539f\u6587Web\u6846\u67b6\u7684file\u5bf9\u8c61\u4e00\u81f4 Form\uff1a\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684form\u6570\u636e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u91cd\u590dKey\uff0c\u53ea\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c Header: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684header\u6570\u636e Path: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684path\u6570\u636e\uff0c\u5982 /api/{version}/test \uff0c\u5219\u4f1a\u83b7\u53d6\u5230version\u7684\u6570\u636e Query: \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684Url\u53c2\u6570\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u91cd\u590dKey\uff0c\u53ea\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c MultiForm\uff1a\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684form\u6570\u636e\uff0c \u8fd4\u56deKey\u5bf9\u5e94\u7684\u6570\u636e\u5217\u8868 MultiQuery\uff1a\u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u7684Url\u53c2\u6570\u5bf9\u5e94\u7684\u6570\u636e\uff0c \u8fd4\u56deKey\u5bf9\u5e94\u7684\u6570\u636e\u5217\u8868 \u5404\u4e2a\u79cd\u7c7b\u7684\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u586b\u5165 <name>:<type>=<default> \u4e2d\u7684 default \u4f4d\u7f6e\u5373\u53ef\uff0c\u4ee5\u8fd9\u6bb5\u4ee3\u7801\u4e3a\u4f8b\u5b50(\u4e3a\u4e86\u786e\u4fdd\u80fd\u590d\u5236\u7c98\u8d34\u540e\u8fd0\u884c\uff0c\u6ca1\u6709\u6f14\u793afield.File): from typing import List , Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( form_a : str = field . Form . i (), form_b : str = field . Form . i (), multi_form_c : List [ str ] = field . MultiForm . i (), cookie : dict = field . Cookie . i ( raw_return = True ), multi_user_name : List [ str ] = field . MultiQuery . i ( min_length = 2 , max_length = 4 ), age : int = field . Path . i ( gt = 1 , lt = 100 ), uid : int = field . Query . i ( gt = 10 , lt = 1000 ), user_name : str = field . Query . i ( min_length = 2 , max_length = 4 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" ), accept : str = field . Header . i () ) -> JSONResponse : \"\"\"Test the use of all BaseField-based\"\"\" return JSONResponse ( { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"accept\" : accept , \"form_a\" : form_a , \"form_b\" : form_b , \"form_c\" : multi_form_c , \"cookie\" : cookie , \"multi_user_name\" : multi_user_name , \"age\" : age , \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } ) app = Starlette ( routes = [ Route ( \"/api/demo/ {age} \" , demo , methods = [ \"POST\" ]), ] ) uvicorn . run ( app ) \u8fd9\u6bb5\u4ee3\u7801\u6765\u81ea\u4e8e pait base field example , \u5e76\u505a\u4e86\u4e00\u4e9b\u5c0f\u6539\u52a8\uff0c\u8be5\u63a5\u53e3\u7684\u4e3b\u8981\u8d23\u4efb\u5c31\u662f\u628a\u53c2\u6570\u901a\u8fc7json\u7684\u683c\u5f0f\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002 \u63a5\u4e0b\u6765\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u4e00\u6b21\u8bf7\u6c42\u6d4b\u8bd5\uff0c \u901a\u8fc7\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c Pait \u90fd\u80fd\u901a\u8fc7 field \u7684\u79cd\u7c7b\u51c6\u786e\u7684\u62ff\u5230\u5bf9\u5e94\u7684\u503c\uff0c \u5e76\u8d4b\u503c\u5230\u53d8\u91cf\u4e2d\u3002 curl -X 'POST' \\ 'http://127.0.0.1:8000/api/demo/12?uid=99&user_name=so1n&multi_user_name=so1n' \\ -H 'accept: application/json' \\ -H 'Cookie: cookie=cookie=test cookie' \\ -H 'Content-Type: multipart/form-data' \\ -F 'form_a=a' \\ -F 'form_b=b' \\ -F 'multi_form_c=string,string' { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"accept\" : \"application/json\" , \"form_a\" : \"a\" , \"form_b\" : \"b\" , \"form_c\" : [ \"string,string\" ] , \"cookie\" : { \"cookie\" : \"cookie=test cookie\" } , \"multi_user_name\" : [ \"so1n\" ] , \"age\" : 12 , \"uid\" : 99 , \"user_name\" : \"so1n\" , \"email\" : \"example@xxx.com\" } }","title":"1.Field\u7684\u79cd\u7c7b"},{"location":"1_2_how_to_use_field/#2field","text":"\u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c \u8bf7\u6c42\u4e2d\u6ca1\u6709\u5e26\u4e0a email \u53c2\u6570\uff0c \u4f46\u662f\u8be5\u63a5\u53e3\u4efb\u7136\u53ef\u4ee5\u5f97\u5230 email \u7684\u503c example@xxx.com \uff0c \u8fd9\u662f\u56e0\u4e3a\u5728\u586b\u5199 email \u7684 field \u65f6\uff0c\u6211\u628a example@xxx.com \u586b\u5199\u5230default\u503c\u4e2d\uff0c\u8fd9\u6837 Pait \u4f1a\u5728\u83b7\u53d6\u4e0d\u5230\u8be5\u53d8\u91cf\u7684\u5bf9\u5e94\u503c\u7684\u60c5\u51b5\u4e0b\uff0c`\u4e5f\u80fd\u628a\u9ed8\u8ba4\u503c\u8d4b\u7ed9\u5bf9\u5e94\u7684\u53d8\u91cf\u3002 \u9664\u4e86\u9ed8\u8ba4\u503c\u4e4b\u5916\uff0c field \u4e5f\u6709\u5f88\u591a\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u5927\u90e8\u5206\u6765\u6e90\u4e8e field \u6240\u7ee7\u627f\u7684 pydantic.Field \u3002","title":"2.Field\u7684\u529f\u80fd"},{"location":"1_2_how_to_use_field/#21default","text":"Pait \u901a\u8fc7\u8be5\u53c2\u6570\u652f\u6301\u9ed8\u8ba4\u503c\uff0c \u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u503c\u53ef\u4ee5\u76f4\u63a5\u4e0d\u586b\u5199\u8be5\u53c2\u6570\u7684\u503c\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u4e24\u4e2a\u63a5\u53e3\u90fd\u76f4\u63a5\u8fd4\u56de\u83b7\u53d6\u5230\u7684\u503c demo_value \uff0c\u5176\u4e2d demo \u63a5\u53e3\u5e26\u6709\u9ed8\u8ba4\u503c\uff0c \u9ed8\u8ba4\u503c\u4e3a\u5b57\u7b26\u4e32123\uff0c\u800c demo1 \u63a5\u53e3\u6ca1\u6709\u9ed8\u8ba4\u503c: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException async def api_exception ( request : Request , exc : Exception ) -> PlainTextResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return PlainTextResponse ( str ( exc )) @pait () async def demo ( demo_value : str = field . Query . i ( default = \"123\" )) -> PlainTextResponse : return PlainTextResponse ( demo_value ) @pait () async def demo1 ( demo_value : str = field . Query . i ()) -> PlainTextResponse : return PlainTextResponse ( demo_value ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"GET\" ]), ] ) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6709\u9ed8\u8ba4\u503c\u5f97\u63a5\u53e3 /api/demo \uff0c\u5f53\u6ca1\u6709\u4f20\u53c2\u6570demo_value\u65f6\uff0c\u9ed8\u8ba4\u8fd4\u56de123, \u4f20\u53c2\u6570456\u65f6\uff0c\u8fd4\u56de\u503c\u662f456: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 123 \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=456\" 456 \u800c\u6ca1\u6709\u5e26\u53c2\u6570\u7684\u8bf7\u6c42\u4f1a\u770b\u5230\u6709\u4e2a\u62a5\u9519\uff0c \u63d0\u793a\u6ca1\u6709\u627e\u5230 demo_value \u7684\u503c: \u279c curl \"http://127.0.0.1:8000/api/demo1\" Can not found demo_value value","title":"2.1.default"},{"location":"1_2_how_to_use_field/#22default_factory","text":"\u8be5\u53c2\u6570\u7528\u4e8e\u9ed8\u8ba4\u503c\u662f\u51fd\u6570\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u6765\u586b\u5199\u7c7b\u4f3c\u4e8e datetime.datetime.now \u7684\u9ed8\u8ba4\u503c\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u7b2c\u4e00\u4e2a\u63a5\u53e3\u7684\u9ed8\u8ba4\u503c\u662f\u5f53\u524d\u65f6\u95f4\uff0c \u7b2c\u4e8c\u4e2a\u63a5\u53e3\u7684\u9ed8\u8ba4\u503c\u662fuuid\uff0c\u4ed6\u4eec\u6bcf\u6b21\u8c03\u7528\u6bb5\u8fd4\u56de\u503c\u90fd\u662f\u6536\u5230\u8bf7\u6c42\u65f6\u751f\u6210\u7684: import datetime import uuid import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( now : datetime . datetime = field . Query . i ( default_factory = datetime . datetime . now ) ) -> PlainTextResponse : return PlainTextResponse ( now ) @pait () async def demo1 ( demo_value : str = field . Query . i ( default_factory = lambda : uuid . uuid4 () . hex )) -> PlainTextResponse : return PlainTextResponse ( demo_value ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"GET\" ]), ] ) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u8fd4\u56de\u7684\u7ed3\u679c\u90fd\u662f\u4e0d\u4e00\u6837\u7684: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 2022 -02-07T14:54:29.127519 \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" 2022 -02-07T14:54:33.789994 \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" 7e4659e18103471da9db91ed4843d962 \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" ef84f04fa9fc4ea9a8b44449c76146b8","title":"2.2.default_factory"},{"location":"1_2_how_to_use_field/#23alias","text":"\u53c2\u6570\u7684\u522b\u540d\uff0c\u4e00\u4e9b\u53c2\u6570\u53ef\u80fd\u88ab\u547d\u540d\u4e3a Content-Type , \u4f46\u662fPython\u4e0d\u652f\u6301\u8fd9\u79cd\u547d\u540d\u65b9\u5f0f\uff0c \u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u522b\u540d\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( content_type : str = field . Header . i ( alias = \"Content-Type\" )) -> PlainTextResponse : return PlainTextResponse ( content_type ) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff0c Pait \u6b63\u5e38\u7684\u4eceHeader\u4e2d\u63d0\u53d6 Content-Type \u7684\u503c\u5e76\u8d4b\u7ed9\u4e86content_type: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" -H \"Content-Type:123\" 123","title":"2.3.alias"},{"location":"1_2_how_to_use_field/#24gtgeltlemultiple_of","text":"\u8fd9\u51e0\u4e2a\u503c\u90fd\u662f\u6821\u9a8c\u6570\u5b57\u662f\u5426\u5408\u6cd5\uff0c\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4ed6\u4eec\u7684\u4f5c\u7528\u5404\u4e0d\u76f8\u540c\uff1a gt\uff1a\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u6570\u503c\u662f\u5426\u5927\u4e8e\u8be5\u503c\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728OpenAPI\u6dfb\u52a0 exclusiveMinimum \u5c5e\u6027\u3002 ge\uff1a\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u6570\u503c\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728OpenAPI\u6dfb\u52a0 exclusiveMinimum \u5c5e\u6027\u3002 lt\uff1a\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u6570\u503c\u662f\u5426\u5c0f\u4e8e\u8be5\u503c\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728OpenAPI\u6dfb\u52a0 exclusiveMaximum \u5c5e\u6027\u3002 le\uff1a\u4ec5\u7528\u4e8e\u6570\u503c\u7684\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u6570\u503c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u503c\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728OpenAPI\u6dfb\u52a0 exclusiveMaximum \u5c5e\u6027\u3002 multiple_of\uff1a\u4ec5\u7528\u4e8e\u6570\u5b57\uff0c \u4f1a\u6821\u9a8c\u8be5\u6570\u5b57\u662f\u5426\u662f\u6307\u5b9a\u503c\u5f97\u500d\u6570\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u8fd9\u4e2a\u793a\u4f8b\u4ee3\u7801\u53ea\u6709\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f46\u662f\u63a5\u53d7\u4e86\u4e09\u4e2a\u53c2\u6570 demo_value1 , demo_value2 , demo_value3 \uff0c\u4ed6\u4eec\u5206\u522b\u53ea\u63a5\u6536\u7b26\u5408\u5927\u4e8e1\u5c0f\u4e8e10\uff1b\u7b49\u4e8e1;3\u7684\u500d\u6570\u7684\u4e09\u4e2a\u6570\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u7684\u629b\u9519 return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value1 : int = field . Query . i ( gt = 1 , lt = 10 ), demo_value2 : int = field . Query . i ( ge = 1 , le = 1 ), demo_value3 : int = field . Query . i ( multiple_of = 3 ), ) -> JSONResponse : return JSONResponse ({ \"data\" : [ demo_value1 , demo_value2 , demo_value3 ]}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u7b26\u5408\u8981\u6c42\u5e76\u5f97\u5230\u4e86\u60f3\u8981\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u5219\u4e09\u4e2a\u53c2\u6570\u90fd\u9519\u4e86\uff0c\u5e76\u8fd4\u56de Pydantic.ValidationError \u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4ece\u9519\u8bef\u4fe1\u606f\u53ef\u4ee5\u7b80\u5355\u7684\u770b\u51fa\u6765\u4e09\u4e2a\u53c2\u6570\u90fd\u4e0d\u7b26\u5408\u63a5\u53e3\u8bbe\u7f6e\u7684\u9650\u5b9a\u6761\u4ef6\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value1=2&demo_value2=1&demo_value3=3\" { \"data\" : [ 2 ,1,3 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value1=11&demo_value2=2&demo_value3=2\" { \"data\" : [ { \"loc\" : [ \"demo_value1\" ] , \"msg\" : \"ensure this value is less than 10\" , \"type\" : \"value_error.number.not_lt\" , \"ctx\" : { \"limit_value\" : 10 } } , { \"loc\" : [ \"demo_value2\" ] , \"msg\" : \"ensure this value is less than or equal to 1\" , \"type\" : \"value_error.number.not_le\" , \"ctx\" : { \"limit_value\" : 1 } } , { \"loc\" : [ \"demo_value3\" ] , \"msg\" : \"ensure this value is a multiple of 3\" , \"type\" : \"value_error.number.not_multiple\" , \"ctx\" : { \"multiple_of\" : 3 } } ] }","title":"2.4.\u6570\u5b57\u6821\u9a8c\u4e4bgt\uff0cge\uff0clt\uff0cle\uff0cmultiple_of"},{"location":"1_2_how_to_use_field/#25min_itemsmax_items","text":"\u8fd9\u51e0\u4e2a\u503c\u90fd\u662f\u6821\u9a8c\u6570\u7ec4\u662f\u5426\u5408\u6cd5\uff0c\u4ec5\u7528\u4e8e\u6570\u7ec4\u7684\u7c7b\u578b\uff0c\u4ed6\u4eec\u7684\u4f5c\u7528\u5404\u4e0d\u76f8\u540c\uff1a min_items\uff1a\u4ec5\u7528\u4e8e\u6570\u7ec4\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u5217\u8868\u662f\u5426\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u6307\u5b9a\u7684\u503c\u3002 max_items\uff1a \u4ec5\u7528\u4e8e\u6570\u7ec4\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u5217\u8868\u662f\u5426\u6ee1\u8db3\u5c0f\u4e8e\u7b49\u4e8e\u6307\u5b9a\u7684\u503c\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u8be5\u63a5\u53e3\u901a\u8fc7 field.MultiQuery \u4ece\u8bf7\u6c42Url\u4e2d\u83b7\u53d6\u53c2\u6570 demo_value \u7684\u6570\u7ec4\uff0c\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\uff0c\u5176\u4e2d\u6570\u7ec4\u7684\u957f\u5ea6\u9650\u5b9a\u5728\u5927\u4e8e\u7b49\u4e8e1\u4e14\u5c0f\u4e8e\u7b49\u4e8e2\u4e4b\u95f4\uff1a from typing import List import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc if isinstance ( exc , ValidationError ): return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value : List [ int ] = field . MultiQuery . i ( min_items = 1 , max_items = 2 )) -> JSONResponse : return JSONResponse ({ \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4e0e2.4\u4e00\u6837\uff0c\u901a\u8fc7 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\u5408\u6cd5\u7684\u53c2\u6570\u4f1a\u653e\u884c\uff0c\u4e0d\u5408\u6cd5\u7684\u53c2\u6570\u4f1a\u629b\u9519\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1\" { \"data\" : [ 1 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1&demo_value=2\" { \"data\" : [ 1 ,2 ]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1&demo_value=2&demo_value=3\" { \"data\" : [ { \"loc\" : [ \"demo_value\" ] , \"msg\" : \"ensure this value has at most 2 items\" , \"type\" : \"value_error.list.max_items\" , \"ctx\" : { \"limit_value\" : 2 } } ] }","title":"2.5.\u6570\u7ec4\u6821\u9a8c\u4e4bmin_items\uff0cmax_items"},{"location":"1_2_how_to_use_field/#26min_lengthmax_lengthregex","text":"\u8fd9\u51e0\u4e2a\u503c\u90fd\u662f\u6821\u9a8c\u5b57\u7b26\u4e32\u662f\u5426\u5408\u6cd5\uff0c\u4ec5\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u7c7b\u578b\uff0c\u4ed6\u4eec\u7684\u4f5c\u7528\u5404\u4e0d\u76f8\u540c\uff1a min_length\uff1a\u4ec5\u7528\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u6307\u5b9a\u7684\u503c\u3002 max_length\uff1a\u4ec5\u7528\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426\u6ee1\u8db3\u5c0f\u4e8e\u7b49\u4e8e\u6307\u5b9a\u7684\u503c\u3002 regex\uff1a\u4ec5\u7528\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f1a\u6821\u9a8c\u5b57\u7b26\u4e32\u662f\u5426\u7b26\u5408\u8be5\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c \u8be5\u63a5\u53e3\u9700\u8981\u4eceUrl\u4e2d\u83b7\u53d6\u4e00\u4e2a\u503c\uff0c \u8fd9\u4e2a\u503c\u5f97\u957f\u5ea6\u5927\u5c0f\u4e3a6\uff0c\u4e14\u5fc5\u987b\u4e3a\u82f1\u6587\u5b57\u6bcdu\u5f00\u5934\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field from pait.exceptions import TipException from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc if isinstance ( exc , ValidationError ): return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( demo_value : str = field . Query . i ( min_length = 6 , max_length = 6 , regex = \"^u\" )) -> JSONResponse : return JSONResponse ({ \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4f7f\u7528 curl \u8fdb\u884c\u4e09\u6b21\u8bf7\u6c42\uff0c\u7b2c\u4e00\u6b21\u4e3a\u6b63\u5e38\u6570\u636e\uff0c\u7b2c\u4e8c\u6b21\u4e3a\u4e0d\u7b26\u5408\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u7b2c\u4e09\u6b21\u4e3a\u957f\u5ea6\u4e0d\u7b26\u5408\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=u66666\" { \"data\" : \"u66666\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=666666\" { \"data\" : [{ \"loc\" : [ \"demo_value\" ] , \"msg\" : \"string does not match regex \\\"^u\\\"\" , \"type\" : \"value_error.str.regex\" , \"ctx\" : { \"pattern\" : \"^u\" }}]} \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=1\" { \"data\" : [{ \"loc\" : [ \"demo_value\" ] , \"msg\" : \"ensure this value has at least 6 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" :6 }}]}","title":"2.6.\u5b57\u7b26\u4e32\u6821\u9a8c\u4e4bmin_length\uff0cmax_length\uff0cregex"},{"location":"1_2_how_to_use_field/#27raw_return","text":"\u8be5\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u4e3a False \uff0c\u5982\u679c\u4e3a True \uff0c\u5219 Pait \u4e0d\u4f1a\u6839\u636e\u53c2\u6570\u540d\u6216\u8005 alias \u4e3akey\u4ece\u8bf7\u6c42\u6570\u636e\u83b7\u53d6\u503c\uff0c \u800c\u662f\u628a\u6574\u4e2a\u8bf7\u6c42\u503c\u8fd4\u56de\u7ed9\u5bf9\u5e94\u7684\u53d8\u91cf\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c \u8be5\u63a5\u53e3\u4e3a\u4e00\u4e2aPOST\u63a5\u53e3\uff0c \u8be5\u63a5\u53e3\u9700\u8981\u4e24\u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u503c\u4e3a\u6574\u4e2a\u5ba2\u6237\u7aef\u4f20\u8fc7\u6765\u7684Json\u53c2\u6570\uff0c \u800c\u7b2c\u4e8c\u4e2a\u503c\u4e3a\u5ba2\u6237\u7aef\u4f20\u8fc7\u6765\u7684Json\u53c2\u6570\u4e2dKey\u4e3aa\u7684\u503c\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( demo_value1 : dict = field . Body . i ( raw_return = True ), a : str = field . Body . i (), ) -> JSONResponse : return JSONResponse ({ \"demo_value\" : demo_value1 , \"a\" : a }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"POST\" ])]) uvicorn . run ( app ) \u4f7f\u7528 curl \u8c03\u7528\uff0c \u53ef\u4ee5\u53d1\u73b0\u7ed3\u679c\u7b26\u5408\u9884\u671f\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" -X POST -d '{\"a\": \"1\", \"b\": \"2\"}' --header \"Content-Type: application/json\" { \"demo_value\" : { \"a\" : \"1\" , \"b\" : \"2\" } , \"a\" : \"1\" }","title":"2.7.raw_return"},{"location":"1_2_how_to_use_field/#28","text":"\u9664\u4e86\u4e0a\u8ff0\u529f\u80fd\u5916\uff0c Pait \u8fd8\u6709\u5176\u5b83\u5c5e\u6027\uff0c \u4f46\u662f\u90fd\u53ea\u4e0eOpenAPI\u6709\u5173\uff0c \u6240\u4ee5\u672c\u7ae0\u53ea\u505a\u7b80\u5355\u4ecb\u7ecd\uff1a link\uff1a\u7528\u4e8e\u652f\u6301OpenApi\u7684link\u529f\u80fd\u3002 media_type\uff1aField\u5bf9\u5e94\u7684media_type\uff0c\u7528\u4e8eOpenAPI\u7684Scheme\u7684\u53c2\u6570media type\u5206\u7c7b\u3002 example\uff1a\u7528\u4e8e\u6587\u6863\u7684\u793a\u4f8b\u503c\uff0c\u4ee5\u53caMock\u8bf7\u6c42\u4e0e\u54cd\u5e94\u7b49Mock\u529f\u80fd\uff0c\u540c\u65f6\u652f\u6301\u53d8\u91cf\u548c\u53ef\u8c03\u7528\u51fd\u6570\u5982 datetime.datetim.now \uff0c\u63a8\u8350\u4e0e faker \u4e00\u8d77\u4f7f\u7528\u3002 openapi_serialization\uff1a\u7528\u4e8e\u8be5\u503c\u5728OpenAPI\u7684Schema\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u3002 description: \u7528\u4e8eOpenAPI\u7684\u53c2\u6570\u63cf\u8ff0","title":"2.8.\u5176\u5b83\u529f\u80fd"},{"location":"1_3_how_to_use_type/","text":"Type \u7528\u4e8e\u6307\u660e\u8be5\u53c2\u6570\u503c\u7684\u6700\u7ec8\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c Pait \u5728\u5185\u90e8\u4f1a\u628a\u7528\u6237\u586b\u5199\u7684\u503c\u8f6c\u6362\u4e3a Pydantic.BaseModel \uff0c\u5e76\u901a\u8fc7 pydantic \u8fdb\u884c\u6821\u9a8c\uff0c \u5982\u4e0b\u9762\u7684\u63a5\u53e3: @pait () async def demo ( a : str = field . Body . i (), b : int = field . Body . i (), ) -> JSONResponse : return JSONResponse ({ \"a\" : a , \"b\" : b }) \u5728 Pait \u5185\u90e8\uff0c \u4f1a\u8ba4\u4e3a\u8be5\u63a5\u53e3\u9700\u8981\u7684\u662f\u4e00\u4e2a Pydantic.BaseModel : from pydantic import BaseModel , Field class Demo ( BaseModel ): a : str = Field () b : int = Field () \u6240\u4ee5\u5728\u63a5\u53e3\u4e2d Type \u53ef\u4ee5\u53d8\u5f97\u975e\u5e38\u7075\u6d3b\uff0c\u4f60\u53ef\u4ee5\u50cf Pydantic Field Types \u4e00\u6837\u4f7f\u7528\u4ee5\u53ca\u76f4\u63a5\u4f7f\u7528 Pydantic Field Types \u7684\u62d3\u5c55Type\u3002 \u6b64\u5916\uff0c Pait \u7684 Type \u8fd8\u652f\u6301\u5176\u5b83\u7684\u529f\u80fd\u3002 1.\u4f7f\u7528Pydantic.BaseModel \u5728\u4f7f\u7528\u4e86 Pait \u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u53d1\u73b0\u6709\u4e9b\u63a5\u53e3\u7684\u53c2\u6570\u53ef\u80fd\u53ef\u4ee5\u590d\u7528\uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528 Type \u4e3aPydantic.BaseModel\u7684\u65b9\u6848\uff0c\u628a\u4e24\u4e2a\u63a5\u53e3\u91cd\u590d\u7684\u53c2\u6570\u62bd\u8c61\u4e3a\u4e00\u4e2apydantic.Basemodel \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c \u9996\u5148\u662f12\u884c\u7684 DemoModel \uff0c\u5b83\u7ee7\u627f\u4e8e Pydantic.BaseModel \u4e14\u6709\u4e09\u4e2a\u5c5e\u6027 uid , name \u4ee5\u53ca age \uff0c\u7136\u540e\u6709\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u63a5\u53e3\uff0c \u63a5\u53e3 demo \u4eceUrl\u4e2d\u83b7\u53d6\u6240\u6709\u7684\u503c\uff0c\u5e76\u4ea4\u7ed9 DemoModel \u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u901a\u8fc7 .dict \u65b9\u6cd5\u751f\u6210dict\u5e76\u8fd4\u56de\u3002\u63a5\u53e3 demo1 \u4e0e\u63a5\u53e3 demo \u5f88\u50cf\uff0c \u53ea\u4e0d\u8fc7\u662f\u4eceJson Body\u83b7\u53d6\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait from pydantic import BaseModel class demomodel ( basemodel ): uid : str name : str age : int @pait () async def demo ( demo_model : DemoModel = field . Query . i ( raw_return = True )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) @pait () async def demo1 ( demo_model : DemoModel = field . Body . i ( raw_return = True )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"POST\" ])]) uvicorn . run ( app ) \u63a5\u4e0b\u6765\u4f7f\u7528 curl \u5bf9\u4e24\u4e2a\u63a5\u53e3\u8fdb\u884c\u6d4b\u8bd5\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=u12345&name=so1n&age=10\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" -X POST -d '{\"uid\": \"u12345\", \"name\": \"so1n\", \"age\": 10}' --header \"Content-Type: application/json\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a\u63a5\u53e3\u90fd\u80fd\u6b63\u5e38\u7684\u5de5\u4f5c\uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u7528\u6cd5\u4e0b\uff0cField\u7684\u4f5c\u7528\u662f\u9650\u5b9a\u4e8e\u6574\u4e2aBaseModel\u7684\uff0c\u65e0\u6cd5\u4e3a\u6bcf\u4e00\u4e2a\u5c5e\u6027\u4f7f\u7528\u5355\u72ec\u7684 field \uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u3002 2.\u4f7f\u7528\u7279\u6b8a\u7684Pydantic.BaseModel \u7531\u4e8e Pait \u7684 field \u662f\u7ee7\u627f\u4e8e pydantic.FieldInfo \uff0c\u540c\u65f6\u4e5f\u5185\u7f6e\u4e86\u8f6c\u53d8\u4e3a pydantic.FieldInfo \u7684\u65b9\u6cd5\uff0c \u6240\u4ee5\u5728\u4f7f\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u4e0a\u4e2a\u793a\u4f8b\u7684DemoModel\u8fdb\u884c\u8f6c\u53d8\uff0c \u6bd4\u5982\u5bf9\u4e8e\u63a5\u53e3 demo \uff0cDemoModel\u53ef\u4ee5\u53d8\u4e3a: from pait import field from pydantic import BaseModel class DemoModel ( BaseModel ): uid : str = field . Query . i ( max_length = 6 , min_length = 6 , regex = \"^u\" ) name : str = field . Query . i ( min_length = 4 , max_length = 10 ) age : int = field . Query . i ( ge = 0 , le = 100 ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u90fd\u4f7f\u7528\u4e0d\u4e00\u6837\u7684 field \u4e86\uff0c\u7136\u540e\u63a5\u53e3 demo \u9700\u8981\u8fdb\u884c\u5bf9\u5e94\u7684\u66f4\u6539\uff0c\u7531\u4e8eDemoModel\u5df2\u7ecf\u5e26\u6709\u4e86 pait.field \uff0c \u6240\u4ee5\u63a5\u53e3\u53c2\u6570\u4e0d\u9700\u8981\u6309\u7167\u4e4b\u524d\u7684\u683c\u5f0f\uff0c \u53ef\u4ee5\u76f4\u63a5\u7701\u7565 field \u7684\u586b\u5199\uff0c \u53d8\u4e3a: @pait () async def demo ( demo_model : DemoModel ) -> JSONResponse : return JSONResponse ( demo_model . dict ()) \u8fd9\u6837 Pait \u4e5f\u80fd\u591f\u8ddf\u4e4b\u524d\u4e00\u6837\u6b63\u786e\u5730\u8bc6\u522b\u5e76\u5904\u7406\u4e86\uff0c\u5728\u8003\u8651\u590d\u7528\u540e\u5b9e\u9645\u7684\u4ee3\u7801\u53ef\u4ee5\u7f16\u5199\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait from pydantic import BaseModel , ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u7684\u629b\u9519 return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) def create_demo_model ( pait_field : Type [ field . BaseField ]) -> Type [ BaseModel ]: class DemoModel ( BaseModel ): uid : str = pait_field . i ( max_length = 6 , min_length = 6 , regex = \"^u\" ) name : str = pait_field . i ( min_length = 4 , max_length = 10 ) age : int = pait_field . i ( ge = 0 , le = 100 ) return DemoModel @pait () async def demo ( demo_model : create_demo_model ( field . Query )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) @pait () async def demo1 ( demo_model : create_demo_model ( field . Body )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"POST\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u7531\u4e8e\u8981\u652f\u6301\u590d\u7528\uff0c\u572822\u884c\u4f7f\u7528\u51fd\u6570 create_demo_model \u6765\u6839\u636e\u4f20\u5165\u7684 pait.field \u521b\u5efaDemoModel\uff0c\u7136\u540e33\u884c\u548c38\u884c\u7684\u63a5\u53e3\u51fd\u6570\u8fdb\u884c\u5bf9\u5e94\u7684\u66f4\u6539\uff0c \u6700\u540e\u4f7f\u7528 curl \u8fdb\u884c\u8c03\u7528\u53d1\u73b0\u54cd\u5e94\u7684\u7ed3\u679c\u662f\u6b63\u5e38\u7684\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=u12345&name=so1n&age=10\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" -X POST -d '{\"uid\": \"u12345\", \"name\": \"so1n\", \"age\": 10}' --header \"Content-Type: application/json\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u800c\u4e14\u8fd9\u6837\u7f16\u5199\u7684\u4ee3\u7801\u80fd\u9488\u5bf9\u6bcf\u4e2a\u5c5e\u6027\u8fdb\u884c\u5355\u72ec\u5730\u6821\u9a8c\uff0c\u6bd4\u5982\u4f20\u5165\u4e86\u4e0d\u5408\u6cd5\u7684\u53c2\u6570\uff0c Pait \u4ecd\u7136\u53ef\u4ee5\u628a\u53c2\u6570\u4ea4\u7ed9pydantic\u6821\u9a8c\u5e76\u628a\u9519\u8bef\u629b\u51fa\u6765\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=12345&name=so1&age=-1\" { \"data\" : [ { \"loc\" : [ \"uid\" ] , \"msg\" : \"ensure this value has at least 6 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" : 6 } } , { \"loc\" : [ \"name\" ] , \"msg\" : \"ensure this value has at least 4 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" : 4 } } , { \"loc\" : [ \"age\" ] , \"msg\" : \"ensure this value is greater than or equal to 0\" , \"type\" : \"value_error.number.not_ge\" , \"ctx\" : { \"limit_value\" : 0 } } ] } 3.\u5176\u5b83 3.1.Request\u5bf9\u8c61 \u5728\u4f7f\u7528 Pait \u65f6\uff0c Request \u5bf9\u8c61\u4f7f\u7528\u7684\u9891\u7387\u4f1a\u5927\u5e45\u7684\u964d\u4f4e\uff0c\u6240\u4ee5 Pait \u4f1a\u81ea\u52a8\u628a Request \u5bf9\u8c61\u8fdb\u884c\u7701\u7565\uff0c\u6bd4\u5982\u539f\u672c\u7684 Starlette \u7684\u63a5\u53e3\u5199\u6cd5\u662f\uff1a from starlette.requests import Request async def demo ( request : Request ): pass \u800c\u5728\u4f7f\u7528\u4e86 Pait \u540e\u4f1a\u53d8\u4e3a\uff1a from pait.app.starlette import pait @pait () async def demo (): pass \u8fd9\u65f6\uff0c\u5982\u679c\u4f60\u9700\u8981 Request \u5bf9\u8c61\u6216\u8005\u4f7f\u7528\u4e86 Sanic \u6846\u67b6\uff0c\u5b83\u4e0d\u652f\u6301\u51fd\u6570\u7b7e\u540d\u4e3a\u7a7a\u7684\u8def\u7531\u51fd\u6570\uff0c\u5219\u4efb\u7136\u53ef\u4ee5\u4f7f\u7528\u6846\u67b6\u539f\u672c\u7684\u65b9\u6cd5\u6765\u83b7\u53d6 Request \u5bf9\u8c61\uff0c \u4e0d\u8fc7 Pait \u4f1a\u8981\u6c42\u586b\u5199\u7684 Type \u5fc5\u987b\u662f Request \u5bf9\u8c61\u7684 Type \uff0c\u6bd4\u5982 starlette \u83b7\u53d6 Request \u5bf9\u8c61\u7684\u4ee3\u7801\u5982\u4e0b\uff1a from pait.app.starlette import pait from starlette.requests import Request @pait () async def demo ( request : Request ): pass 3.2.\u5982\u4f55\u81ea\u5b9a\u4e49\u7b26\u5408Pydantic\u6821\u9a8c\u7684Type \u524d\u9762\u63d0\u5230\uff0c\u5728 Pait \u4e2d Type \u8ddfPydantic\u7684 Type \u662f\u4e00\u6837\u7684\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u53ef\u4ee5\u901a\u8fc7 Type \u62d3\u5c55\u6821\u9a8c\u89c4\u5219\u6765\u5f25\u8865 field \u7684\u4e0d\u8db3\uff0c \u6bd4\u5982\u5728\u4e00\u4e2a\u7528\u6237\u53ef\u80fd\u5206\u5e03\u5728\u4e0d\u540c\u56fd\u5bb6\u7684\u4e1a\u52a1\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u9009\u7528\u65f6\u95f4\u6233\u6765\u505a\u65f6\u95f4\u4f20\u9012\uff0c\u9632\u6b62\u65f6\u533a\u4e0d\u540c\u5e26\u6765\u7684\u6570\u636e\u9519\u8bef\uff0c\u8fd9\u65f6\u4ee3\u7801\u53ef\u4ee5\u5199\u4e3a\uff1a import datetime import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait @pait () async def demo ( timestamp : datetime . datetime = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"time\" : timestamp . isoformat ()}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u4f7f\u7528curl\u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff0c Pydantic \u81ea\u52a8\u628a\u65f6\u95f4\u8f6c\u4e3adatetime\u7c7b\u578b\u4e86\uff0c\u4e14\u65f6\u533a\u662fUTC\u65f6\u533a\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?timestamp=1600000000\" { \"time\" : \"2020-09-13T12:26:40+00:00\" } \u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u5047\u8bbe\u8fd9\u4e2a\u4e1a\u52a1\u7684\u6570\u636e\u5e93\u7684\u670d\u52a1\u5668\u662f\u4f4d\u4e8e\u67d0\u4e2a\u975eUTC\u65f6\u533a\uff0c\u6570\u636e\u5e93\u4e0e\u7a0b\u5e8f\u7684\u65f6\u533a\u90fd\u4f9d\u8d56\u4e8e\u673a\u5668\u7684\u65f6\u533a\uff0c\u8fd9\u6837\u5728\u6bcf\u6b21\u83b7\u53d6\u6570\u636e\u540e\u8fd8\u9700\u8981\u518d\u8f6c\u5316\u4e00\u6b21\u53c2\u6570\u7684\u65f6\u533a\uff0c \u975e\u5e38\u9ebb\u70e6\uff0c \u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u7f16\u5199\u4e00\u4e2a\u7b26\u5408 Pydantic \u6821\u9a8c\u7684Type\u7c7b\u6765\u89e3\u51b3\u3002 \u4e00\u4e2a\u7b26\u5408 Pydantic \u6821\u9a8c\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u6ee1\u8db3\u5e26\u6709 __get_validators__ \u7c7b\u65b9\u6cd5\uff0c\u4e14\u8be5\u65b9\u6cd5\u662f\u4e00\u4e2a\u751f\u6210\u5668\uff0c \u4e8e\u662f\u53ef\u4ee5\u81ea\u5df1\u8fd9\u6837\u5b9e\u73b0\u4e00\u4e2a\u65f6\u95f4\u6233\u7684\u8f6c\u6362\u65b9\u6cd5\uff0c\u4f7fPydantic\u5728\u9047\u5230\u65f6\u95f4\u6233\u65f6\uff0c\u80fd\u628a\u65f6\u95f4\u8f6c\u4e3a datetime \u4e14\u8be5\u503c\u5f97\u65f6\u533a\u4e3a\u670d\u52a1\u5668\u7684\u65f6\u533a\uff1a import datetime from typing import Callable , Generator class UnixDatetime ( datetime . datetime ): @classmethod def __get_validators__ ( cls ) -> Generator [ Callable , None , None ]: yield cls . validate @classmethod def validate ( cls , v : int ) -> datetime . datetime : return datetime . datetime . fromtimestamp ( v ) \u7136\u540e\u628a\u8fd9\u4e2a\u7c7b\u5e94\u7528\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff1a import datetime from typing import Callable , Generator , Union import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait class UnixDatetime ( datetime . datetime ): @classmethod def __get_validators__ ( cls ) -> Generator [ Callable , None , None ]: yield cls . validate @classmethod def validate ( cls , v : Union [ int , str ]) -> datetime . datetime : if not isinstance ( v , int ): v = int ( v ) return datetime . datetime . fromtimestamp ( v ) @pait () async def demo ( timestamp : UnixDatetime = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"time\" : timestamp . isoformat ()}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u91cd\u65b0\u8fd0\u884c\u8fd9\u4efd\u4ee3\u7801\u540e\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u6d4b\u8bd5\uff0c \u53d1\u73b0\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u5df2\u7ecf\u6ca1\u6709\u5e26\u65f6\u533a\u4e86\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?timestamp=1600000000\" { \"time\" : \"2020-09-13T20:26:40\" }","title":"\u5982\u4f55\u4f7f\u7528Type"},{"location":"1_3_how_to_use_type/#1pydanticbasemodel","text":"\u5728\u4f7f\u7528\u4e86 Pait \u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u53d1\u73b0\u6709\u4e9b\u63a5\u53e3\u7684\u53c2\u6570\u53ef\u80fd\u53ef\u4ee5\u590d\u7528\uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528 Type \u4e3aPydantic.BaseModel\u7684\u65b9\u6848\uff0c\u628a\u4e24\u4e2a\u63a5\u53e3\u91cd\u590d\u7684\u53c2\u6570\u62bd\u8c61\u4e3a\u4e00\u4e2apydantic.Basemodel \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c \u9996\u5148\u662f12\u884c\u7684 DemoModel \uff0c\u5b83\u7ee7\u627f\u4e8e Pydantic.BaseModel \u4e14\u6709\u4e09\u4e2a\u5c5e\u6027 uid , name \u4ee5\u53ca age \uff0c\u7136\u540e\u6709\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u63a5\u53e3\uff0c \u63a5\u53e3 demo \u4eceUrl\u4e2d\u83b7\u53d6\u6240\u6709\u7684\u503c\uff0c\u5e76\u4ea4\u7ed9 DemoModel \u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u901a\u8fc7 .dict \u65b9\u6cd5\u751f\u6210dict\u5e76\u8fd4\u56de\u3002\u63a5\u53e3 demo1 \u4e0e\u63a5\u53e3 demo \u5f88\u50cf\uff0c \u53ea\u4e0d\u8fc7\u662f\u4eceJson Body\u83b7\u53d6\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait from pydantic import BaseModel class demomodel ( basemodel ): uid : str name : str age : int @pait () async def demo ( demo_model : DemoModel = field . Query . i ( raw_return = True )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) @pait () async def demo1 ( demo_model : DemoModel = field . Body . i ( raw_return = True )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"POST\" ])]) uvicorn . run ( app ) \u63a5\u4e0b\u6765\u4f7f\u7528 curl \u5bf9\u4e24\u4e2a\u63a5\u53e3\u8fdb\u884c\u6d4b\u8bd5\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=u12345&name=so1n&age=10\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" -X POST -d '{\"uid\": \"u12345\", \"name\": \"so1n\", \"age\": 10}' --header \"Content-Type: application/json\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a\u63a5\u53e3\u90fd\u80fd\u6b63\u5e38\u7684\u5de5\u4f5c\uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u7528\u6cd5\u4e0b\uff0cField\u7684\u4f5c\u7528\u662f\u9650\u5b9a\u4e8e\u6574\u4e2aBaseModel\u7684\uff0c\u65e0\u6cd5\u4e3a\u6bcf\u4e00\u4e2a\u5c5e\u6027\u4f7f\u7528\u5355\u72ec\u7684 field \uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u3002","title":"1.\u4f7f\u7528Pydantic.BaseModel"},{"location":"1_3_how_to_use_type/#2pydanticbasemodel","text":"\u7531\u4e8e Pait \u7684 field \u662f\u7ee7\u627f\u4e8e pydantic.FieldInfo \uff0c\u540c\u65f6\u4e5f\u5185\u7f6e\u4e86\u8f6c\u53d8\u4e3a pydantic.FieldInfo \u7684\u65b9\u6cd5\uff0c \u6240\u4ee5\u5728\u4f7f\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u4e0a\u4e2a\u793a\u4f8b\u7684DemoModel\u8fdb\u884c\u8f6c\u53d8\uff0c \u6bd4\u5982\u5bf9\u4e8e\u63a5\u53e3 demo \uff0cDemoModel\u53ef\u4ee5\u53d8\u4e3a: from pait import field from pydantic import BaseModel class DemoModel ( BaseModel ): uid : str = field . Query . i ( max_length = 6 , min_length = 6 , regex = \"^u\" ) name : str = field . Query . i ( min_length = 4 , max_length = 10 ) age : int = field . Query . i ( ge = 0 , le = 100 ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u90fd\u4f7f\u7528\u4e0d\u4e00\u6837\u7684 field \u4e86\uff0c\u7136\u540e\u63a5\u53e3 demo \u9700\u8981\u8fdb\u884c\u5bf9\u5e94\u7684\u66f4\u6539\uff0c\u7531\u4e8eDemoModel\u5df2\u7ecf\u5e26\u6709\u4e86 pait.field \uff0c \u6240\u4ee5\u63a5\u53e3\u53c2\u6570\u4e0d\u9700\u8981\u6309\u7167\u4e4b\u524d\u7684\u683c\u5f0f\uff0c \u53ef\u4ee5\u76f4\u63a5\u7701\u7565 field \u7684\u586b\u5199\uff0c \u53d8\u4e3a: @pait () async def demo ( demo_model : DemoModel ) -> JSONResponse : return JSONResponse ( demo_model . dict ()) \u8fd9\u6837 Pait \u4e5f\u80fd\u591f\u8ddf\u4e4b\u524d\u4e00\u6837\u6b63\u786e\u5730\u8bc6\u522b\u5e76\u5904\u7406\u4e86\uff0c\u5728\u8003\u8651\u590d\u7528\u540e\u5b9e\u9645\u7684\u4ee3\u7801\u53ef\u4ee5\u7f16\u5199\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 from typing import Type import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait from pydantic import BaseModel , ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u7684\u629b\u9519 return JSONResponse ({ \"data\" : exc . errors ()}) return JSONResponse ({ \"data\" : str ( exc )}) def create_demo_model ( pait_field : Type [ field . BaseField ]) -> Type [ BaseModel ]: class DemoModel ( BaseModel ): uid : str = pait_field . i ( max_length = 6 , min_length = 6 , regex = \"^u\" ) name : str = pait_field . i ( min_length = 4 , max_length = 10 ) age : int = pait_field . i ( ge = 0 , le = 100 ) return DemoModel @pait () async def demo ( demo_model : create_demo_model ( field . Query )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) @pait () async def demo1 ( demo_model : create_demo_model ( field . Body )) -> JSONResponse : return JSONResponse ( demo_model . dict ()) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ]), Route ( \"/api/demo1\" , demo1 , methods = [ \"POST\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u7531\u4e8e\u8981\u652f\u6301\u590d\u7528\uff0c\u572822\u884c\u4f7f\u7528\u51fd\u6570 create_demo_model \u6765\u6839\u636e\u4f20\u5165\u7684 pait.field \u521b\u5efaDemoModel\uff0c\u7136\u540e33\u884c\u548c38\u884c\u7684\u63a5\u53e3\u51fd\u6570\u8fdb\u884c\u5bf9\u5e94\u7684\u66f4\u6539\uff0c \u6700\u540e\u4f7f\u7528 curl \u8fdb\u884c\u8c03\u7528\u53d1\u73b0\u54cd\u5e94\u7684\u7ed3\u679c\u662f\u6b63\u5e38\u7684\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=u12345&name=so1n&age=10\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo1\" -X POST -d '{\"uid\": \"u12345\", \"name\": \"so1n\", \"age\": 10}' --header \"Content-Type: application/json\" { \"uid\" : \"u12345\" , \"name\" : \"so1n\" , \"age\" :10 } \u800c\u4e14\u8fd9\u6837\u7f16\u5199\u7684\u4ee3\u7801\u80fd\u9488\u5bf9\u6bcf\u4e2a\u5c5e\u6027\u8fdb\u884c\u5355\u72ec\u5730\u6821\u9a8c\uff0c\u6bd4\u5982\u4f20\u5165\u4e86\u4e0d\u5408\u6cd5\u7684\u53c2\u6570\uff0c Pait \u4ecd\u7136\u53ef\u4ee5\u628a\u53c2\u6570\u4ea4\u7ed9pydantic\u6821\u9a8c\u5e76\u628a\u9519\u8bef\u629b\u51fa\u6765\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=12345&name=so1&age=-1\" { \"data\" : [ { \"loc\" : [ \"uid\" ] , \"msg\" : \"ensure this value has at least 6 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" : 6 } } , { \"loc\" : [ \"name\" ] , \"msg\" : \"ensure this value has at least 4 characters\" , \"type\" : \"value_error.any_str.min_length\" , \"ctx\" : { \"limit_value\" : 4 } } , { \"loc\" : [ \"age\" ] , \"msg\" : \"ensure this value is greater than or equal to 0\" , \"type\" : \"value_error.number.not_ge\" , \"ctx\" : { \"limit_value\" : 0 } } ] }","title":"2.\u4f7f\u7528\u7279\u6b8a\u7684Pydantic.BaseModel"},{"location":"1_3_how_to_use_type/#3","text":"","title":"3.\u5176\u5b83"},{"location":"1_3_how_to_use_type/#31request","text":"\u5728\u4f7f\u7528 Pait \u65f6\uff0c Request \u5bf9\u8c61\u4f7f\u7528\u7684\u9891\u7387\u4f1a\u5927\u5e45\u7684\u964d\u4f4e\uff0c\u6240\u4ee5 Pait \u4f1a\u81ea\u52a8\u628a Request \u5bf9\u8c61\u8fdb\u884c\u7701\u7565\uff0c\u6bd4\u5982\u539f\u672c\u7684 Starlette \u7684\u63a5\u53e3\u5199\u6cd5\u662f\uff1a from starlette.requests import Request async def demo ( request : Request ): pass \u800c\u5728\u4f7f\u7528\u4e86 Pait \u540e\u4f1a\u53d8\u4e3a\uff1a from pait.app.starlette import pait @pait () async def demo (): pass \u8fd9\u65f6\uff0c\u5982\u679c\u4f60\u9700\u8981 Request \u5bf9\u8c61\u6216\u8005\u4f7f\u7528\u4e86 Sanic \u6846\u67b6\uff0c\u5b83\u4e0d\u652f\u6301\u51fd\u6570\u7b7e\u540d\u4e3a\u7a7a\u7684\u8def\u7531\u51fd\u6570\uff0c\u5219\u4efb\u7136\u53ef\u4ee5\u4f7f\u7528\u6846\u67b6\u539f\u672c\u7684\u65b9\u6cd5\u6765\u83b7\u53d6 Request \u5bf9\u8c61\uff0c \u4e0d\u8fc7 Pait \u4f1a\u8981\u6c42\u586b\u5199\u7684 Type \u5fc5\u987b\u662f Request \u5bf9\u8c61\u7684 Type \uff0c\u6bd4\u5982 starlette \u83b7\u53d6 Request \u5bf9\u8c61\u7684\u4ee3\u7801\u5982\u4e0b\uff1a from pait.app.starlette import pait from starlette.requests import Request @pait () async def demo ( request : Request ): pass","title":"3.1.Request\u5bf9\u8c61"},{"location":"1_3_how_to_use_type/#32pydantictype","text":"\u524d\u9762\u63d0\u5230\uff0c\u5728 Pait \u4e2d Type \u8ddfPydantic\u7684 Type \u662f\u4e00\u6837\u7684\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u53ef\u4ee5\u901a\u8fc7 Type \u62d3\u5c55\u6821\u9a8c\u89c4\u5219\u6765\u5f25\u8865 field \u7684\u4e0d\u8db3\uff0c \u6bd4\u5982\u5728\u4e00\u4e2a\u7528\u6237\u53ef\u80fd\u5206\u5e03\u5728\u4e0d\u540c\u56fd\u5bb6\u7684\u4e1a\u52a1\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u9009\u7528\u65f6\u95f4\u6233\u6765\u505a\u65f6\u95f4\u4f20\u9012\uff0c\u9632\u6b62\u65f6\u533a\u4e0d\u540c\u5e26\u6765\u7684\u6570\u636e\u9519\u8bef\uff0c\u8fd9\u65f6\u4ee3\u7801\u53ef\u4ee5\u5199\u4e3a\uff1a import datetime import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait @pait () async def demo ( timestamp : datetime . datetime = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"time\" : timestamp . isoformat ()}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u4f7f\u7528curl\u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff0c Pydantic \u81ea\u52a8\u628a\u65f6\u95f4\u8f6c\u4e3adatetime\u7c7b\u578b\u4e86\uff0c\u4e14\u65f6\u533a\u662fUTC\u65f6\u533a\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?timestamp=1600000000\" { \"time\" : \"2020-09-13T12:26:40+00:00\" } \u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u5047\u8bbe\u8fd9\u4e2a\u4e1a\u52a1\u7684\u6570\u636e\u5e93\u7684\u670d\u52a1\u5668\u662f\u4f4d\u4e8e\u67d0\u4e2a\u975eUTC\u65f6\u533a\uff0c\u6570\u636e\u5e93\u4e0e\u7a0b\u5e8f\u7684\u65f6\u533a\u90fd\u4f9d\u8d56\u4e8e\u673a\u5668\u7684\u65f6\u533a\uff0c\u8fd9\u6837\u5728\u6bcf\u6b21\u83b7\u53d6\u6570\u636e\u540e\u8fd8\u9700\u8981\u518d\u8f6c\u5316\u4e00\u6b21\u53c2\u6570\u7684\u65f6\u533a\uff0c \u975e\u5e38\u9ebb\u70e6\uff0c \u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u7f16\u5199\u4e00\u4e2a\u7b26\u5408 Pydantic \u6821\u9a8c\u7684Type\u7c7b\u6765\u89e3\u51b3\u3002 \u4e00\u4e2a\u7b26\u5408 Pydantic \u6821\u9a8c\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u6ee1\u8db3\u5e26\u6709 __get_validators__ \u7c7b\u65b9\u6cd5\uff0c\u4e14\u8be5\u65b9\u6cd5\u662f\u4e00\u4e2a\u751f\u6210\u5668\uff0c \u4e8e\u662f\u53ef\u4ee5\u81ea\u5df1\u8fd9\u6837\u5b9e\u73b0\u4e00\u4e2a\u65f6\u95f4\u6233\u7684\u8f6c\u6362\u65b9\u6cd5\uff0c\u4f7fPydantic\u5728\u9047\u5230\u65f6\u95f4\u6233\u65f6\uff0c\u80fd\u628a\u65f6\u95f4\u8f6c\u4e3a datetime \u4e14\u8be5\u503c\u5f97\u65f6\u533a\u4e3a\u670d\u52a1\u5668\u7684\u65f6\u533a\uff1a import datetime from typing import Callable , Generator class UnixDatetime ( datetime . datetime ): @classmethod def __get_validators__ ( cls ) -> Generator [ Callable , None , None ]: yield cls . validate @classmethod def validate ( cls , v : int ) -> datetime . datetime : return datetime . datetime . fromtimestamp ( v ) \u7136\u540e\u628a\u8fd9\u4e2a\u7c7b\u5e94\u7528\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff1a import datetime from typing import Callable , Generator , Union import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait class UnixDatetime ( datetime . datetime ): @classmethod def __get_validators__ ( cls ) -> Generator [ Callable , None , None ]: yield cls . validate @classmethod def validate ( cls , v : Union [ int , str ]) -> datetime . datetime : if not isinstance ( v , int ): v = int ( v ) return datetime . datetime . fromtimestamp ( v ) @pait () async def demo ( timestamp : UnixDatetime = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"time\" : timestamp . isoformat ()}) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u91cd\u65b0\u8fd0\u884c\u8fd9\u4efd\u4ee3\u7801\u540e\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u6d4b\u8bd5\uff0c \u53d1\u73b0\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u5df2\u7ecf\u6ca1\u6709\u5e26\u65f6\u533a\u4e86\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?timestamp=1600000000\" { \"time\" : \"2020-09-13T20:26:40\" }","title":"3.2.\u5982\u4f55\u81ea\u5b9a\u4e49\u7b26\u5408Pydantic\u6821\u9a8c\u7684Type"},{"location":"1_4_depend/","text":"Pait \u7684 Depend \u53c2\u8003\u4e86 FastAPI \uff0c\u5b83\u7684\u4f5c\u7528\u8ddf FastAPI \u5f88\u50cf\uff0c \u7528\u6237\u901a\u8fc7 Pait \u7684 Depend \u53ef\u4ee5\u4e00\u4e9b\u529f\u80fd: \u5171\u4eab\u4e00\u4e9b\u76f8\u540c\u7684\u903b\u8f91 \u5b9e\u73b0\u4e00\u4e9b\u5b89\u5168\u6821\u9a8c\u7684\u529f\u80fd \u4e0e\u522b\u7684\u7cfb\u7edf\u4ea4\u4e92(\u5982\u6570\u636e\u5e93)\u3002 NOTE\uff1a\u793a\u4f8b\u4ee3\u7801\u90fd\u662f\u4f7f\u7528 async def \u8bed\u6cd5\uff0c\u5b9e\u9645\u4e0a\u4e5f\u662f\u652f\u6301 def \u8bed\u6cd5\u3002 1.\u4f7f\u7528Depend\u529f\u80fd \u4e00\u822c\u7684\u540e\u7aef\u7cfb\u7edf\u4e2d\u90fd\u5e26\u6709\u7528\u6237Token\u6821\u9a8c\u4e1a\u52a1\uff0c\u8fd9\u4e2a\u4e1a\u52a1\u662f\u975e\u5e38\u7b26\u5408Depend\u7684\u4f7f\u7528\u573a\u666f\u3002 \u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u7528\u6237\u6bcf\u6b21\u8bbf\u95ee\u63a5\u53e3\u65f6\u90fd\u9700\u8981\u5e26\u4e0aToken\uff0c\u670d\u52a1\u7aef\u6536\u5230\u7528\u6237\u7684\u8bf7\u6c42\u540e\u4f1a\u5148\u5224\u65adToken\u662f\u5426\u5408\u6cd5\uff0c\u5982\u679c\u4e0d\u5408\u6cd5\u5219\u4f1a\u8fd4\u56de\u9519\u8bef\uff0c\u5408\u6cd5\u5219\u4f1a\u6267\u884c\u63a5\u53e3\u7684\u903b\u8f91\u3002 \u5982\u679c\u5728\u4f7f\u7528\u7c7b Flask \u8fd9\u7c7b\u578b\u7684\u5faeWeb\u6846\u67b6\uff0c\u90a3\u4e48\u90fd\u4f1a\u9009\u62e9\u4f7f\u7528Python\u88c5\u9970\u5668\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u5171\u4eab\u7528\u6237Token\u6821\u9a8c\uff0c\u6709\u4e9b\u65f6\u5019\u9664\u4e86\u5b9e\u73b0\u6821\u9a8cToken\u5916\uff0c \u8fd8\u4f1a\u6839\u636eToken\u83b7\u53d6uid\u5e76\u4f20\u7ed9\u8def\u7531\u51fd\u6570\u7684\u529f\u80fd\uff0c\u4f46\u662f\u8fd9\u79cd\u5b9e\u73b0\u65b9\u6cd5\u6bd4\u8f83\u52a8\u6001\uff0c\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u5f88\u96be\u68c0\u6d4b\u51fa\u6765\uff0c\u800c\u4f7f\u7528 Pait \u7684 Depend \u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u5176\u4e2d\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u662f\u6a21\u4eff\u6570\u636e\u5e93\u7684\u8c03\u7528\u65b9\u6cd5\uff0c\u76ee\u524d\u5047\u8bbe\u6570\u636e\u5e93\u53ea\u6709token\u4e3a\"u12345\"\u7684\u503c\uff1b\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u8fd9\u6bb5\u51fd\u6570\u53ef\u4ee5\u88ab Pait \u7684 Depend \u4f7f\u7528\uff0c \u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u586b\u5199\u89c4\u5219\u4e0e Pait \u88c5\u9970\u7684\u8def\u7531\u51fd\u6570\u4e00\u81f4\uff0c\u4e4b\u524d\u63d0\u5230\u7684\u4efb\u4f55\u5199\u6cd5\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u800c\u76ee\u524d\u8fd9\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u4eceHeader\u4e2d\u83b7\u53d6Token\uff0c\u5e76\u6821\u9a8cToken\u662f\u5426\u5b58\u5728\uff0c \u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u9519\u3002 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"user\" : token }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u63a5\u7740\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53d1\u73b0\u8fd9\u6bb5\u4ee3\u7801\u5de5\u4f5c\u4e00\u5207\u6b63\u5e38\uff0ctoken\u5b58\u5728\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u629b\u9519\u4fe1\u606f: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u12345\" { \"user\" : \"so1n\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u123456\" { \"data\" : \"Can not found by token:u123456\" } \u6b64\u5916\uff0c Pait \u80fd\u652f\u6301\u591a\u5c42Depend\u5d4c\u5957\u7684\uff0c\u4f46\u662f\u4e00\u822c\u4e0d\u63a8\u8350\u5d4c\u5957\u7684\u5c42\u6570\u592a\u591a\uff0c\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u5047\u8bbeToken\u8981\u7ecf\u8fc7\u4e00\u5c42\u7279\u522b\u7684\u6821\u9a8c\uff0c\u4e14\u8be5\u6821\u9a8c\u903b\u8f91\u4f1a\u88ab\u590d\u7528\uff0c\u5219\u4ee3\u7801\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } def check_token ( token : str = field . Header . i ()) -> str : if len ( token ) != 6 and token [ 0 ] != \"u\" : raise RuntimeError ( \"Illegal Token\" ) return token async def get_user_by_token ( token : str = field . Depends . i ( check_token )) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"user\" : token }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u4e3a\u65b0\u4fee\u6539\u7684\u5730\u65b9\uff0c \u4e3b\u8981\u662f\u65b0\u589e\u4e86\u4e00\u4e2a check_token \u7684\u51fd\u6570\uff0c\u7528\u6765\u83b7\u53d6\u548c\u6821\u9a8cToken\uff0c\u800c get_user_by_token \u5219\u4f9d\u8d56\u4e8e check_token \u83b7\u53d6Token\u5e76\u5224\u65ad\u7528\u6237\u662f\u5426\u5b58\u5728\u3002 \u4f7f\u7528 curl \u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5\uff0c\u53d1\u73b0\u54cd\u5e94\u7ed3\u679c\u6b63\u5e38\uff0c\u4e0d\u7b26\u5408\u6821\u9a8c\u903b\u8f91\u7684\u4f1a\u8fd4\u56de\u629b\u9519\u4fe1\u606f\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u12345\" { \"user\" : \"so1n\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:fu12345\" { \"data\" : \"Illegal Token\" } 2.\u7ed3\u5408Python ContextManager\u7684Depend \u4e0a\u8ff0\u6240\u793a\u7684 Depends \u7528\u6cd5\u867d\u7136\u80fd\u6b63\u5e38\u7684\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4e0d\u80fd\u50cfPython\u88c5\u9970\u5668\u4e00\u6837\u77e5\u9053\u51fd\u6570\u7684\u8fd0\u884c\u60c5\u51b5\uff0c\u5305\u62ec\u51fd\u6570\u662f\u5426\u6b63\u5e38\u8fd0\u884c\uff0c\u51fd\u6570\u4f55\u65f6\u8fd0\u884c\u7ed3\u675f\u7b49\uff0c \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898 Pait \u91c7\u7528\u4e86\u548c pytest.fixture \u4e00\u6837\u7684\u89e3\u51b3\u65b9\u6848--\u5f15\u5165 ContextManager \u3002 \u8fd9\u79cd\u65b9\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u628a\u51fd\u6570\u52a0\u4e0a\u5bf9\u5e94\u7684 ContextManager \u88c5\u9970\u5668\uff0c\u7136\u540e\u6309\u7167\u5b98\u65b9\u6587\u6863\u4f7f\u7528 try , except , finally \u8bed\u6cd5\u5757\u5373\u53ef\u5b9e\u73b0\uff0c\u5982\u4e0b\u4f8b\u5b50: from contextlib import contextmanager from typing import Any , Generator @contextmanager def demo () -> Generator [ Any , Any , Any ]: try : # 1 yield None except Exception : # 2 pass finally : # 3 pass \u8be5\u4f8b\u5b50\u4e2d\u5e8f\u53f71\u7684\u4f4d\u7f6e\u7528\u6765\u7f16\u5199\u6b63\u5e38\u7684\u51fd\u6570\u903b\u8f91\uff0c\u5e76\u901a\u8fc7yield\u8fd4\u56de\u6570\u636e\uff0c\u5e8f\u53f72\u7684\u4f4d\u7f6e\u7528\u6765\u5199\u5f53\u51fd\u6570\u8fd0\u884c\u5f02\u5e38\u65f6\u7684\u4ee3\u7801\u903b\u8f91\uff0c\u6700\u540e\u7684\u5e8f\u53f73\u5219\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u5904\u7406\u903b\u8f91\u3002 Note ContextManager \u7684 Depend \u51fd\u6570\u9664\u4e86\u53c2\u6570\u5916\uff0c\u5176\u4f59\u7684\u7f16\u5199\u65b9\u6cd5\u548c\u5b98\u65b9\u7684\u4e00\u81f4\uff0c\u5177\u4f53\u53ef\u89c1 contextlib \u2014 Utilities for with-statement contexts \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u4f7f\u7528\u4e86 ContextManager \u7684 Depend \u4f8b\u5b50\uff0c \u8be5\u4f8b\u5b50\u5047\u8bbe\u6bcf\u6b21\u8c03\u7528\u8bf7\u6c42\u65f6\u90fd\u4f1a\u57fa\u4e8e\u5bf9\u5e94\u7684uid\u521b\u5efa\u4e00\u4e2aSession\uff0c\u8bf7\u6c42\u7ed3\u675f\u65f6\u4f1a\u81ea\u52a8\u5173\u95ed\uff1a from contextlib import asynccontextmanager from typing import Any , AsyncGenerator import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) class _DemoSession ( object ): def __init__ ( self , uid : int ) -> None : self . _uid : int = uid self . _status : bool = False @property def uid ( self ) -> int : if self . _status : return self . _uid else : raise RuntimeError ( \"Session is close\" ) def create ( self ) -> None : self . _status = True def close ( self ) -> None : self . _status = False @asynccontextmanager async def async_context_depend ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 )) -> AsyncGenerator [ int , Any ]: session : _DemoSession = _DemoSession ( uid ) try : print ( \"context_depend init\" ) session . create () yield session . uid except Exception : print ( \"context_depend error\" ) finally : print ( \"context_depend exit\" ) session . close () @pait () async def demo ( uid : str = field . Depends . i ( async_context_depend ), is_raise : bool = field . Query . i ( default = False ) ) -> JSONResponse : if is_raise : raise RuntimeError () return JSONResponse ({ \"code\" : 0 , \"msg\" : uid }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4ee3\u7801\u4e2d\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u662f\u6a21\u62df\u4e00\u4e2a\u57fa\u4e8eUid\u7684Session\uff0c\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u5219\u662f\u4e00\u6bb5\u5e26\u6709 ContextManger \u7684Depends\u51fd\u6570\uff0c\u5e76\u5206\u522b\u5728 try , except \u4ee5\u53ca finally \u6253\u5370\u4e0d\u540c\u7684\u5185\u5bb9\uff0c \u800c\u7b2c\u4e09\u5757\u5219\u662f\u8def\u7531\u51fd\u6570\uff0c\u5b83\u4f1a\u4f9d\u636e\u53c2\u6570 is_raise \u662f\u5426\u4e3a True \u6765\u51b3\u5b9a\u629b\u9519\u8fd8\u662f\u6b63\u5e38\u8fd4\u56de\u3002 \u73b0\u5728\u8fd0\u884c\u4ee3\u7801\u5e76\u4f7f\u7528 curl \u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5\uff0c\u53d1\u73b0\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u662f\u901a\u8fc7\u7684\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u53d1\u751f\u5f02\u5e38\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=999\" { \"code\" :0, \"msg\" :999 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=999&is_raise=True\" { \"data\" : \"\" } \u8fd9\u65f6\u5207\u56de\u5230\u8fd0\u884cPython\u8fdb\u7a0b\u7684\u7ec8\u7aef\uff0c\u53ef\u4ee5\u53d1\u73b0\u7ec8\u7aef\u6253\u5370\u4e86\u5982\u4e0b\u6570\u636e: context_depend init context_depend exit INFO: 127 .0.0.1:44162 - \"GET /api/demo?uid=999 HTTP/1.1\" 200 OK context_depend init context_depend error context_depend exit INFO: 127 .0.0.1:44164 - \"GET /api/demo?uid=999&is_raise=True HTTP/1.1\" 200 OK \u4ece\u8f93\u51fa\u7684\u6570\u636e\u53ef\u4ee5\u770b\u51fa\uff0c \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u53ea\u6253\u5370\u4e86 init \u548c exit \uff0c\u800c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u4f1a\u4ea7\u751f\u5f02\u5e38\u7684\u8bf7\u6c42\u5219\u591a\u6253\u5370\u4e86 error \u3002 3.Pre-Depend \u5728\u4e00\u4e9b\u573a\u666f\u4e0b\u53ea\u9700\u8981 Depends \u51fd\u6570\u6267\u884c\u6821\u9a8c\u903b\u8f91\uff0c\u5982\u679c\u6821\u9a8c\u5931\u8d25\u5c31\u629b\u51fa\u9519\u8bef\uff0c\u63a5\u53e3\u5e76\u4e0d\u9700\u8981 Depends \u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u6bd4\u5982\u5728\u7b2c\u4e00\u4e2a\u573a\u666f\u4e2d\uff0c \u4e0d\u9700\u8981\u7528\u5230\u51fd\u6570 get_user_by_token \u7684\u8fd4\u56de\u503c\uff0c\u4ee3\u7801\u5219\u4f1a\u53d8\u6210\u8fd9\u6837: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5982\u679c\u8fd9\u6bb5\u4ee3\u7801\u662f\u4f7f\u7528IDE\u8fdb\u884c\u7f16\u5199\u7684\uff0c\u90a3\u4e48\u9ad8\u4eae\u5904\u7684token\u53d8\u91cf\u4f1a\u88ab\u6253\u4e0a\u4e0b\u5212\u7ebf\uff0c\u5982\u679c\u4f7f\u7528 pyflake \u8fdb\u884c\u4ee3\u7801\u68c0\u6d4b\uff0c\u53ef\u80fd\u4f1a\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u8fd9\u65f6\u53ef\u4ee5\u628a\u9ad8\u4eae\u5904\u4ee3\u7801\u7684token\u53c2\u6570\u540d\u6539\u4e3a _ : @pait () async def demo ( _ : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) \u6765\u89e3\u51b3\u95ee\u9898\uff0c \u4f46\u662fPython\u662f\u4e0d\u652f\u6301\u4e00\u4e2a\u51fd\u6570\u5185\u51fa\u73b0\u76f8\u540c\u540d\u5b57\u7684\u53d8\u91cf\uff0c \u8fd9\u610f\u5473\u7740\u6709\u591a\u4e2a\u7c7b\u4f3c\u7684\u53c2\u6570\u65f6\uff0c\u4e0d\u80fd\u628a\u4ed6\u4eec\u53d8\u91cf\u540d\u90fd\u6539\u4e3a _ \u3002 \u4e3a\u6b64\uff0c Pait \u901a\u8fc7\u53ef\u9009\u53c2\u6570 pre_depend_list \u6765\u63d0\u4f9b\u4e86 Pre-Depends \u529f\u80fd\uff0c\u7528\u6237\u53ea\u9700\u8981\u628a\u51fd\u6570\u4f20\u5165\u5230Pait\u7684pre_depend_list\u53ef\u9009\u53c2\u6570\u5373\u53ef\uff0c \u4ee3\u7801\u7684\u903b\u8f91\u548c\u529f\u80fd\u5747\u4e0d\u4f1a\u88ab\u53d7\u5230\u5f71\u54cd\uff0c\u8fd9\u6837\u4fee\u6539\u540e\u4ee3\u7801\u4f1a\u53d8\u4e3a\u5982\u4e0b\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait ( pre_depend_list = [ get_user_by_token ]) async def demo () -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Note \u8fd9\u79cd\u60c5\u51b5\u4e0b Pait \u4f1a\u5148\u6267\u884c pre_depend_list \u7684\u51fd\u6570\u518d\u6267\u884c\u8def\u7531\u51fd\u6570\u3002","title":"Depend"},{"location":"1_4_depend/#1depend","text":"\u4e00\u822c\u7684\u540e\u7aef\u7cfb\u7edf\u4e2d\u90fd\u5e26\u6709\u7528\u6237Token\u6821\u9a8c\u4e1a\u52a1\uff0c\u8fd9\u4e2a\u4e1a\u52a1\u662f\u975e\u5e38\u7b26\u5408Depend\u7684\u4f7f\u7528\u573a\u666f\u3002 \u5728\u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u7528\u6237\u6bcf\u6b21\u8bbf\u95ee\u63a5\u53e3\u65f6\u90fd\u9700\u8981\u5e26\u4e0aToken\uff0c\u670d\u52a1\u7aef\u6536\u5230\u7528\u6237\u7684\u8bf7\u6c42\u540e\u4f1a\u5148\u5224\u65adToken\u662f\u5426\u5408\u6cd5\uff0c\u5982\u679c\u4e0d\u5408\u6cd5\u5219\u4f1a\u8fd4\u56de\u9519\u8bef\uff0c\u5408\u6cd5\u5219\u4f1a\u6267\u884c\u63a5\u53e3\u7684\u903b\u8f91\u3002 \u5982\u679c\u5728\u4f7f\u7528\u7c7b Flask \u8fd9\u7c7b\u578b\u7684\u5faeWeb\u6846\u67b6\uff0c\u90a3\u4e48\u90fd\u4f1a\u9009\u62e9\u4f7f\u7528Python\u88c5\u9970\u5668\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u5171\u4eab\u7528\u6237Token\u6821\u9a8c\uff0c\u6709\u4e9b\u65f6\u5019\u9664\u4e86\u5b9e\u73b0\u6821\u9a8cToken\u5916\uff0c \u8fd8\u4f1a\u6839\u636eToken\u83b7\u53d6uid\u5e76\u4f20\u7ed9\u8def\u7531\u51fd\u6570\u7684\u529f\u80fd\uff0c\u4f46\u662f\u8fd9\u79cd\u5b9e\u73b0\u65b9\u6cd5\u6bd4\u8f83\u52a8\u6001\uff0c\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u5f88\u96be\u68c0\u6d4b\u51fa\u6765\uff0c\u800c\u4f7f\u7528 Pait \u7684 Depend \u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff0c\u5176\u4e2d\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u662f\u6a21\u4eff\u6570\u636e\u5e93\u7684\u8c03\u7528\u65b9\u6cd5\uff0c\u76ee\u524d\u5047\u8bbe\u6570\u636e\u5e93\u53ea\u6709token\u4e3a\"u12345\"\u7684\u503c\uff1b\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u8fd9\u6bb5\u51fd\u6570\u53ef\u4ee5\u88ab Pait \u7684 Depend \u4f7f\u7528\uff0c \u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u586b\u5199\u89c4\u5219\u4e0e Pait \u88c5\u9970\u7684\u8def\u7531\u51fd\u6570\u4e00\u81f4\uff0c\u4e4b\u524d\u63d0\u5230\u7684\u4efb\u4f55\u5199\u6cd5\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u800c\u76ee\u524d\u8fd9\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u4eceHeader\u4e2d\u83b7\u53d6Token\uff0c\u5e76\u6821\u9a8cToken\u662f\u5426\u5b58\u5728\uff0c \u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u9519\u3002 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"user\" : token }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u63a5\u7740\u4f7f\u7528 curl \u547d\u4ee4\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53d1\u73b0\u8fd9\u6bb5\u4ee3\u7801\u5de5\u4f5c\u4e00\u5207\u6b63\u5e38\uff0ctoken\u5b58\u5728\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u629b\u9519\u4fe1\u606f: \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u12345\" { \"user\" : \"so1n\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u123456\" { \"data\" : \"Can not found by token:u123456\" } \u6b64\u5916\uff0c Pait \u80fd\u652f\u6301\u591a\u5c42Depend\u5d4c\u5957\u7684\uff0c\u4f46\u662f\u4e00\u822c\u4e0d\u63a8\u8350\u5d4c\u5957\u7684\u5c42\u6570\u592a\u591a\uff0c\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u5047\u8bbeToken\u8981\u7ecf\u8fc7\u4e00\u5c42\u7279\u522b\u7684\u6821\u9a8c\uff0c\u4e14\u8be5\u6821\u9a8c\u903b\u8f91\u4f1a\u88ab\u590d\u7528\uff0c\u5219\u4ee3\u7801\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } def check_token ( token : str = field . Header . i ()) -> str : if len ( token ) != 6 and token [ 0 ] != \"u\" : raise RuntimeError ( \"Illegal Token\" ) return token async def get_user_by_token ( token : str = field . Depends . i ( check_token )) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"user\" : token }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u4e3a\u65b0\u4fee\u6539\u7684\u5730\u65b9\uff0c \u4e3b\u8981\u662f\u65b0\u589e\u4e86\u4e00\u4e2a check_token \u7684\u51fd\u6570\uff0c\u7528\u6765\u83b7\u53d6\u548c\u6821\u9a8cToken\uff0c\u800c get_user_by_token \u5219\u4f9d\u8d56\u4e8e check_token \u83b7\u53d6Token\u5e76\u5224\u65ad\u7528\u6237\u662f\u5426\u5b58\u5728\u3002 \u4f7f\u7528 curl \u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5\uff0c\u53d1\u73b0\u54cd\u5e94\u7ed3\u679c\u6b63\u5e38\uff0c\u4e0d\u7b26\u5408\u6821\u9a8c\u903b\u8f91\u7684\u4f1a\u8fd4\u56de\u629b\u9519\u4fe1\u606f\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:u12345\" { \"user\" : \"so1n\" } \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" --header \"token:fu12345\" { \"data\" : \"Illegal Token\" }","title":"1.\u4f7f\u7528Depend\u529f\u80fd"},{"location":"1_4_depend/#2python-contextmanagerdepend","text":"\u4e0a\u8ff0\u6240\u793a\u7684 Depends \u7528\u6cd5\u867d\u7136\u80fd\u6b63\u5e38\u7684\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4e0d\u80fd\u50cfPython\u88c5\u9970\u5668\u4e00\u6837\u77e5\u9053\u51fd\u6570\u7684\u8fd0\u884c\u60c5\u51b5\uff0c\u5305\u62ec\u51fd\u6570\u662f\u5426\u6b63\u5e38\u8fd0\u884c\uff0c\u51fd\u6570\u4f55\u65f6\u8fd0\u884c\u7ed3\u675f\u7b49\uff0c \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898 Pait \u91c7\u7528\u4e86\u548c pytest.fixture \u4e00\u6837\u7684\u89e3\u51b3\u65b9\u6848--\u5f15\u5165 ContextManager \u3002 \u8fd9\u79cd\u65b9\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u628a\u51fd\u6570\u52a0\u4e0a\u5bf9\u5e94\u7684 ContextManager \u88c5\u9970\u5668\uff0c\u7136\u540e\u6309\u7167\u5b98\u65b9\u6587\u6863\u4f7f\u7528 try , except , finally \u8bed\u6cd5\u5757\u5373\u53ef\u5b9e\u73b0\uff0c\u5982\u4e0b\u4f8b\u5b50: from contextlib import contextmanager from typing import Any , Generator @contextmanager def demo () -> Generator [ Any , Any , Any ]: try : # 1 yield None except Exception : # 2 pass finally : # 3 pass \u8be5\u4f8b\u5b50\u4e2d\u5e8f\u53f71\u7684\u4f4d\u7f6e\u7528\u6765\u7f16\u5199\u6b63\u5e38\u7684\u51fd\u6570\u903b\u8f91\uff0c\u5e76\u901a\u8fc7yield\u8fd4\u56de\u6570\u636e\uff0c\u5e8f\u53f72\u7684\u4f4d\u7f6e\u7528\u6765\u5199\u5f53\u51fd\u6570\u8fd0\u884c\u5f02\u5e38\u65f6\u7684\u4ee3\u7801\u903b\u8f91\uff0c\u6700\u540e\u7684\u5e8f\u53f73\u5219\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u51fd\u6570\u8fd0\u884c\u7ed3\u675f\u5904\u7406\u903b\u8f91\u3002 Note ContextManager \u7684 Depend \u51fd\u6570\u9664\u4e86\u53c2\u6570\u5916\uff0c\u5176\u4f59\u7684\u7f16\u5199\u65b9\u6cd5\u548c\u5b98\u65b9\u7684\u4e00\u81f4\uff0c\u5177\u4f53\u53ef\u89c1 contextlib \u2014 Utilities for with-statement contexts \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u4f7f\u7528\u4e86 ContextManager \u7684 Depend \u4f8b\u5b50\uff0c \u8be5\u4f8b\u5b50\u5047\u8bbe\u6bcf\u6b21\u8c03\u7528\u8bf7\u6c42\u65f6\u90fd\u4f1a\u57fa\u4e8e\u5bf9\u5e94\u7684uid\u521b\u5efa\u4e00\u4e2aSession\uff0c\u8bf7\u6c42\u7ed3\u675f\u65f6\u4f1a\u81ea\u52a8\u5173\u95ed\uff1a from contextlib import asynccontextmanager from typing import Any , AsyncGenerator import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) class _DemoSession ( object ): def __init__ ( self , uid : int ) -> None : self . _uid : int = uid self . _status : bool = False @property def uid ( self ) -> int : if self . _status : return self . _uid else : raise RuntimeError ( \"Session is close\" ) def create ( self ) -> None : self . _status = True def close ( self ) -> None : self . _status = False @asynccontextmanager async def async_context_depend ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 )) -> AsyncGenerator [ int , Any ]: session : _DemoSession = _DemoSession ( uid ) try : print ( \"context_depend init\" ) session . create () yield session . uid except Exception : print ( \"context_depend error\" ) finally : print ( \"context_depend exit\" ) session . close () @pait () async def demo ( uid : str = field . Depends . i ( async_context_depend ), is_raise : bool = field . Query . i ( default = False ) ) -> JSONResponse : if is_raise : raise RuntimeError () return JSONResponse ({ \"code\" : 0 , \"msg\" : uid }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u4ee3\u7801\u4e2d\u7b2c\u4e00\u6bb5\u9ad8\u4eae\u662f\u6a21\u62df\u4e00\u4e2a\u57fa\u4e8eUid\u7684Session\uff0c\u7b2c\u4e8c\u6bb5\u9ad8\u4eae\u5219\u662f\u4e00\u6bb5\u5e26\u6709 ContextManger \u7684Depends\u51fd\u6570\uff0c\u5e76\u5206\u522b\u5728 try , except \u4ee5\u53ca finally \u6253\u5370\u4e0d\u540c\u7684\u5185\u5bb9\uff0c \u800c\u7b2c\u4e09\u5757\u5219\u662f\u8def\u7531\u51fd\u6570\uff0c\u5b83\u4f1a\u4f9d\u636e\u53c2\u6570 is_raise \u662f\u5426\u4e3a True \u6765\u51b3\u5b9a\u629b\u9519\u8fd8\u662f\u6b63\u5e38\u8fd4\u56de\u3002 \u73b0\u5728\u8fd0\u884c\u4ee3\u7801\u5e76\u4f7f\u7528 curl \u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5\uff0c\u53d1\u73b0\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u662f\u901a\u8fc7\u7684\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u53d1\u751f\u5f02\u5e38\uff1a \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=999\" { \"code\" :0, \"msg\" :999 } \u279c ~ curl \"http://127.0.0.1:8000/api/demo?uid=999&is_raise=True\" { \"data\" : \"\" } \u8fd9\u65f6\u5207\u56de\u5230\u8fd0\u884cPython\u8fdb\u7a0b\u7684\u7ec8\u7aef\uff0c\u53ef\u4ee5\u53d1\u73b0\u7ec8\u7aef\u6253\u5370\u4e86\u5982\u4e0b\u6570\u636e: context_depend init context_depend exit INFO: 127 .0.0.1:44162 - \"GET /api/demo?uid=999 HTTP/1.1\" 200 OK context_depend init context_depend error context_depend exit INFO: 127 .0.0.1:44164 - \"GET /api/demo?uid=999&is_raise=True HTTP/1.1\" 200 OK \u4ece\u8f93\u51fa\u7684\u6570\u636e\u53ef\u4ee5\u770b\u51fa\uff0c \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u53ea\u6253\u5370\u4e86 init \u548c exit \uff0c\u800c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u4f1a\u4ea7\u751f\u5f02\u5e38\u7684\u8bf7\u6c42\u5219\u591a\u6253\u5370\u4e86 error \u3002","title":"2.\u7ed3\u5408Python ContextManager\u7684Depend"},{"location":"1_4_depend/#3pre-depend","text":"\u5728\u4e00\u4e9b\u573a\u666f\u4e0b\u53ea\u9700\u8981 Depends \u51fd\u6570\u6267\u884c\u6821\u9a8c\u903b\u8f91\uff0c\u5982\u679c\u6821\u9a8c\u5931\u8d25\u5c31\u629b\u51fa\u9519\u8bef\uff0c\u63a5\u53e3\u5e76\u4e0d\u9700\u8981 Depends \u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u6bd4\u5982\u5728\u7b2c\u4e00\u4e2a\u573a\u666f\u4e2d\uff0c \u4e0d\u9700\u8981\u7528\u5230\u51fd\u6570 get_user_by_token \u7684\u8fd4\u56de\u503c\uff0c\u4ee3\u7801\u5219\u4f1a\u53d8\u6210\u8fd9\u6837: import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait () async def demo ( token : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5982\u679c\u8fd9\u6bb5\u4ee3\u7801\u662f\u4f7f\u7528IDE\u8fdb\u884c\u7f16\u5199\u7684\uff0c\u90a3\u4e48\u9ad8\u4eae\u5904\u7684token\u53d8\u91cf\u4f1a\u88ab\u6253\u4e0a\u4e0b\u5212\u7ebf\uff0c\u5982\u679c\u4f7f\u7528 pyflake \u8fdb\u884c\u4ee3\u7801\u68c0\u6d4b\uff0c\u53ef\u80fd\u4f1a\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u8fd9\u65f6\u53ef\u4ee5\u628a\u9ad8\u4eae\u5904\u4ee3\u7801\u7684token\u53c2\u6570\u540d\u6539\u4e3a _ : @pait () async def demo ( _ : str = field . Depends . i ( get_user_by_token )) -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) \u6765\u89e3\u51b3\u95ee\u9898\uff0c \u4f46\u662fPython\u662f\u4e0d\u652f\u6301\u4e00\u4e2a\u51fd\u6570\u5185\u51fa\u73b0\u76f8\u540c\u540d\u5b57\u7684\u53d8\u91cf\uff0c \u8fd9\u610f\u5473\u7740\u6709\u591a\u4e2a\u7c7b\u4f3c\u7684\u53c2\u6570\u65f6\uff0c\u4e0d\u80fd\u628a\u4ed6\u4eec\u53d8\u91cf\u540d\u90fd\u6539\u4e3a _ \u3002 \u4e3a\u6b64\uff0c Pait \u901a\u8fc7\u53ef\u9009\u53c2\u6570 pre_depend_list \u6765\u63d0\u4f9b\u4e86 Pre-Depends \u529f\u80fd\uff0c\u7528\u6237\u53ea\u9700\u8981\u628a\u51fd\u6570\u4f20\u5165\u5230Pait\u7684pre_depend_list\u53ef\u9009\u53c2\u6570\u5373\u53ef\uff0c \u4ee3\u7801\u7684\u903b\u8f91\u548c\u529f\u80fd\u5747\u4e0d\u4f1a\u88ab\u53d7\u5230\u5f71\u54cd\uff0c\u8fd9\u6837\u4fee\u6539\u540e\u4ee3\u7801\u4f1a\u53d8\u4e3a\u5982\u4e0b\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field from pait.app.starlette import pait async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" return JSONResponse ({ \"data\" : str ( exc )}) fake_db_dict : dict = { \"u12345\" : \"so1n\" } async def get_user_by_token ( token : str = field . Header . i ()) -> str : if token not in fake_db_dict : raise RuntimeError ( f \"Can not found by token: { token } \" ) return fake_db_dict [ token ] @pait ( pre_depend_list = [ get_user_by_token ]) async def demo () -> JSONResponse : return JSONResponse ({ \"msg\" : \"success\" }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) Note \u8fd9\u79cd\u60c5\u51b5\u4e0b Pait \u4f1a\u5148\u6267\u884c pre_depend_list \u7684\u51fd\u6570\u518d\u6267\u884c\u8def\u7531\u51fd\u6570\u3002","title":"3.Pre-Depend"},{"location":"1_5_exception/","text":"Pait \u5185\u90e8\u6709\u5f88\u591a\u53c2\u6570\u6821\u9a8c\u903b\u8f91\uff0c\u51fa\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7684\u6355\u83b7\u548c\u4e86\u89e3\u5f02\u5e38\uff0c Pait \u62e5\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u5f02\u5e38\u673a\u5236\u3002 Pait \u7684\u5f02\u5e38\u90fd\u662f\u7ee7\u627f\u4e8e PaitBaseException \uff0c\u5728\u53d1\u751f\u5f02\u5e38\u65f6\u53ef\u4ee5\u901a\u8fc7: isinstance ( exc , PaitBaseException ) \u6765\u5224\u65ad\u5f02\u5e38\u662f\u5426\u5c5e\u4e8e Pait \u7684\u5f02\u5e38\u3002 Note Pait \u7684\u5f02\u5e38\u673a\u5236\u76ee\u524d\u8fd8\u5c1a\u672a\u7a33\u5b9a\uff0c\u5185\u90e8\u673a\u5236\u5728\u672a\u6765\u53ef\u80fd\u6709\u53d8\u52a8 Note \u7531\u4e8e Pait \u662f\u4f7f\u7528 Pydantic \u8fdb\u884c\u6821\u9a8c\uff0c \u6240\u4ee5\u5728\u8fd0\u884c\u65f6\u4f1a\u56e0\u4e3a\u6821\u9a8c\u4e0d\u901a\u8fc7\u800c\u629b\u51fa Pydantic \u76f8\u5173\u5f02\u5e38\uff0c \u53ef\u4ee5\u901a\u8fc7 Error Handling \u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Pydantic \u5f02\u5e38 TipException\u5f02\u5e38 Pait \u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019 Pait \u6838\u5fc3\u4f1a\u68c0\u67e5\u53c2\u6570\u662f\u5426\u5b58\u5728\uff0c\u53c2\u6570\u662f\u5426\u5408\u6cd5\uff0c\u4ee5\u53ca\u53c2\u6570\u662f\u5426\u901a\u8fc7 Pydantic \u7684\u6821\u9a8c\uff0c \u5728\u4e0a\u8ff0\u6761\u4ef6\u4e2d\u6709\u4e00\u4e2a\u6821\u9a8c\u4e0d\u901a\u8fc7\u65f6\u90fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u4f46\u662f\u8be5\u5f02\u5e38\u7684\u5806\u6808\u53ea\u4f1a\u5728 Pait \u7684\u6838\u5fc3\u88c5\u9970\u5668\u91cc\u6d41\u8f6c\uff0c\u8fd9\u6837\u5b50\u5bf9\u4e8e\u4f7f\u7528 Pait \u7684\u7528\u6237\u6765\u8bf4\uff0c\u6392\u67e5\u95ee\u9898\u662f\u5341\u5206\u56f0\u96be\u7684\u3002 \u6240\u4ee5 Pait \u901a\u8fc7 TipException \u5bf9\u5f02\u5e38\u8fdb\u884c\u4e00\u4e2a\u5305\u88c5\uff0c\u5728\u629b\u9519\u4fe1\u606f\u91cc\u544a\u8bc9\u7528\u6237\u8bf4\u54ea\u4e2a\u8def\u7531\u51fd\u6570\u629b\u9519\uff0c\u629b\u9519\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\uff0c \u5982\u679c\u7528\u6237\u4f7f\u7528\u4e86\u7c7b\u4f3c\u4e8e Pycharm \u7684IDE,\u8fd8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u8def\u5f84\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u5730\u65b9\uff0c\u4e00\u4e2a\u5f02\u5e38\u793a\u4f8b\u5982\u4e0b\uff1a File \"/home/so1n/github/pait/pait/core.py\" , line 230 , in dispatch return await first_plugin ( *args, **kwargs ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 455 , in __call__ async with self: File \"/home/so1n/github/pait/pait/param_handle.py\" , line 463 , in __aenter__ raise e from gen_tip_exc ( self.call_next, e ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 460 , in __aenter__ await self._gen_param () File \"/home/so1n/github/pait/pait/param_handle.py\" , line 446 , in _gen_param self.args, self.kwargs = await self.param_handle ( func_sig, func_sig.param_list ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 397 , in param_handle raise gen_tip_exc ( _object, e, parameter ) pait.exceptions.TipException: File \"/home/so1n/github/pait/example/__init__.py\" , line 29 , in demo. error:Can not found demo_value value \u53ef\u4ee5\u770b\u5230\u5f02\u5e38\u662f\u901a\u8fc7 gen_tip_exc \u629b\u51fa\u6765\u7684\uff0c\u800c\u629b\u51fa\u6765\u7684\u5f02\u5e38\u4fe1\u606f\u5219\u5305\u542b\u8def\u7531\u51fd\u6570\u6240\u5728\u4f4d\u7f6e\uff0c\u548c\u5f02\u5e38\u4fe1\u606f\uff0c \u6b64\u5916\uff0c\u5982\u679c\u9700\u8981\u83b7\u53d6\u5230\u539f\u672c\u7684\u5f02\u5e38\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 TipException.exc \u8fdb\u884c\u83b7\u53d6\u3002 \u53c2\u6570\u5f02\u5e38 \u76ee\u524d Pait \u67093\u79cd\u53c2\u6570\u5f02\u5e38\uff0c\u5206\u522b\u6709: NotFoundFieldException \u8be5\u5f02\u5e38\u8868\u793a\u5339\u914d\u4e0d\u5230\u5bf9\u5e94\u7684 Field \uff0c \u901a\u5e38\u7528\u6237\u5728\u6b63\u5e38\u4f7f\u7528\u65f6\uff0c\u4e0d\u4f1a\u9047\u5230\u8be5\u5f02\u5e38\u3002 NotFoundValueException \u8be5\u5f02\u5e38\u8868\u793a\u65e0\u6cd5\u4ece\u8bf7\u6c42\u6570\u636e\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u503c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5f02\u5e38\uff0c\u4e00\u822c\u662f\u8bf7\u6c42\u6570\u636e\u7f3a\u5c11\u90e8\u5206\u53c2\u6570\u3002 FieldValueTypeException \u8be5\u5f02\u5e38\u8868\u793a\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c Pait \u53d1\u73b0 Field \u91cc\u7684 default \uff0c example \u7b49\u586b\u5199\u7684\u503c\u4e0d\u5408\u6cd5\uff0c\u7528\u6237\u9700\u8981\u6839\u636e\u63d0\u793a\u8fdb\u884c\u6539\u6b63\u3002 \u8fd9\u4e09\u79cd\u5f02\u5e38\u90fd\u662f\u7ee7\u627f\u4e8e class PaitBaseParamException ( PaitBaseException ): def __init__ ( self , param : str , msg : str ): super () . __init__ ( msg ) self . param : str = param self . msg : str = msg \u4ece\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa PaitBaseParamException \uff0c\u5728\u629b\u5f02\u5e38\u65f6\u53ea\u4f1a\u629b\u51fa\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u5728\u9700\u8981\u6839\u636e\u5f02\u5e38\u8fd4\u56de\u4e00\u4e9b\u6307\u5b9a\u54cd\u5e94\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 param \u77e5\u9053\u662f\u54ea\u4e2a\u53c2\u6570\u51fa\u9519\u3002 \u5f02\u5e38\u4f7f\u7528\u793a\u4f8b \u5728CRUD\u4e1a\u52a1\u4e2d\uff0c\u8def\u7531\u51fd\u6570\u53d1\u751f\u7684\u5f02\u5e38\u90fd\u8981\u88ab\u6355\u83b7\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u534f\u5b9a\u597d\u7684\u9519\u8bef\u4fe1\u606f\u4f9b\u524d\u7aef\u4f7f\u7528\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5f02\u5e38\u6355\u83b7\u7684\u793a\u4f8b\u4ee3\u7801\uff1a from typing import List import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field , exceptions from pait.app.starlette import pait from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : if isinstance ( exc , exceptions . TipException ): # \u63d0\u53d6\u539f\u672c\u7684\u5f02\u5e38 exc = exc . exc if isinstance ( exc , exceptions . PaitBaseParamException ): # \u63d0\u53d6\u53c2\u6570\u4fe1\u606f\u548c\u9519\u8bef\u4fe1\u606f\uff0c\u544a\u77e5\u7528\u6237\u54ea\u4e2a\u53c2\u6570\u53d1\u751f\u9519\u8bef return JSONResponse ({ \"code\" : - 1 , \"msg\" : f \"error param: { exc . param } , { exc . msg } \" }) elif isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u5f02\u5e38\uff0c\u8fd4\u56de\u6821\u9a8c\u5931\u8d25\u7684\u53c2\u6570\u4fe1\u606f error_param_list : List [ str ] = [] for i in exc . errors (): error_param_list . extend ( i [ \"loc\" ]) return JSONResponse ({ \"code\" : - 1 , \"msg\" : f \"check error param: { error_param_list } \" }) elif isinstance ( exc , exceptions . PaitBaseException ): # \u6807\u51c6\u7684Pait\u5f02\u5e38\uff0c\u901a\u5e38\u5f88\u5c11\u51fa\u73b0\uff0c\u76f4\u63a5\u8fd4\u56de\u5f02\u5e38\u4fe1\u606f return JSONResponse ({ \"code\" : - 1 , \"msg\" : str ( exc )}) # \u8def\u7531\u51fd\u6570\u7684\u9519\u8bef\u4fe1\u606f return JSONResponse ({ \"code\" : - 1 , \"msg\" : str ( exc )}) @pait () async def demo ( demo_value : int = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"code\" : 0 , \"msg\" : \"\" , \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8be5\u4ee3\u7801\u7684\u54cd\u5e94\u4f7f\u7528\u4e86\u5e38\u89c1\u7684\u540e\u7aef\u8fd4\u56deJson\u6570\u636e\u534f\u8bae: { \"code\" : 0 , \"msg\" : \"\" , \"data\" : {} } \u5176\u4e2d code \u4e3a0\u65f6\u4ee3\u8868\u54cd\u5e94\u6b63\u5e38\uff0c\u4e0d\u4e3a0\u5219\u4e3a\u5f02\u5e38\u4e14 msg \u5305\u62ec\u4e86\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\u4f9b\u524d\u7aef\u5c55\u793a\uff0c\u800c data \u662f\u6b63\u5e38\u54cd\u5e94\u65f6\u7684\u7ed3\u6784\u4f53\u3002 \u7136\u540e\u901a\u8fc7 Starlette \u6846\u67b6\u7684\u5f02\u5e38\u673a\u5236\uff0c\u628a\u81ea\u5b9a\u4e49\u7684 api_exception \u51fd\u6570\u6302\u8f7d\u5230 Starlette \u7684\u5f02\u5e38\u5904\u7406\u56de\u8c03\u4e2d\uff0c api_exception \u51fd\u6570\u91cc\u9762\u5305\u542b\u4e86\u4f7f\u7528 Pait \u65f6\u9047\u5230\u7684\u51e0\u79cd\u5f02\u5e38\u7684\u5904\u7406\uff0c\u7136\u540e\u6309\u7167\u534f\u8bae\u8fd4\u56de\u6570\u636e\u7ed9\u8c03\u7528\u7aef\uff0c\u901a\u8fc7 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff1a \u7f3a\u5c11\u53c2\u6570\u65f6\uff0c\u4f1a\u8fd4\u56de\u627e\u4e0d\u5230\u53c2\u6570\u7684\u9519\u8bef\u4fe1\u606f \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" { \"code\" :-1, \"msg\" : \"error param:demo_value, Can not found demo_value value\" } \u53c2\u6570\u6821\u9a8c\u51fa\u9519\u65f6\uff0c\u4f1a\u8fd4\u56de\u6821\u9a8c\u51fa\u9519\u7684\u53c2\u6570\u540d \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=a\" { \"code\" :-1, \"msg\" : \"check error param: ['demo_value']\" } \u53c2\u6570\u6b63\u5e38\u65f6\u8fd4\u56de\u6b63\u5e38\u7684\u6570\u636e \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=3\" { \"code\" :0, \"msg\" : \"\" , \"data\" :3 }","title":"\u5f02\u5e38\u63d0\u793a"},{"location":"1_5_exception/#tipexception","text":"Pait \u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019 Pait \u6838\u5fc3\u4f1a\u68c0\u67e5\u53c2\u6570\u662f\u5426\u5b58\u5728\uff0c\u53c2\u6570\u662f\u5426\u5408\u6cd5\uff0c\u4ee5\u53ca\u53c2\u6570\u662f\u5426\u901a\u8fc7 Pydantic \u7684\u6821\u9a8c\uff0c \u5728\u4e0a\u8ff0\u6761\u4ef6\u4e2d\u6709\u4e00\u4e2a\u6821\u9a8c\u4e0d\u901a\u8fc7\u65f6\u90fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u4f46\u662f\u8be5\u5f02\u5e38\u7684\u5806\u6808\u53ea\u4f1a\u5728 Pait \u7684\u6838\u5fc3\u88c5\u9970\u5668\u91cc\u6d41\u8f6c\uff0c\u8fd9\u6837\u5b50\u5bf9\u4e8e\u4f7f\u7528 Pait \u7684\u7528\u6237\u6765\u8bf4\uff0c\u6392\u67e5\u95ee\u9898\u662f\u5341\u5206\u56f0\u96be\u7684\u3002 \u6240\u4ee5 Pait \u901a\u8fc7 TipException \u5bf9\u5f02\u5e38\u8fdb\u884c\u4e00\u4e2a\u5305\u88c5\uff0c\u5728\u629b\u9519\u4fe1\u606f\u91cc\u544a\u8bc9\u7528\u6237\u8bf4\u54ea\u4e2a\u8def\u7531\u51fd\u6570\u629b\u9519\uff0c\u629b\u9519\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\uff0c \u5982\u679c\u7528\u6237\u4f7f\u7528\u4e86\u7c7b\u4f3c\u4e8e Pycharm \u7684IDE,\u8fd8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u8def\u5f84\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u5730\u65b9\uff0c\u4e00\u4e2a\u5f02\u5e38\u793a\u4f8b\u5982\u4e0b\uff1a File \"/home/so1n/github/pait/pait/core.py\" , line 230 , in dispatch return await first_plugin ( *args, **kwargs ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 455 , in __call__ async with self: File \"/home/so1n/github/pait/pait/param_handle.py\" , line 463 , in __aenter__ raise e from gen_tip_exc ( self.call_next, e ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 460 , in __aenter__ await self._gen_param () File \"/home/so1n/github/pait/pait/param_handle.py\" , line 446 , in _gen_param self.args, self.kwargs = await self.param_handle ( func_sig, func_sig.param_list ) File \"/home/so1n/github/pait/pait/param_handle.py\" , line 397 , in param_handle raise gen_tip_exc ( _object, e, parameter ) pait.exceptions.TipException: File \"/home/so1n/github/pait/example/__init__.py\" , line 29 , in demo. error:Can not found demo_value value \u53ef\u4ee5\u770b\u5230\u5f02\u5e38\u662f\u901a\u8fc7 gen_tip_exc \u629b\u51fa\u6765\u7684\uff0c\u800c\u629b\u51fa\u6765\u7684\u5f02\u5e38\u4fe1\u606f\u5219\u5305\u542b\u8def\u7531\u51fd\u6570\u6240\u5728\u4f4d\u7f6e\uff0c\u548c\u5f02\u5e38\u4fe1\u606f\uff0c \u6b64\u5916\uff0c\u5982\u679c\u9700\u8981\u83b7\u53d6\u5230\u539f\u672c\u7684\u5f02\u5e38\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 TipException.exc \u8fdb\u884c\u83b7\u53d6\u3002","title":"TipException\u5f02\u5e38"},{"location":"1_5_exception/#_1","text":"\u76ee\u524d Pait \u67093\u79cd\u53c2\u6570\u5f02\u5e38\uff0c\u5206\u522b\u6709: NotFoundFieldException \u8be5\u5f02\u5e38\u8868\u793a\u5339\u914d\u4e0d\u5230\u5bf9\u5e94\u7684 Field \uff0c \u901a\u5e38\u7528\u6237\u5728\u6b63\u5e38\u4f7f\u7528\u65f6\uff0c\u4e0d\u4f1a\u9047\u5230\u8be5\u5f02\u5e38\u3002 NotFoundValueException \u8be5\u5f02\u5e38\u8868\u793a\u65e0\u6cd5\u4ece\u8bf7\u6c42\u6570\u636e\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u503c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5f02\u5e38\uff0c\u4e00\u822c\u662f\u8bf7\u6c42\u6570\u636e\u7f3a\u5c11\u90e8\u5206\u53c2\u6570\u3002 FieldValueTypeException \u8be5\u5f02\u5e38\u8868\u793a\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c Pait \u53d1\u73b0 Field \u91cc\u7684 default \uff0c example \u7b49\u586b\u5199\u7684\u503c\u4e0d\u5408\u6cd5\uff0c\u7528\u6237\u9700\u8981\u6839\u636e\u63d0\u793a\u8fdb\u884c\u6539\u6b63\u3002 \u8fd9\u4e09\u79cd\u5f02\u5e38\u90fd\u662f\u7ee7\u627f\u4e8e class PaitBaseParamException ( PaitBaseException ): def __init__ ( self , param : str , msg : str ): super () . __init__ ( msg ) self . param : str = param self . msg : str = msg \u4ece\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa PaitBaseParamException \uff0c\u5728\u629b\u5f02\u5e38\u65f6\u53ea\u4f1a\u629b\u51fa\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u5728\u9700\u8981\u6839\u636e\u5f02\u5e38\u8fd4\u56de\u4e00\u4e9b\u6307\u5b9a\u54cd\u5e94\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 param \u77e5\u9053\u662f\u54ea\u4e2a\u53c2\u6570\u51fa\u9519\u3002","title":"\u53c2\u6570\u5f02\u5e38"},{"location":"1_5_exception/#_2","text":"\u5728CRUD\u4e1a\u52a1\u4e2d\uff0c\u8def\u7531\u51fd\u6570\u53d1\u751f\u7684\u5f02\u5e38\u90fd\u8981\u88ab\u6355\u83b7\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u534f\u5b9a\u597d\u7684\u9519\u8bef\u4fe1\u606f\u4f9b\u524d\u7aef\u4f7f\u7528\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5f02\u5e38\u6355\u83b7\u7684\u793a\u4f8b\u4ee3\u7801\uff1a from typing import List import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait import field , exceptions from pait.app.starlette import pait from pydantic import ValidationError async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : if isinstance ( exc , exceptions . TipException ): # \u63d0\u53d6\u539f\u672c\u7684\u5f02\u5e38 exc = exc . exc if isinstance ( exc , exceptions . PaitBaseParamException ): # \u63d0\u53d6\u53c2\u6570\u4fe1\u606f\u548c\u9519\u8bef\u4fe1\u606f\uff0c\u544a\u77e5\u7528\u6237\u54ea\u4e2a\u53c2\u6570\u53d1\u751f\u9519\u8bef return JSONResponse ({ \"code\" : - 1 , \"msg\" : f \"error param: { exc . param } , { exc . msg } \" }) elif isinstance ( exc , ValidationError ): # \u89e3\u6790Pydantic\u5f02\u5e38\uff0c\u8fd4\u56de\u6821\u9a8c\u5931\u8d25\u7684\u53c2\u6570\u4fe1\u606f error_param_list : List [ str ] = [] for i in exc . errors (): error_param_list . extend ( i [ \"loc\" ]) return JSONResponse ({ \"code\" : - 1 , \"msg\" : f \"check error param: { error_param_list } \" }) elif isinstance ( exc , exceptions . PaitBaseException ): # \u6807\u51c6\u7684Pait\u5f02\u5e38\uff0c\u901a\u5e38\u5f88\u5c11\u51fa\u73b0\uff0c\u76f4\u63a5\u8fd4\u56de\u5f02\u5e38\u4fe1\u606f return JSONResponse ({ \"code\" : - 1 , \"msg\" : str ( exc )}) # \u8def\u7531\u51fd\u6570\u7684\u9519\u8bef\u4fe1\u606f return JSONResponse ({ \"code\" : - 1 , \"msg\" : str ( exc )}) @pait () async def demo ( demo_value : int = field . Query . i ()) -> JSONResponse : return JSONResponse ({ \"code\" : 0 , \"msg\" : \"\" , \"data\" : demo_value }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8be5\u4ee3\u7801\u7684\u54cd\u5e94\u4f7f\u7528\u4e86\u5e38\u89c1\u7684\u540e\u7aef\u8fd4\u56deJson\u6570\u636e\u534f\u8bae: { \"code\" : 0 , \"msg\" : \"\" , \"data\" : {} } \u5176\u4e2d code \u4e3a0\u65f6\u4ee3\u8868\u54cd\u5e94\u6b63\u5e38\uff0c\u4e0d\u4e3a0\u5219\u4e3a\u5f02\u5e38\u4e14 msg \u5305\u62ec\u4e86\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\u4f9b\u524d\u7aef\u5c55\u793a\uff0c\u800c data \u662f\u6b63\u5e38\u54cd\u5e94\u65f6\u7684\u7ed3\u6784\u4f53\u3002 \u7136\u540e\u901a\u8fc7 Starlette \u6846\u67b6\u7684\u5f02\u5e38\u673a\u5236\uff0c\u628a\u81ea\u5b9a\u4e49\u7684 api_exception \u51fd\u6570\u6302\u8f7d\u5230 Starlette \u7684\u5f02\u5e38\u5904\u7406\u56de\u8c03\u4e2d\uff0c api_exception \u51fd\u6570\u91cc\u9762\u5305\u542b\u4e86\u4f7f\u7528 Pait \u65f6\u9047\u5230\u7684\u51e0\u79cd\u5f02\u5e38\u7684\u5904\u7406\uff0c\u7136\u540e\u6309\u7167\u534f\u8bae\u8fd4\u56de\u6570\u636e\u7ed9\u8c03\u7528\u7aef\uff0c\u901a\u8fc7 curl \u8c03\u7528\u53ef\u4ee5\u53d1\u73b0\uff1a \u7f3a\u5c11\u53c2\u6570\u65f6\uff0c\u4f1a\u8fd4\u56de\u627e\u4e0d\u5230\u53c2\u6570\u7684\u9519\u8bef\u4fe1\u606f \u279c ~ curl \"http://127.0.0.1:8000/api/demo\" { \"code\" :-1, \"msg\" : \"error param:demo_value, Can not found demo_value value\" } \u53c2\u6570\u6821\u9a8c\u51fa\u9519\u65f6\uff0c\u4f1a\u8fd4\u56de\u6821\u9a8c\u51fa\u9519\u7684\u53c2\u6570\u540d \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=a\" { \"code\" :-1, \"msg\" : \"check error param: ['demo_value']\" } \u53c2\u6570\u6b63\u5e38\u65f6\u8fd4\u56de\u6b63\u5e38\u7684\u6570\u636e \u279c ~ curl \"http://127.0.0.1:8000/api/demo?demo_value=3\" { \"code\" :0, \"msg\" : \"\" , \"data\" :3 }","title":"\u5f02\u5e38\u4f7f\u7528\u793a\u4f8b"},{"location":"2_pait_multiplexing/","text":"\u5728\u4e0a\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u901a\u8fc7\u76f4\u63a5\u4f7f\u7528 Pait \u88c5\u9970\u5668\u6765\u4f7f\u7528 Pait \u7684\u53c2\u6570\u8f6c\u6362\u4e0e\u7c7b\u578b\u6821\u9a8c\u529f\u80fd\uff0c\u4e5f\u6709\u7b80\u5355\u7684\u8bf4\u660e\u901a\u8fc7 pre_depend_list \u53c2\u6570\u6765\u4f7f\u7528 Pait \u7684Pre-Depend\u529f\u80fd\uff0c \u800c\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\uff08\u7279\u522b\u662f\u6587\u6863\u7ae0\u8282\uff09\u4f1a\u4ecb\u7ecd Pait \u7684\u5176\u5b83\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u7528\u9700\u8981\u901a\u8fc7\u6307\u5b9a\u7684\u53c2\u6570\u6765\u542f\u7528\uff0c\u4f46\u662f\u5f88\u591a\u63a5\u53e3\u672c\u8eab\u90fd\u6709\u4e00\u4e9b\u5171\u6027\u4ece\u800c\u5b83\u4eec\u5728\u4f7f\u7528 Pait \u65f6\u586b\u5199\u7684\u53c2\u6570\u7684\u4e00\u6837\u7684\uff0c \u6bd4\u5982\u5f53\u4e00\u4e2a\u5f00\u53d1\u8005\u7f16\u5199\u4e86\u51e0\u4e2a\u63a5\u53e3\u65f6\uff0c\u53ef\u80fd\u4f1a\u8fd9\u6837\u5199: from starlette.responses import Response from pait.app.starlette import pait from pait.model.status import PaitStatus @pait ( status = PaitStatus . test ) async def demo () -> Response : pass @pait ( status = PaitStatus . test ) async def demo1 () -> Response : pass @pait ( status = PaitStatus . test ) async def demo2 () -> Response : pass \u8fd9\u4e2a\u793a\u4f8b\u4ee3\u7801\u5171\u67093\u4e2a\u63a5\u53e3\uff0c\u4f46\u662f\u5b83\u4eec\u90fd\u4f7f\u7528\u76f8\u540c\u7684 Pait \u7684 status \u53c2\u6570\uff0c\u4ee3\u8868\u73b0\u5728\u7684\u63a5\u53e3\u90fd\u5728\u6d4b\u8bd5\u4e2d\uff0c \u4f46\u662f\u5728\u540e\u9762\u4e0a\u7ebf\u7684\u65f6\u5019\u6240\u6709\u63a5\u53e3\u7684\u72b6\u6001\u90fd\u9700\u8981\u4e00\u4e2a\u4e2a\u7684\u6539\u4e3a release \uff0c\u8fd9\u662f\u975e\u5e38\u7684\u9ebb\u70e6\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a\u4e0d\u540c\u7684 Pait \uff0c\u8fbe\u5230\u590d\u7528\u7684\u76ee\u7684\u3002 \u4f7f\u7528\u81ea\u5df1\u5b9a\u5236\u7684Pait \u5728\u4e0a\u9762\u7684\u4f7f\u7528\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u901a\u8fc7: from pait.app.starlette import pait \u6765\u5f15\u5165\u4e00\u4e2a Pait \u88c5\u9970\u5668\uff0c\u8fd9\u662f\u4e00\u4e2a\u6700\u65b9\u4fbf\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u5b83\u672c\u8eab\u662f Pait \u7c7b\u7684\u5355\u4f8b\uff0c\u5728\u8003\u8651\u4f7f\u7528 Pait \u7684\u590d\u7528\u65f6\uff0c\u5219\u9700\u8981\u901a\u8fc7 Pait \u7c7b\u5165\u624b\uff0c \u6765\u91cd\u65b0\u5b9e\u4f8b\u5316\u4e00\u4e2a\u81ea\u5df1\u5b9a\u5236\u7684 Pait \uff0c\u7136\u540e\u628a\u63a5\u53e3\u7684 Pait \u66ff\u6362\u4e3a\u81ea\u5df1\u5b9a\u4e49\u7684 Pait \uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u793a\u4f8b\uff1a from starlette.responses import Response from pait.app.starlette import Pait from pait.model.status import PaitStatus global_pait : Pait = Pait ( status = PaitStatus . test ) @global_pait () async def demo () -> Response : pass @global_pait () async def demo1 () -> Response : pass @global_pait () async def demo2 () -> Response : pass \u4ee3\u7801\u4e2d\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u540d\u4e3a global_pait \u7684 Pait \uff0c \u5b83\u7684 status \u88ab\u6307\u5b9a\u4e3a PaitStatus.test \uff0c\u7136\u540e\u628a global_pait \u90fd\u5e94\u7528\u5230\u6240\u6709\u7684\u63a5\u53e3\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u7684\u6240\u6709\u63a5\u53e3\u51fd\u6570\u5c31\u7b49\u4e8e\u524d\u9762\u5e94\u7528\u7684\uff1a @pait ( status = PaitStatus . test ) async def demo () -> Response : pass \u5982\u679c\u5728\u540e\u7eed\u7684\u4ee3\u7801\u8fed\u4ee3\u4e14\u63a5\u53e3\u51fd\u6570\u9700\u8981\u96c6\u4e2d\u53d8\u52a8\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u76f4\u63a5\u4fee\u6539\u5b9a\u4e49\u7684 global_pait \u7684\u5c5e\u6027\u5219\u53ef\u4ee5\u8ba9\u6240\u6709\u63a5\u53e3\u7684 Pait \u5c5e\u6027\u90fd\u5f97\u5230\u66f4\u6539\u3002 \u521b\u5efa\u5b50Pait Pait \u53ef\u4ee5\u901a\u8fc7 create_sub_pait \u65b9\u6cd5\u521b\u5efa\u81ea\u5df1\u7684\u5b50 Pait \uff0c\u6bcf\u4e2a\u5b50 Pait \u7684\u5c5e\u6027\u90fd\u662f\u7ee7\u627f\u4e8e\u81ea\u5df1\u7684\u7236 Pait \u5c5e\u6027\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u6bb5\u793a\u4f8b\u4ee3\u7801\uff1a from pait.app.starlette import Pait from pait.model.status import PaitStatus global_pait : Pait = Pait ( status = PaitStatus . test ) other_pait : Pait = global_pait . create_sub_pait () global_pait \u662f\u4e00\u4e2a\u7236 Pait \uff0c\u800c other_pait \u5219\u662f\u88ab global_pait \u521b\u5efa\u7684\uff0c\u6b64\u65f6\u5b83\u7684 status \u5c5e\u6027\u4e5f\u8ddf global_pait \u7684 status \u5c5e\u6027\u4e00\u6837\u90fd\u662f PaitStatus.test \u3002 \u4f46\u662f\u4e5f\u53ef\u4ee5\u5728\u521b\u5efa\u7684\u65f6\u5019\u901a\u8fc7\u6307\u5b9a\u4e0d\u540c\u7684\u503c\uff0c\u4f7f\u5b50 Pait \u7684\u5c5e\u6027\u88ab\u6307\u5b9a\u7684\u503c\u8986\u76d6\uff0c\u6bd4\u5982\u8fd9\u6bb5\u4ee3\u7801: from pait.app.starlette import Pait global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) \u4ee3\u7801\u4e2d global_pait \u4e0e user_pait \u7684 author \u5c5e\u6027\u90fd\u662f (\"so1n\", ) \uff0c\u4f46\u662f global_pait \u7684 group \u5c5e\u6027\u4e3a global \uff0c\u800c user_pait \u7684 group \u5c5e\u6027\u4e3a user \u3002 \u5b50 Pait \u521b\u5efa\u4e4b\u540e\u5c31\u53ef\u4ee5\u8ddf\u4e4b\u524d\u4e00\u6837\u5728\u63a5\u53e3\u51fd\u6570\u4f7f\u7528\u4e86\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7528\u6237\u767b\u5f55\u63a5\u53e3\u51fd\u6570 user_login \u4ee5\u53ca\u7528\u6237\u6ce8\u9500\u51fd\u6570 user_logout \u90fd\u4f7f\u7528 user_pait \uff0c \u4ed6\u4eec\u5171\u540c\u62e5\u6709 group \u4e3a user \u7684\u5c5e\u6027\uff1b\u800c\u83b7\u53d6\u670d\u52a1\u5668\u65f6\u95f4\u6233\u7684\u63a5\u53e3\u51fd\u6570 get_server_timestamp \u5219\u5355\u72ec\u4f7f\u7528\u7684\u662f global_pait \uff0c\u5b83\u7684 group \u4e3a global \u3002 from pait.app.starlette import Pait from starlette.responses import JSONResponse global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) @user_pait () async def user_login () -> JSONResponse : pass @user_pait () async def user_logout () -> JSONResponse : pass @global_pait () async def get_server_timestamp () -> JSONResponse : pass \u5982\u679c\u4f60\u7a81\u7136\u60f3\u66f4\u6539 user_logout \u63a5\u53e3\u51fd\u6570\u7684 Pait \u5c5e\u6027\uff0c \u8fd8\u53ef\u4ee5\u5728 user_logout \u7684 user_pait \u88c5\u9970\u5668\u586b\u5199\u5bf9\u5e94\u7684\u53c2\u6570\u6765\u8fbe\u5230\u66f4\u6539\u7684\u76ee\u7684\uff0c \u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u4f1a\u628a\u63a5\u53e3\u51fd\u6570 user_logout \u7684 group \u5c5e\u6027\u53d8\u4e3a user-logout \u800c\u4e0d\u662f user : from pait.app.starlette import Pait from starlette.responses import JSONResponse global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) @user_pait () async def user_login () -> JSONResponse : pass @user_pait ( group = \"user-logout\" ) async def user_logout () -> JSONResponse : pass @global_pait () async def get_server_timestamp () -> JSONResponse : pass","title":"Pait\u7684\u590d\u7528"},{"location":"2_pait_multiplexing/#pait","text":"\u5728\u4e0a\u9762\u7684\u4f7f\u7528\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u901a\u8fc7: from pait.app.starlette import pait \u6765\u5f15\u5165\u4e00\u4e2a Pait \u88c5\u9970\u5668\uff0c\u8fd9\u662f\u4e00\u4e2a\u6700\u65b9\u4fbf\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u5b83\u672c\u8eab\u662f Pait \u7c7b\u7684\u5355\u4f8b\uff0c\u5728\u8003\u8651\u4f7f\u7528 Pait \u7684\u590d\u7528\u65f6\uff0c\u5219\u9700\u8981\u901a\u8fc7 Pait \u7c7b\u5165\u624b\uff0c \u6765\u91cd\u65b0\u5b9e\u4f8b\u5316\u4e00\u4e2a\u81ea\u5df1\u5b9a\u5236\u7684 Pait \uff0c\u7136\u540e\u628a\u63a5\u53e3\u7684 Pait \u66ff\u6362\u4e3a\u81ea\u5df1\u5b9a\u4e49\u7684 Pait \uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u793a\u4f8b\uff1a from starlette.responses import Response from pait.app.starlette import Pait from pait.model.status import PaitStatus global_pait : Pait = Pait ( status = PaitStatus . test ) @global_pait () async def demo () -> Response : pass @global_pait () async def demo1 () -> Response : pass @global_pait () async def demo2 () -> Response : pass \u4ee3\u7801\u4e2d\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u540d\u4e3a global_pait \u7684 Pait \uff0c \u5b83\u7684 status \u88ab\u6307\u5b9a\u4e3a PaitStatus.test \uff0c\u7136\u540e\u628a global_pait \u90fd\u5e94\u7528\u5230\u6240\u6709\u7684\u63a5\u53e3\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u7684\u6240\u6709\u63a5\u53e3\u51fd\u6570\u5c31\u7b49\u4e8e\u524d\u9762\u5e94\u7528\u7684\uff1a @pait ( status = PaitStatus . test ) async def demo () -> Response : pass \u5982\u679c\u5728\u540e\u7eed\u7684\u4ee3\u7801\u8fed\u4ee3\u4e14\u63a5\u53e3\u51fd\u6570\u9700\u8981\u96c6\u4e2d\u53d8\u52a8\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u76f4\u63a5\u4fee\u6539\u5b9a\u4e49\u7684 global_pait \u7684\u5c5e\u6027\u5219\u53ef\u4ee5\u8ba9\u6240\u6709\u63a5\u53e3\u7684 Pait \u5c5e\u6027\u90fd\u5f97\u5230\u66f4\u6539\u3002","title":"\u4f7f\u7528\u81ea\u5df1\u5b9a\u5236\u7684Pait"},{"location":"2_pait_multiplexing/#pait_1","text":"Pait \u53ef\u4ee5\u901a\u8fc7 create_sub_pait \u65b9\u6cd5\u521b\u5efa\u81ea\u5df1\u7684\u5b50 Pait \uff0c\u6bcf\u4e2a\u5b50 Pait \u7684\u5c5e\u6027\u90fd\u662f\u7ee7\u627f\u4e8e\u81ea\u5df1\u7684\u7236 Pait \u5c5e\u6027\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u6bb5\u793a\u4f8b\u4ee3\u7801\uff1a from pait.app.starlette import Pait from pait.model.status import PaitStatus global_pait : Pait = Pait ( status = PaitStatus . test ) other_pait : Pait = global_pait . create_sub_pait () global_pait \u662f\u4e00\u4e2a\u7236 Pait \uff0c\u800c other_pait \u5219\u662f\u88ab global_pait \u521b\u5efa\u7684\uff0c\u6b64\u65f6\u5b83\u7684 status \u5c5e\u6027\u4e5f\u8ddf global_pait \u7684 status \u5c5e\u6027\u4e00\u6837\u90fd\u662f PaitStatus.test \u3002 \u4f46\u662f\u4e5f\u53ef\u4ee5\u5728\u521b\u5efa\u7684\u65f6\u5019\u901a\u8fc7\u6307\u5b9a\u4e0d\u540c\u7684\u503c\uff0c\u4f7f\u5b50 Pait \u7684\u5c5e\u6027\u88ab\u6307\u5b9a\u7684\u503c\u8986\u76d6\uff0c\u6bd4\u5982\u8fd9\u6bb5\u4ee3\u7801: from pait.app.starlette import Pait global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) \u4ee3\u7801\u4e2d global_pait \u4e0e user_pait \u7684 author \u5c5e\u6027\u90fd\u662f (\"so1n\", ) \uff0c\u4f46\u662f global_pait \u7684 group \u5c5e\u6027\u4e3a global \uff0c\u800c user_pait \u7684 group \u5c5e\u6027\u4e3a user \u3002 \u5b50 Pait \u521b\u5efa\u4e4b\u540e\u5c31\u53ef\u4ee5\u8ddf\u4e4b\u524d\u4e00\u6837\u5728\u63a5\u53e3\u51fd\u6570\u4f7f\u7528\u4e86\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7528\u6237\u767b\u5f55\u63a5\u53e3\u51fd\u6570 user_login \u4ee5\u53ca\u7528\u6237\u6ce8\u9500\u51fd\u6570 user_logout \u90fd\u4f7f\u7528 user_pait \uff0c \u4ed6\u4eec\u5171\u540c\u62e5\u6709 group \u4e3a user \u7684\u5c5e\u6027\uff1b\u800c\u83b7\u53d6\u670d\u52a1\u5668\u65f6\u95f4\u6233\u7684\u63a5\u53e3\u51fd\u6570 get_server_timestamp \u5219\u5355\u72ec\u4f7f\u7528\u7684\u662f global_pait \uff0c\u5b83\u7684 group \u4e3a global \u3002 from pait.app.starlette import Pait from starlette.responses import JSONResponse global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) @user_pait () async def user_login () -> JSONResponse : pass @user_pait () async def user_logout () -> JSONResponse : pass @global_pait () async def get_server_timestamp () -> JSONResponse : pass \u5982\u679c\u4f60\u7a81\u7136\u60f3\u66f4\u6539 user_logout \u63a5\u53e3\u51fd\u6570\u7684 Pait \u5c5e\u6027\uff0c \u8fd8\u53ef\u4ee5\u5728 user_logout \u7684 user_pait \u88c5\u9970\u5668\u586b\u5199\u5bf9\u5e94\u7684\u53c2\u6570\u6765\u8fbe\u5230\u66f4\u6539\u7684\u76ee\u7684\uff0c \u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2d\u9ad8\u4eae\u90e8\u5206\u4f1a\u628a\u63a5\u53e3\u51fd\u6570 user_logout \u7684 group \u5c5e\u6027\u53d8\u4e3a user-logout \u800c\u4e0d\u662f user : from pait.app.starlette import Pait from starlette.responses import JSONResponse global_pait : Pait = Pait ( author = ( \"so1n\" ,), group = \"global\" ) user_pait : Pait = global_pait . create_sub_pait ( group = \"user\" ) @user_pait () async def user_login () -> JSONResponse : pass @user_pait ( group = \"user-logout\" ) async def user_logout () -> JSONResponse : pass @global_pait () async def get_server_timestamp () -> JSONResponse : pass","title":"\u521b\u5efa\u5b50Pait"},{"location":"3_api_doc/","text":"1.\u4ecb\u7ecd Pait \u4f1a\u5728\u8fd0\u884c\u65f6\u81ea\u52a8\u6355\u83b7\u8def\u7531\u51fd\u6570\u7684\u8bf7\u6c42\u53c2\u6570\u548curl,method\u7b49\u4fe1\u606f\u81ea\u52a8\u751f\u6210OpenAPI\u6570\u636e, \u4e0d\u8fc7\u5355\u9760\u51fd\u6570\u7684\u4fe1\u606f\u8fd8\u4e0d\u591f\uff0c\u8fd8\u9700\u8981\u5f00\u53d1\u8005\u624b\u52a8\u6807\u6ce8\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f, \u5982\u4e0b\u9762\u7684\u4f8b\u5b50: from example.param_verify.model import FailRespModel , UserSuccessRespModel from pait.app.starlette import pait from pait.model.status import PaitStatus @pait ( author = ( \"so1n\" ,), group = \"user\" , status = PaitStatus . release , tag = ( \"user\" , \"post\" ), response_model_list = [ UserSuccessRespModel , FailRespModel ], ) def demo () -> None : pass \u8fd9\u4e2a\u4f8b\u5b50\u589e\u52a0\u4e86 author , group , status \u7b49\u6807\u6ce8\uff0c\u5177\u4f53\u7684\u6807\u6ce8\u4f5c\u7528\u5982\u4e0b: author: \u7f16\u5199\u63a5\u53e3\u7684\u4f5c\u8005\u5217\u8868 group: \u63a5\u53e3\u6240\u5c5e\u7684\u7ec4(\u8be5\u9009\u9879\u76ee\u524d\u4e0d\u4f1a\u7528\u4e8eOpenAPI) tag: \u63a5\u53e3\u7684\u6807\u7b7e response_model_list: \u8fd4\u56de\u7684\u7ed3\u679c\u6570\u636e, \u9700\u8981\u7ee7\u627f\u4e8e pait.model.PaitResponseModel .\u7531\u4e8e pait \u662fweb\u6846\u67b6\u7684\u62d3\u5c55,\u4e0d\u4f1a\u4fee\u6539\u6846\u67b6\u7684\u4ee3\u7801, \u6240\u4ee5\u8be5\u53c2\u6570\u4e0d\u4f1a\u7528\u4e8e\u666e\u901a\u7684\u8bf7\u6c42\u5224\u65ad(\u4e5f\u4e0d\u5e94\u8be5\u7528\u4e8e\u751f\u4ea7\u73af\u5883), \u76ee\u524d\u53ea\u4f1a\u7528\u4e8e\u6587\u6863\u751f\u6210, mock\u54cd\u5e94\u751f\u6210, TestClient\u6821\u9a8c\u3002 status: \u63a5\u53e3\u7684\u72b6\u6001, \u76ee\u524d\u53ea\u652f\u6301PaitStatus\u7684\u51e0\u79cd\u72b6\u6001(\u8be5\u9009\u9879\u53ea\u6709\u4e0b\u7ebf\u76f8\u5173\u7684\u624d\u4f1a\u7528\u4e8eOpenAPI\u5e76\u6807\u6ce8\u4e3a\u5f03\u7528) \u9ed8\u8ba4\u72b6\u6001: undefined: \u672a\u5b9a\u4e49, \u9ed8\u8ba4\u72b6\u6001 \u5f00\u53d1\u4e2d: design: \u8bbe\u8ba1\u4e2d dev: \u5f00\u53d1\u6d4b\u8bd5\u4e2d \u5f00\u53d1\u5b8c\u6210: integration: \u8054\u8c03 complete: \u5f00\u53d1\u5b8c\u6210 test: \u6d4b\u8bd5\u4e2d \u4e0a\u7ebf: release: \u4e0a\u7ebf \u4e0b\u7ebf: abnormal: \u51fa\u73b0\u5f02\u5e38, \u4e0b\u7ebf maintenance: \u7ef4\u62a4\u4e2d archive: \u5f52\u6863 abandoned: \u9057\u5f03 OpenAPI \u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u540e\uff0c Pait \u5c31\u80fd\u751f\u6210\u4e00\u4efd\u5b8c\u6574\u7684OpenAPI\u6587\u6863\uff0c \u76ee\u524d Pait \u652f\u6301OpenAPI\u7684\u5927\u591a\u6570\u529f\u80fd,\u5c11\u6570\u672a\u5b9e\u73b0\u7684\u529f\u80fd\u5c06\u901a\u8fc7\u8fed\u4ee3\u9010\u6b65\u5b8c\u5584\uff0c\u76ee\u524d\u652f\u6301\u7684\u53c2\u6570\u5982\u4e0b(\u4e0b\u4e00\u4e2a\u7248\u672c\u4f1a\u63d0\u4f9b\u66f4\u591a\u7684\u53c2\u6570): title: OpenAPI \u7684title open_api_info: OpenAPI info\u7684\u53c2\u6570 open_api_tag_list: OpenAPI tag\u7684\u76f8\u5173\u63cf\u8ff0 open_api_server_list: OpenAPI server \u5217\u8868 type_: \u8f93\u51fa\u7684\u7c7b\u578b, \u53ef\u9009json\u548cyaml filename: \u8f93\u51fa\u6587\u4ef6\u540d, \u5982\u679c\u4e3a\u7a7a\u5219\u8f93\u51fa\u5230\u7ec8\u7aef \u4ee5\u4e0b\u662fOpenAPI\u6587\u6863\u8f93\u51fa\u7684\u793a\u4f8b\u4ee3\u7801: from pydantic import BaseModel , conint , constr from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait.field import Body # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class PydanticModel ( BaseModel ): uid : conint ( gt = 10 , lt = 1000 ) # \u81ea\u52a8\u6821\u9a8c\u7c7b\u578b\u662f\u5426\u4e3aint,\u4e14\u662f\u5426\u5927\u4e8e10\u5c0f\u4e8e1000 user_name : constr ( min_length = 2 , max_length = 4 ) # \u81ea\u52a8\u6821\u9a8c\u7c7b\u578b\u662f\u5426\u4e3astr, \u4e14\u957f\u5ea6\u662f\u5426\u5927\u4e8e\u7b49\u4e8e2,\u5c0f\u4e8e\u7b49\u4e8e4 # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : PydanticModel = Body . i () ): # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) from pait.api_doc.open_api import PaitOpenAPI from pait.app.starlette import load_app # \u63d0\u53d6\u8def\u7531\u4fe1\u606f\u5230pait\u7684\u6570\u636e\u6a21\u5757 pait_dict = load_app ( app ) # \u6839\u636e\u6570\u636e\u6a21\u5757\u7684\u6570\u636e\u751f\u6210\u8def\u7531\u7684OpenAPI PaitOpenAPI ( pait_dict ) \u6b64\u5916\uff0c\u5982\u679c\u5355\u7eaf\u7684\u9700\u8981\u4e00\u4efdAPI\u6587\u6863\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u81ea\u5e26\u7684 markdown \u6a21\u5757\u6765\u751f\u6210\u63a5\u53e3\u5bf9\u5e94\u7684 markdown \u6587\u6863\uff1a from pait.api_doc.markdown import PaitMd PaitMd ( pait_dict ) OpenAPI\u8def\u7531 \u5982\u6587\u6863\u9996\u9875\u793a\u4f8b\uff0c Pait \u8fd8\u652f\u6301OpenAPI\u8def\u7531, \u540c\u65f6\u652f\u6301 Redoc \u548c Swagger \u7684\u9875\u9762\u5c55\u793a, \u800c\u8fd9\u4e9b\u53ea\u9700\u8981\u8c03\u7528 add_doc_route \u51fd\u6570\u5373\u53ef\u4e3a app \u5b9e\u4f8b\u589e\u52a0\u4e09\u4e2a\u8def\u7531: /openapi.json \u83b7\u53d6OpenAPI\u7684json\u54cd\u5e94 /redoc \u4f7f\u7528 Redoc \u5c55\u793a\u63a5\u53e3\u6587\u6863\u6570\u636e /swagger \u4f7f\u7528 Swagger \u5c55\u793a\u63a5\u53e3\u6587\u6863\u6570\u636e \u5177\u4f53\u4f8b\u5b50\u5982\u4e0b: import uvicorn # type: ignore from pydantic import BaseModel , Field from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route # \u5f15\u5165add_doc_route, \u9488\u5bf9\u6bcf\u4e2a\u6846\u67b6\u90fd\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0 from pait.app.starlette import add_doc_route , pait from pait.field import Body # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class UserModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 ) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : UserModel = Body . i () # \u4f7f\u7528i\u51fd\u6570\u53ef\u4ee5\u89e3\u51b3mypy\u7c7b\u578b\u6821\u9a8c\u7684\u95ee\u9898 ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d add_doc_route ( app ) \u6b64\u5916\uff0c add_doc_route \u51fd\u6570\u652f\u6301\u5176\u5b83\u53c2\u6570\uff0c\u5177\u4f53\u5982\u4e0b\uff1a # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d, \u5e76\u4e14\u4ee5/doc\u4e3a\u524d\u7f00 add_doc_route ( app , prefix = '/doc' ) # \u901a\u5e38\u6302\u5728Nginx\u540e\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u77e5\u9053\u5f53\u524d\u8bf7\u6c42\u7684scheme\u662fhttps\u8fd8\u662fhttp\uff0c\u53ef\u4ee5\u901a\u8fc7scheme\u6307\u5b9a\u8bf7\u6c42\u70b9scheme add_doc_route ( app , scheme = 'https' ) # \u901a\u5e38\u4e0d\u9002\u5408\u628a\u63a5\u53e3\u6587\u6863\u66b4\u9732\u7ed9\u5916\u9762\u7684\u7528\u6237\u4f7f\u7528\uff0c\u76ee\u524d\u652f\u6301`pin_code`\u53c2\u6570\u6765\u589e\u52a0\u4e00\u70b9\u70b9\u5b89\u5168\u6027\uff0c # \u6bd4\u5982\u5982\u4e0b\u5b9a\u4e49\u540e\uff0c\u53ea\u80fd\u901a\u8fc7http://127.0.0.1/swagger?pin_code=6666\u624d\u80fd\u6210\u529f\u8bbf\u95eeSwagger\u9875\u9762 add_doc_route ( app , pin_code = '6666' )","title":"API\u6587\u6863"},{"location":"3_api_doc/#1","text":"Pait \u4f1a\u5728\u8fd0\u884c\u65f6\u81ea\u52a8\u6355\u83b7\u8def\u7531\u51fd\u6570\u7684\u8bf7\u6c42\u53c2\u6570\u548curl,method\u7b49\u4fe1\u606f\u81ea\u52a8\u751f\u6210OpenAPI\u6570\u636e, \u4e0d\u8fc7\u5355\u9760\u51fd\u6570\u7684\u4fe1\u606f\u8fd8\u4e0d\u591f\uff0c\u8fd8\u9700\u8981\u5f00\u53d1\u8005\u624b\u52a8\u6807\u6ce8\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f, \u5982\u4e0b\u9762\u7684\u4f8b\u5b50: from example.param_verify.model import FailRespModel , UserSuccessRespModel from pait.app.starlette import pait from pait.model.status import PaitStatus @pait ( author = ( \"so1n\" ,), group = \"user\" , status = PaitStatus . release , tag = ( \"user\" , \"post\" ), response_model_list = [ UserSuccessRespModel , FailRespModel ], ) def demo () -> None : pass \u8fd9\u4e2a\u4f8b\u5b50\u589e\u52a0\u4e86 author , group , status \u7b49\u6807\u6ce8\uff0c\u5177\u4f53\u7684\u6807\u6ce8\u4f5c\u7528\u5982\u4e0b: author: \u7f16\u5199\u63a5\u53e3\u7684\u4f5c\u8005\u5217\u8868 group: \u63a5\u53e3\u6240\u5c5e\u7684\u7ec4(\u8be5\u9009\u9879\u76ee\u524d\u4e0d\u4f1a\u7528\u4e8eOpenAPI) tag: \u63a5\u53e3\u7684\u6807\u7b7e response_model_list: \u8fd4\u56de\u7684\u7ed3\u679c\u6570\u636e, \u9700\u8981\u7ee7\u627f\u4e8e pait.model.PaitResponseModel .\u7531\u4e8e pait \u662fweb\u6846\u67b6\u7684\u62d3\u5c55,\u4e0d\u4f1a\u4fee\u6539\u6846\u67b6\u7684\u4ee3\u7801, \u6240\u4ee5\u8be5\u53c2\u6570\u4e0d\u4f1a\u7528\u4e8e\u666e\u901a\u7684\u8bf7\u6c42\u5224\u65ad(\u4e5f\u4e0d\u5e94\u8be5\u7528\u4e8e\u751f\u4ea7\u73af\u5883), \u76ee\u524d\u53ea\u4f1a\u7528\u4e8e\u6587\u6863\u751f\u6210, mock\u54cd\u5e94\u751f\u6210, TestClient\u6821\u9a8c\u3002 status: \u63a5\u53e3\u7684\u72b6\u6001, \u76ee\u524d\u53ea\u652f\u6301PaitStatus\u7684\u51e0\u79cd\u72b6\u6001(\u8be5\u9009\u9879\u53ea\u6709\u4e0b\u7ebf\u76f8\u5173\u7684\u624d\u4f1a\u7528\u4e8eOpenAPI\u5e76\u6807\u6ce8\u4e3a\u5f03\u7528) \u9ed8\u8ba4\u72b6\u6001: undefined: \u672a\u5b9a\u4e49, \u9ed8\u8ba4\u72b6\u6001 \u5f00\u53d1\u4e2d: design: \u8bbe\u8ba1\u4e2d dev: \u5f00\u53d1\u6d4b\u8bd5\u4e2d \u5f00\u53d1\u5b8c\u6210: integration: \u8054\u8c03 complete: \u5f00\u53d1\u5b8c\u6210 test: \u6d4b\u8bd5\u4e2d \u4e0a\u7ebf: release: \u4e0a\u7ebf \u4e0b\u7ebf: abnormal: \u51fa\u73b0\u5f02\u5e38, \u4e0b\u7ebf maintenance: \u7ef4\u62a4\u4e2d archive: \u5f52\u6863 abandoned: \u9057\u5f03","title":"1.\u4ecb\u7ecd"},{"location":"3_api_doc/#openapi","text":"\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u540e\uff0c Pait \u5c31\u80fd\u751f\u6210\u4e00\u4efd\u5b8c\u6574\u7684OpenAPI\u6587\u6863\uff0c \u76ee\u524d Pait \u652f\u6301OpenAPI\u7684\u5927\u591a\u6570\u529f\u80fd,\u5c11\u6570\u672a\u5b9e\u73b0\u7684\u529f\u80fd\u5c06\u901a\u8fc7\u8fed\u4ee3\u9010\u6b65\u5b8c\u5584\uff0c\u76ee\u524d\u652f\u6301\u7684\u53c2\u6570\u5982\u4e0b(\u4e0b\u4e00\u4e2a\u7248\u672c\u4f1a\u63d0\u4f9b\u66f4\u591a\u7684\u53c2\u6570): title: OpenAPI \u7684title open_api_info: OpenAPI info\u7684\u53c2\u6570 open_api_tag_list: OpenAPI tag\u7684\u76f8\u5173\u63cf\u8ff0 open_api_server_list: OpenAPI server \u5217\u8868 type_: \u8f93\u51fa\u7684\u7c7b\u578b, \u53ef\u9009json\u548cyaml filename: \u8f93\u51fa\u6587\u4ef6\u540d, \u5982\u679c\u4e3a\u7a7a\u5219\u8f93\u51fa\u5230\u7ec8\u7aef \u4ee5\u4e0b\u662fOpenAPI\u6587\u6863\u8f93\u51fa\u7684\u793a\u4f8b\u4ee3\u7801: from pydantic import BaseModel , conint , constr from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait.field import Body # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class PydanticModel ( BaseModel ): uid : conint ( gt = 10 , lt = 1000 ) # \u81ea\u52a8\u6821\u9a8c\u7c7b\u578b\u662f\u5426\u4e3aint,\u4e14\u662f\u5426\u5927\u4e8e10\u5c0f\u4e8e1000 user_name : constr ( min_length = 2 , max_length = 4 ) # \u81ea\u52a8\u6821\u9a8c\u7c7b\u578b\u662f\u5426\u4e3astr, \u4e14\u957f\u5ea6\u662f\u5426\u5927\u4e8e\u7b49\u4e8e2,\u5c0f\u4e8e\u7b49\u4e8e4 # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : PydanticModel = Body . i () ): # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) from pait.api_doc.open_api import PaitOpenAPI from pait.app.starlette import load_app # \u63d0\u53d6\u8def\u7531\u4fe1\u606f\u5230pait\u7684\u6570\u636e\u6a21\u5757 pait_dict = load_app ( app ) # \u6839\u636e\u6570\u636e\u6a21\u5757\u7684\u6570\u636e\u751f\u6210\u8def\u7531\u7684OpenAPI PaitOpenAPI ( pait_dict ) \u6b64\u5916\uff0c\u5982\u679c\u5355\u7eaf\u7684\u9700\u8981\u4e00\u4efdAPI\u6587\u6863\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u81ea\u5e26\u7684 markdown \u6a21\u5757\u6765\u751f\u6210\u63a5\u53e3\u5bf9\u5e94\u7684 markdown \u6587\u6863\uff1a from pait.api_doc.markdown import PaitMd PaitMd ( pait_dict )","title":"OpenAPI"},{"location":"3_api_doc/#openapi_1","text":"\u5982\u6587\u6863\u9996\u9875\u793a\u4f8b\uff0c Pait \u8fd8\u652f\u6301OpenAPI\u8def\u7531, \u540c\u65f6\u652f\u6301 Redoc \u548c Swagger \u7684\u9875\u9762\u5c55\u793a, \u800c\u8fd9\u4e9b\u53ea\u9700\u8981\u8c03\u7528 add_doc_route \u51fd\u6570\u5373\u53ef\u4e3a app \u5b9e\u4f8b\u589e\u52a0\u4e09\u4e2a\u8def\u7531: /openapi.json \u83b7\u53d6OpenAPI\u7684json\u54cd\u5e94 /redoc \u4f7f\u7528 Redoc \u5c55\u793a\u63a5\u53e3\u6587\u6863\u6570\u636e /swagger \u4f7f\u7528 Swagger \u5c55\u793a\u63a5\u53e3\u6587\u6863\u6570\u636e \u5177\u4f53\u4f8b\u5b50\u5982\u4e0b: import uvicorn # type: ignore from pydantic import BaseModel , Field from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route # \u5f15\u5165add_doc_route, \u9488\u5bf9\u6bcf\u4e2a\u6846\u67b6\u90fd\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0 from pait.app.starlette import add_doc_route , pait from pait.field import Body # \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8ePydantic.BaseModel\u7684Model class UserModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 ) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) # \u4f7f\u7528pait\u88c5\u9970\u5668\u88c5\u9970\u51fd\u6570 @pait () async def demo_post ( # pait\u901a\u8fc7Body()\u77e5\u9053\u5f53\u524d\u9700\u8981\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6body\u7684\u503c,\u5e76\u8d4b\u503c\u5230model\u4e2d, # \u800c\u8fd9\u4e2amodel\u7684\u7ed3\u6784\u6b63\u662f\u4e0a\u9762\u7684PydanticModel,\u4ed6\u4f1a\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u5b57\u6bb5\u81ea\u52a8\u83b7\u53d6\u503c\u5e76\u8fdb\u884c\u8f6c\u6362\u548c\u5224\u65ad model : UserModel = Body . i () # \u4f7f\u7528i\u51fd\u6570\u53ef\u4ee5\u89e3\u51b3mypy\u7c7b\u578b\u6821\u9a8c\u7684\u95ee\u9898 ) -> JSONResponse : # \u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u8fdb\u884c\u8fd4\u56de return JSONResponse ({ 'result' : model . dict ()}) app = Starlette ( routes = [ Route ( '/api' , demo_post , methods = [ 'POST' ])]) # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d add_doc_route ( app ) \u6b64\u5916\uff0c add_doc_route \u51fd\u6570\u652f\u6301\u5176\u5b83\u53c2\u6570\uff0c\u5177\u4f53\u5982\u4e0b\uff1a # \u628a\u8def\u7531\u6ce8\u5165\u5230app\u4e2d, \u5e76\u4e14\u4ee5/doc\u4e3a\u524d\u7f00 add_doc_route ( app , prefix = '/doc' ) # \u901a\u5e38\u6302\u5728Nginx\u540e\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u77e5\u9053\u5f53\u524d\u8bf7\u6c42\u7684scheme\u662fhttps\u8fd8\u662fhttp\uff0c\u53ef\u4ee5\u901a\u8fc7scheme\u6307\u5b9a\u8bf7\u6c42\u70b9scheme add_doc_route ( app , scheme = 'https' ) # \u901a\u5e38\u4e0d\u9002\u5408\u628a\u63a5\u53e3\u6587\u6863\u66b4\u9732\u7ed9\u5916\u9762\u7684\u7528\u6237\u4f7f\u7528\uff0c\u76ee\u524d\u652f\u6301`pin_code`\u53c2\u6570\u6765\u589e\u52a0\u4e00\u70b9\u70b9\u5b89\u5168\u6027\uff0c # \u6bd4\u5982\u5982\u4e0b\u5b9a\u4e49\u540e\uff0c\u53ea\u80fd\u901a\u8fc7http://127.0.0.1/swagger?pin_code=6666\u624d\u80fd\u6210\u529f\u8bbf\u95eeSwagger\u9875\u9762 add_doc_route ( app , pin_code = '6666' )","title":"OpenAPI\u8def\u7531"},{"location":"4_unit_test_helper/","text":"Pait \u5bf9\u4e8e\u5355\u5143\u6d4b\u8bd5\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u652f\u6301\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u50cf\u8c03\u7528\u51fd\u6570\u4e00\u6837\u53bb\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5e76\u81ea\u52a8\u4ece response_modle_list \u4e2d\u6311\u9009\u4e00\u4e2a\u6700\u5408\u9002\u7684 response_model \u4e0e\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u7b80\u5355\u7684\u6821\u9a8c\uff0c\u4ece\u800c\u51cf\u5c11\u5f00\u53d1\u8005\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u7684\u4ee3\u7801\u91cf\u3002 \u4f7f\u7528\u65b9\u6cd5 \u4ee5 example.starlette_example.py.post_route \u4e3a\u4f8b\u5b50\uff1a @other_pait ( status = PaitStatus . release , tag = ( tag . user_tag , tag . post_tag ), response_model_list = [ UserSuccessRespModel , FailRespModel ], ) async def post_route ( model : UserModel = Body . i ( raw_return = True ), other_model : UserOtherModel = Body . i ( raw_return = True ), sex : SexEnum = Body . i ( description = \"sex\" ), content_type : str = Header . i ( alias = \"Content-Type\" , description = \"Content-Type\" ), ) -> JSONResponse : \"\"\"Test Method:Post Pydantic Model\"\"\" return_dict = model . dict () return_dict [ \"sex\" ] = sex . value return_dict . update ( other_model . dict ()) return_dict . update ({ \"content_type\" : content_type }) return JSONResponse ({ \"code\" : 0 , \"msg\" : \"\" , \"data\" : return_dict }) \u8fd9\u662f\u4e00\u4e2a\u88ab Pait \u88c5\u9970\u7684\u51fd\u6570\u7684\u63a5\u53e3\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u8c03\u7528\uff0c\u6765\u5b8c\u6210\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a class TestStarlette : def test_post ( self , client : TestClient ) -> None : StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . json () \u5728\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c \u5f00\u53d1\u8005\u53ea\u9700\u8981\u4f20\u5165\u6846\u67b6\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\uff0c\u8def\u7531\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u4ee5\u53ca\u4e00\u4e9b\u8bf7\u6c42\u53c2\u6570\u5373\u53ef\uff0c\u6700\u540e\u901a\u8fc7 json \u65b9\u6cd5\u83b7\u53d6\u5230\u8be5\u63a5\u53e3\u54cd\u5e94\u7684\u6570\u636e\u3002 \u5728\u8fd9\u6bb5\u8c03\u7528\u903b\u8f91\u4e2d\uff0c TestHelper \u81ea\u52a8\u53d1\u73b0\u4e86\u8def\u7531\u51fd\u6570\u7684 Url \u548c\u8bf7\u6c42\u65b9\u6cd5\uff0c\u6240\u4ee5\u8c03\u7528 json \u7684\u65f6\u5019 TestHelper \u81ea\u52a8\u53d1\u8d77\u4e86 post \u8bf7\u6c42\uff0c \u7136\u540e\u628a\u54cd\u5e94Body\u5e8f\u5217\u5316\u4e3a Python \u7684 dict \u5bf9\u8c61\u8fd4\u56de\uff0c \u4f46\u662f\u5f53\u8be5\u8def\u7531\u51fd\u6570\u7ed1\u5b9a\u4e86\u591a\u4e2a\u8bf7\u6c42\u65b9\u6cd5\u65f6\uff0c TestHelper \u5219\u65e0\u6cd5\u81ea\u52a8\u6267\u884c\uff0c\u9700\u8981\u624b\u52a8\u6307\u5b9a\u5bf9\u5e94\u7684\u65b9\u6cd5\u6765\u53d1\u8d77\u8bf7\u6c42\uff0c \u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801: class TestStarlette : def test_post ( self , client : TestClient ) -> None : StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . json ( method = \"post\" ) \u6b64\u5916\uff0c\u5728\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u53ef\u80fd\u4f1a\u72b6\u6001\u7801\uff0c Header \u4e4b\u7c7b\u7684\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c\u8fd9\u65f6\u9700\u8981\u4e00\u4e2a\u54cd\u5e94\u5bf9\u8c61 \uff0c TestHelper \u652f\u6301\u901a\u8fc7\u6307\u5b9a\u5bf9\u5e94\u7684Http\u8bf7\u6c42\u65b9\u6cd5\u540d\u6765\u8c03\u7528\uff0c\u6700\u540e\u8fd4\u56de\u5bf9\u5e94\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684Response: class TestStarlette : def test_post ( self , client : TestClient ) -> None : response : Response = StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . post () response . json () \u867d\u7136\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528 TestHelper \u548c\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\u6ca1\u6709\u592a\u5927\u7684\u5dee\u522b\uff0c\u4f46\u662f TestHelper \u7684\u5185\u4f1a\u5728\u83b7\u53d6\u5230\u8def\u7531\u51fd\u6570\u7684\u54cd\u5e94\u540e \u628a\u54cd\u5e94\u6570\u636e\u653e\u5165 Pait \u88c5\u9970\u5668\u4e2d response_model_list \u586b\u5199\u7684 response_model \u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u68c0\u67e5\u5230HTTP\u72b6\u6001\u7801\uff0cHeader\uff0cBody\u4e09\u8005\u4e2d\u6709\u4e00\u4e2a\u4e0d\u7b26\u5408\u6761\u4ef6\u5c31\u4f1a\u629b\u51fa\u9519\u8bef\uff0c\u4e2d\u65ad\u6d4b\u8bd5\u7528\u4f8b\u3002 \u53c2\u6570\u4ecb\u7ecd TestHelper \u7684\u53c2\u6570\u5206\u4e3a\u521d\u59cb\u5316\u53c2\u6570\uff0c\u8bf7\u6c42\u53c2\u6570\uff0c\u54cd\u5e94\u7ed3\u679c\u53c2\u65703\u79cd\uff0c\u521d\u59cb\u5316\u53c2\u6570\u67093\u4e2a\uff0c\u5206\u522b\u4e3a\uff1a client: \u6d4b\u8bd5\u6846\u67b6\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef func: \u8def\u7531\u51fd\u6570 pait_dict: Pait \u9488\u5bf9\u8def\u7531\u51fd\u6570\u751f\u6210\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u4e0d\u586b\uff0c TestHelper \u5728\u521d\u59cb\u5316\u65f6\u4f1a\u81ea\u52a8\u8865\u5168\u3002 \u8bf7\u6c42\u53c2\u6570\u6709\u591a\u4e2a\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u80fd\u5bf9\u4e8e\u5927\u591a\u6570\u5f00\u53d1\u8005\u6765\u8bf4\u5e73\u5e73\u65e0\u5947\uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528 Tornado \u4e4b\u7c7b\u7684\u6ca1\u5bf9\u6d4b\u8bd5\u5ba2\u6237\u7aef\u505a\u8fc7\u591a\u5c01\u88c5\u7684\u6846\u67b6\u7684\u5f00\u53d1\u8005\u5219\u80fd\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4fbf\u5229\uff0c\u8fd9\u4e9b\u53c2\u6570\u6709: body_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684Json\u6570\u636e\u3002 cookie_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684cookie\u6570\u636e\u3002 file_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684file\u6570\u636e\u3002 form_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684form\u6570\u636e\u3002 header_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684header\u6570\u636e\u3002 path_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684path\u6570\u636e\u3002 query_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684query\u6570\u636e\u3002 \u9664\u6b64\u4e4b\u5916\uff0c TestHelper \u8fd8\u67093\u4e2a\u4e0eHTTP\u54cd\u5e94\u7ed3\u679c\u7684Body\u6821\u9a8c\u76f8\u5173\u7684\u53c2\u6570\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u54cd\u5e94\u7ed3\u679c\u7684Body\u4f1a\u4e0e\u5f00\u53d1\u8005\u586b\u5199\u7684 response_model \u7684 response_data \u8fdb\u884c\u6821\u9a8c\uff0c \u5982\u679cBody\u7684\u7c7b\u578b\u5c5e\u4e8eJson\uff0c TestHelper \u9664\u4e86\u4f1a\u5bf9\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u8fdb\u884c\u6821\u9a8c\u5916\uff0c\u8fd8\u4f1a\u5bf9\u5b57\u6bb5\u5dee\u5f02\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u51fa\u73b0\u5dee\u5f02\u5219\u4f1a\u62a5\u9519\uff0c\u6bd4\u5982\u4e0b\u9762a\u53d8\u91cf\u662f\u6211\u4eec\u5b9a\u4e49\u7684 response_demo \u6570\u636e\u7ed3\u6784\uff0cb\u53d8\u91cf\u662f\u54cd\u5e94\u4f53\u7684\u6570\u636e\u7ed3\u6784: a = { \"a\" : 1 , \"b\" : { \"c\" : 3 } } b = { \"a\" : 2 , \"b\" : { \"c\" : 3 , \"d\" : 4 } } TestHelper \u68c0\u6d4b\u5230b\u53d8\u91cf\u591a\u51fa\u6765\u4e00\u4e2a\u7ed3\u6784 b['b']['d'] \uff0c\u6240\u4ee5b\u53d8\u91cf\u5e76\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u54cd\u5e94\u4f53\uff0c TestHelper \u76f4\u63a5\u629b\u51fa\u9519\u8bef\uff0c \u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u53c2\u6570 strict_inspection_check_json_content \u7684\u503c\u4e3a False \uff0c\u8fd9\u6837\u53ea\u4f1a\u6821\u9a8c\u51fa\u73b0\u5728 response_model \u7684\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5426\u5408\u6cd5\u4ee5\u53ca\u662f\u5426\u7f3a\u5c11\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u4e0d\u4f1a\u68c0\u67e5\u591a\u51fa\u7684\u5b57\u6bb5\u3002 TestHelper \u53e6\u5916\u4e24\u4e2a\u53c2\u6570\u4f5c\u7528\u5982\u4e0b: target_pait_response_class: \u8be5\u53c2\u6570\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6307\u5b9a\u7684 response_model \uff0c\u8fd9\u6837 TestHelper \u5c31\u4f1a\u4ece response_model_list \u4e2d\u7b5b\u9009\u51fa\u4e00\u6279\u7b26\u5408\u6761\u4ef6\u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\u3002 find_coro_response_model: \u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3a False \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b TestHelper \u4f1a\u4ece\u7b5b\u9009\u540e\u7684 response_model_list \u4e2d\u81ea\u52a8\u6311\u9009\u4e0e\u54cd\u5e94\u4f53\u6700\u7b26\u5408\u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u90a3\u4e48 TestHelper \u53ea\u4f1a\u4ece\u7b5b\u9009\u540e\u7684 response_model_list \u4e2d\u6311\u51fa\u7b2c\u4e00\u4e2a\u5c5e\u6027 is_core \u4e3a True \u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\u3002","title":"\u5355\u5143\u6d4b\u8bd5\u652f\u6301"},{"location":"4_unit_test_helper/#_1","text":"\u4ee5 example.starlette_example.py.post_route \u4e3a\u4f8b\u5b50\uff1a @other_pait ( status = PaitStatus . release , tag = ( tag . user_tag , tag . post_tag ), response_model_list = [ UserSuccessRespModel , FailRespModel ], ) async def post_route ( model : UserModel = Body . i ( raw_return = True ), other_model : UserOtherModel = Body . i ( raw_return = True ), sex : SexEnum = Body . i ( description = \"sex\" ), content_type : str = Header . i ( alias = \"Content-Type\" , description = \"Content-Type\" ), ) -> JSONResponse : \"\"\"Test Method:Post Pydantic Model\"\"\" return_dict = model . dict () return_dict [ \"sex\" ] = sex . value return_dict . update ( other_model . dict ()) return_dict . update ({ \"content_type\" : content_type }) return JSONResponse ({ \"code\" : 0 , \"msg\" : \"\" , \"data\" : return_dict }) \u8fd9\u662f\u4e00\u4e2a\u88ab Pait \u88c5\u9970\u7684\u51fd\u6570\u7684\u63a5\u53e3\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u8c03\u7528\uff0c\u6765\u5b8c\u6210\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a class TestStarlette : def test_post ( self , client : TestClient ) -> None : StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . json () \u5728\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c \u5f00\u53d1\u8005\u53ea\u9700\u8981\u4f20\u5165\u6846\u67b6\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\uff0c\u8def\u7531\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u4ee5\u53ca\u4e00\u4e9b\u8bf7\u6c42\u53c2\u6570\u5373\u53ef\uff0c\u6700\u540e\u901a\u8fc7 json \u65b9\u6cd5\u83b7\u53d6\u5230\u8be5\u63a5\u53e3\u54cd\u5e94\u7684\u6570\u636e\u3002 \u5728\u8fd9\u6bb5\u8c03\u7528\u903b\u8f91\u4e2d\uff0c TestHelper \u81ea\u52a8\u53d1\u73b0\u4e86\u8def\u7531\u51fd\u6570\u7684 Url \u548c\u8bf7\u6c42\u65b9\u6cd5\uff0c\u6240\u4ee5\u8c03\u7528 json \u7684\u65f6\u5019 TestHelper \u81ea\u52a8\u53d1\u8d77\u4e86 post \u8bf7\u6c42\uff0c \u7136\u540e\u628a\u54cd\u5e94Body\u5e8f\u5217\u5316\u4e3a Python \u7684 dict \u5bf9\u8c61\u8fd4\u56de\uff0c \u4f46\u662f\u5f53\u8be5\u8def\u7531\u51fd\u6570\u7ed1\u5b9a\u4e86\u591a\u4e2a\u8bf7\u6c42\u65b9\u6cd5\u65f6\uff0c TestHelper \u5219\u65e0\u6cd5\u81ea\u52a8\u6267\u884c\uff0c\u9700\u8981\u624b\u52a8\u6307\u5b9a\u5bf9\u5e94\u7684\u65b9\u6cd5\u6765\u53d1\u8d77\u8bf7\u6c42\uff0c \u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801: class TestStarlette : def test_post ( self , client : TestClient ) -> None : StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . json ( method = \"post\" ) \u6b64\u5916\uff0c\u5728\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u53ef\u80fd\u4f1a\u72b6\u6001\u7801\uff0c Header \u4e4b\u7c7b\u7684\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c\u8fd9\u65f6\u9700\u8981\u4e00\u4e2a\u54cd\u5e94\u5bf9\u8c61 \uff0c TestHelper \u652f\u6301\u901a\u8fc7\u6307\u5b9a\u5bf9\u5e94\u7684Http\u8bf7\u6c42\u65b9\u6cd5\u540d\u6765\u8c03\u7528\uff0c\u6700\u540e\u8fd4\u56de\u5bf9\u5e94\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684Response: class TestStarlette : def test_post ( self , client : TestClient ) -> None : response : Response = StarletteTestHelper ( client , starlette_example . post_route , body_dict = { \"uid\" : 123 , \"user_name\" : \"appl\" , \"age\" : 2 , \"sex\" : \"man\" }, header_dict = { \"user-agent\" : \"customer_agent\" }, ) . post () response . json () \u867d\u7136\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528 TestHelper \u548c\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5ba2\u6237\u7aef\u6ca1\u6709\u592a\u5927\u7684\u5dee\u522b\uff0c\u4f46\u662f TestHelper \u7684\u5185\u4f1a\u5728\u83b7\u53d6\u5230\u8def\u7531\u51fd\u6570\u7684\u54cd\u5e94\u540e \u628a\u54cd\u5e94\u6570\u636e\u653e\u5165 Pait \u88c5\u9970\u5668\u4e2d response_model_list \u586b\u5199\u7684 response_model \u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u68c0\u67e5\u5230HTTP\u72b6\u6001\u7801\uff0cHeader\uff0cBody\u4e09\u8005\u4e2d\u6709\u4e00\u4e2a\u4e0d\u7b26\u5408\u6761\u4ef6\u5c31\u4f1a\u629b\u51fa\u9519\u8bef\uff0c\u4e2d\u65ad\u6d4b\u8bd5\u7528\u4f8b\u3002","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"4_unit_test_helper/#_2","text":"TestHelper \u7684\u53c2\u6570\u5206\u4e3a\u521d\u59cb\u5316\u53c2\u6570\uff0c\u8bf7\u6c42\u53c2\u6570\uff0c\u54cd\u5e94\u7ed3\u679c\u53c2\u65703\u79cd\uff0c\u521d\u59cb\u5316\u53c2\u6570\u67093\u4e2a\uff0c\u5206\u522b\u4e3a\uff1a client: \u6d4b\u8bd5\u6846\u67b6\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef func: \u8def\u7531\u51fd\u6570 pait_dict: Pait \u9488\u5bf9\u8def\u7531\u51fd\u6570\u751f\u6210\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u4e0d\u586b\uff0c TestHelper \u5728\u521d\u59cb\u5316\u65f6\u4f1a\u81ea\u52a8\u8865\u5168\u3002 \u8bf7\u6c42\u53c2\u6570\u6709\u591a\u4e2a\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u80fd\u5bf9\u4e8e\u5927\u591a\u6570\u5f00\u53d1\u8005\u6765\u8bf4\u5e73\u5e73\u65e0\u5947\uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528 Tornado \u4e4b\u7c7b\u7684\u6ca1\u5bf9\u6d4b\u8bd5\u5ba2\u6237\u7aef\u505a\u8fc7\u591a\u5c01\u88c5\u7684\u6846\u67b6\u7684\u5f00\u53d1\u8005\u5219\u80fd\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4fbf\u5229\uff0c\u8fd9\u4e9b\u53c2\u6570\u6709: body_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684Json\u6570\u636e\u3002 cookie_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684cookie\u6570\u636e\u3002 file_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684file\u6570\u636e\u3002 form_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684form\u6570\u636e\u3002 header_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684header\u6570\u636e\u3002 path_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684path\u6570\u636e\u3002 query_dict: \u53d1\u8d77\u8bf7\u6c42\u65f6\u7684query\u6570\u636e\u3002 \u9664\u6b64\u4e4b\u5916\uff0c TestHelper \u8fd8\u67093\u4e2a\u4e0eHTTP\u54cd\u5e94\u7ed3\u679c\u7684Body\u6821\u9a8c\u76f8\u5173\u7684\u53c2\u6570\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u54cd\u5e94\u7ed3\u679c\u7684Body\u4f1a\u4e0e\u5f00\u53d1\u8005\u586b\u5199\u7684 response_model \u7684 response_data \u8fdb\u884c\u6821\u9a8c\uff0c \u5982\u679cBody\u7684\u7c7b\u578b\u5c5e\u4e8eJson\uff0c TestHelper \u9664\u4e86\u4f1a\u5bf9\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u8fdb\u884c\u6821\u9a8c\u5916\uff0c\u8fd8\u4f1a\u5bf9\u5b57\u6bb5\u5dee\u5f02\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u51fa\u73b0\u5dee\u5f02\u5219\u4f1a\u62a5\u9519\uff0c\u6bd4\u5982\u4e0b\u9762a\u53d8\u91cf\u662f\u6211\u4eec\u5b9a\u4e49\u7684 response_demo \u6570\u636e\u7ed3\u6784\uff0cb\u53d8\u91cf\u662f\u54cd\u5e94\u4f53\u7684\u6570\u636e\u7ed3\u6784: a = { \"a\" : 1 , \"b\" : { \"c\" : 3 } } b = { \"a\" : 2 , \"b\" : { \"c\" : 3 , \"d\" : 4 } } TestHelper \u68c0\u6d4b\u5230b\u53d8\u91cf\u591a\u51fa\u6765\u4e00\u4e2a\u7ed3\u6784 b['b']['d'] \uff0c\u6240\u4ee5b\u53d8\u91cf\u5e76\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u54cd\u5e94\u4f53\uff0c TestHelper \u76f4\u63a5\u629b\u51fa\u9519\u8bef\uff0c \u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u53c2\u6570 strict_inspection_check_json_content \u7684\u503c\u4e3a False \uff0c\u8fd9\u6837\u53ea\u4f1a\u6821\u9a8c\u51fa\u73b0\u5728 response_model \u7684\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5426\u5408\u6cd5\u4ee5\u53ca\u662f\u5426\u7f3a\u5c11\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u4e0d\u4f1a\u68c0\u67e5\u591a\u51fa\u7684\u5b57\u6bb5\u3002 TestHelper \u53e6\u5916\u4e24\u4e2a\u53c2\u6570\u4f5c\u7528\u5982\u4e0b: target_pait_response_class: \u8be5\u53c2\u6570\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u6307\u5b9a\u7684 response_model \uff0c\u8fd9\u6837 TestHelper \u5c31\u4f1a\u4ece response_model_list \u4e2d\u7b5b\u9009\u51fa\u4e00\u6279\u7b26\u5408\u6761\u4ef6\u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\u3002 find_coro_response_model: \u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3a False \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b TestHelper \u4f1a\u4ece\u7b5b\u9009\u540e\u7684 response_model_list \u4e2d\u81ea\u52a8\u6311\u9009\u4e0e\u54cd\u5e94\u4f53\u6700\u7b26\u5408\u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u90a3\u4e48 TestHelper \u53ea\u4f1a\u4ece\u7b5b\u9009\u540e\u7684 response_model_list \u4e2d\u6311\u51fa\u7b2c\u4e00\u4e2a\u5c5e\u6027 is_core \u4e3a True \u7684 response_model \u6765\u8fdb\u884c\u6821\u9a8c\u3002","title":"\u53c2\u6570\u4ecb\u7ecd"},{"location":"5_1_introduction/","text":"Pait \u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u8fd9\u4e2a\u88c5\u9970\u5668\u53ea\u505a\u88ab\u88c5\u9970\u51fd\u6570\u7684\u5904\u7406\u548c\u63d2\u4ef6\u7684\u521d\u59cb\u5316\uff0c\u771f\u6b63\u8d1f\u8d23\u529f\u80fd\u5b9e\u73b0\u7684\u90fd\u662f\u8fd9\u4e9b\u88ab\u88c5\u9970\u5668\u521d\u59cb\u5316\u7684\u63d2\u4ef6\uff0c\u5176\u4e2d\u4e0a\u9762\u6240\u8ff0 Pait \u7684\u7c7b\u578b\u8f6c\u6362\u4e0e\u53c2\u6570\u6821\u9a8c\u529f\u80fd\u662f Pait \u7684\u4e00\u4e2a\u6838\u5fc3\u63d2\u4ef6\u3002 \u7b80\u5355\u4ecb\u7ecd \u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 Pait \u4f20\u5165\u9700\u8981\u7684\u63d2\u4ef6\uff0c\u7136\u540e\u7a0b\u5e8f\u5728\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u4ee5\u62e6\u622a\u5668\u7684\u5f62\u5f0f\u628a\u63d2\u4ef6\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u8be5\u63d2\u4ef6\u662f\u524d\u7f6e\u5f62\u63d2\u4ef6\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u653e\u7f6e\u5728\u7c7b\u578b\u8f6c\u6362\u4e0e\u53c2\u6570\u6821\u9a8c\u63d2\u4ef6\u4e4b\u524d\uff0c\u5426\u5219\u5c31\u4f1a\u653e\u5728\u540e\u9762\u3002 \u524d\u7f6e\u63d2\u4ef6\u4e0e\u540e\u7f6e\u63d2\u4ef6\u9664\u4e86\u4ed6\u4eec\u81ea\u8eab\u7684 is_pre_core \u5c5e\u6027\u4e0d\u540c\u5916\uff0c\u5b83\u4eec\u7684\u6700\u4e3b\u8981\u7684\u533a\u522b\u662f\u83b7\u5f97\u5230\u7684\u53c2\u6570\u4e0d\u540c\uff0c\u524d\u7f6e\u63d2\u4ef6\u83b7\u5f97\u7684\u662fWeb\u6846\u67b6\u4f20\u9012\u8fc7\u6765\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u53ef\u4ee5\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u7b80\u5355\u7248\u7684\u4e2d\u95f4\u4ef6\uff0c\u800c\u540e\u7f6e\u5f62\u63d2\u4ef6\u8bfb\u5230\u7684\u662f Pait \u6838\u5fc3\u63d2\u4ef6\u8f6c\u6362\u540e\u7684\u8bf7\u6c42\u6570\u636e\uff0c\u4ee5\u4e0b\u9762\u7684\u51fd\u6570\u4e3a\u4f8b\u5b50\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( uid : str = field . Query . i (), user_name : str = field . Query . i (), ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u5047\u8bbe\u4ee3\u7801\u4e2d\u7684 app \u5df2\u7ecf\u88c5\u8f7d\u4e86\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u548c\u5bf9\u5e94\u7684 Pait \u63d2\u4ef6\uff0c\u5728\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u5b83\u7684\u5904\u7406\u903b\u8f91\u4f1a\u53d8\u4e3a\u5982\u4e0b\u56fe: \u5f53\u8bf7\u6c42\u8fdb\u6765\u540e\u4f1a\u5148\u7531Web\u6846\u67b6\u7684\u4e2d\u95f4\u4ef6\u5904\u7406\uff0c\u7136\u540eWeb\u6846\u67b6\u4f1a\u6267\u884c\u67e5\u627e\u8def\u7531\u7684\u529f\u80fd\uff0c\u5f53\u627e\u4e0d\u5230\u8def\u7531\u65f6\u5c31\u4f1a\u8fd4\u56de Not Found \u7684\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\uff0c\u5982\u679c\u627e\u5230\u4e86\u5bf9\u5e94\u7684\u8def\u7531\uff0c\u5c31\u4f1a\u628a\u8bf7\u6c42\u4f20\u5165\u5230\u5230 Pait \u7684\u5904\u7406\u903b\u8f91\u3002\u5728 Pait \u7684\u5904\u7406\u903b\u8f91\u4e2d\u8bf7\u6c42\u4f1a\u5148\u88ab\u524d\u7f6e\u63d2\u4ef6\u5904\u7406\uff0c \u8fd9\u65f6\u5019\u524d\u7f6e\u63d2\u4ef6\u53ea\u80fd\u5f97\u5230\u6846\u67b6\u5bf9\u5e94\u7684 request \u53c2\u6570(\u5982\u679c\u662f flask \u6846\u67b6\uff0c\u5219\u6ca1\u6709)\uff0c\u5f53\u524d\u7f6e\u63d2\u4ef6\u5904\u7406\u5b8c\u6bd5\u540e\u5c31\u4f1a\u628a\u8bf7\u6c42\u4f20\u5165\u5230\u6838\u5fc3\u63d2\u4ef6\u8fdb\u884c\u53c2\u6570\u63d0\u53d6\u548c\u6821\u9a8c\u8f6c\u6362\uff0c\u7ecf\u6838\u5fc3\u63d2\u4ef6\u5904\u7406\u5b8c\u540e\u4f1a\u628a\u63d0\u53d6\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u7f6e\u63d2\u4ef6\uff0c\u4ea4\u7531\u540e\u7f6e\u63d2\u4ef6\u8fdb\u884c\u5904\u7406\uff0c \u6700\u540e\u624d\u7ecf\u7531\u540e\u7f6e\u63d2\u4ef6\u628a\u53c2\u6570\u4ea4\u7ed9\u771f\u6b63\u7684\u8def\u7531\u51fd\u6570\u5904\u7406\u751f\u6210\u54cd\u5e94\u5e76\u4e00\u4e00\u8fd4\u56de\u3002 \u5982\u4f55\u4f7f\u7528 \u76ee\u524d Pait \u63d0\u4f9b plugin_list \u548c post_plugin_list \u6765\u4f9b\u5f00\u53d1\u8005\u4f20\u5165\u524d\u7f6e\u63d2\u4ef6\u548c\u540e\u7f6e\u63d2\u4ef6\uff0c\u5982\u4e0b\uff1a @pait ( post_plugin_list = [ PluginManager ( RequiredPlugin , required_dict = { \"email\" : [ \"username\" ]}) ] ) \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u5230\u7684\u662f\u4e00\u4e2a\u540d\u4e3a RequiredPlugin \u7684\u63d2\u4ef6\uff0c\u8fd9\u4e2a\u63d2\u4ef6\u5c5e\u4e8e\u540e\u7f6e\u5f62\u63d2\u4ef6\uff0c\u6240\u4ee5\u662f\u4ee5 post_plugin_list \u6765\u4f20\u5165\u63d2\u4ef6\u3002 \u540c\u65f6 Pait \u4e3a\u4e86\u9632\u6b62\u591a\u4e2a\u8bf7\u6c42\u5171\u4eab\u5230\u76f8\u540c\u7684\u63d2\u4ef6\u53d8\u91cf\uff0c\u6240\u4ee5\u4e0d\u652f\u6301\u76f4\u63a5\u5f15\u5165\u63d2\u4ef6\uff0c\u800c\u662f\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\u540d\u4e3a PluginManager \u7684\u7c7b\u6765\u6258\u7ba1\uff0c \u5176\u4e2d\uff0c RequiredPlugin \u63d2\u4ef6\u8981\u6c42\u4f20\u5165\u4e00\u4e2a required_dict \u53c2\u6570\uff0c\u9700\u8981\u628a\u8fd9\u4e2a\u53c2\u6570\u4e00\u5e76\u5199\u5165\u5230 PluginManager \u4e2d\uff0c\u7531 PluginManager \u6765\u521d\u59cb\u5316\u548c\u8fd0\u884c\u63d2\u4ef6\u3002 \u4e0d\u8fc7\u8fd9\u79cd\u5199\u6cd5\u6bd4\u8f83\u5570\u55e6\uff0c\u540c\u65f6\u65e0\u6cd5\u901a\u8fc7\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u6765\u68c0\u67e5\u4f20\u7684\u53c2\u6570\u662f\u5426\u6b63\u786e\uff0c\u5728 Pait 0.7.5\u7248\u672c\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 build \u65b9\u6cd5\u6765\u65b9\u4fbf\u7684\u4f7f\u7528\u63d2\u4ef6\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a @pait ( post_plugin_list = [ RequiredPlugin . build ( required_dict = { \"email\" : [ \"username\" ]})]) \u8fd9\u6837\u4e00\u6765\u4e5f\u53ef\u4ee5\u901a\u8fc7 mypy , pyright \u7b49\u5de5\u5177\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\u3002","title":"\u4ecb\u7ecd"},{"location":"5_1_introduction/#_1","text":"\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 Pait \u4f20\u5165\u9700\u8981\u7684\u63d2\u4ef6\uff0c\u7136\u540e\u7a0b\u5e8f\u5728\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u4ee5\u62e6\u622a\u5668\u7684\u5f62\u5f0f\u628a\u63d2\u4ef6\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u8be5\u63d2\u4ef6\u662f\u524d\u7f6e\u5f62\u63d2\u4ef6\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u653e\u7f6e\u5728\u7c7b\u578b\u8f6c\u6362\u4e0e\u53c2\u6570\u6821\u9a8c\u63d2\u4ef6\u4e4b\u524d\uff0c\u5426\u5219\u5c31\u4f1a\u653e\u5728\u540e\u9762\u3002 \u524d\u7f6e\u63d2\u4ef6\u4e0e\u540e\u7f6e\u63d2\u4ef6\u9664\u4e86\u4ed6\u4eec\u81ea\u8eab\u7684 is_pre_core \u5c5e\u6027\u4e0d\u540c\u5916\uff0c\u5b83\u4eec\u7684\u6700\u4e3b\u8981\u7684\u533a\u522b\u662f\u83b7\u5f97\u5230\u7684\u53c2\u6570\u4e0d\u540c\uff0c\u524d\u7f6e\u63d2\u4ef6\u83b7\u5f97\u7684\u662fWeb\u6846\u67b6\u4f20\u9012\u8fc7\u6765\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u53ef\u4ee5\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u7b80\u5355\u7248\u7684\u4e2d\u95f4\u4ef6\uff0c\u800c\u540e\u7f6e\u5f62\u63d2\u4ef6\u8bfb\u5230\u7684\u662f Pait \u6838\u5fc3\u63d2\u4ef6\u8f6c\u6362\u540e\u7684\u8bf7\u6c42\u6570\u636e\uff0c\u4ee5\u4e0b\u9762\u7684\u51fd\u6570\u4e3a\u4f8b\u5b50\uff1a import uvicorn # type: ignore from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from pait.app.starlette import pait from pait import field @pait () async def demo ( uid : str = field . Query . i (), user_name : str = field . Query . i (), ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u5047\u8bbe\u4ee3\u7801\u4e2d\u7684 app \u5df2\u7ecf\u88c5\u8f7d\u4e86\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u548c\u5bf9\u5e94\u7684 Pait \u63d2\u4ef6\uff0c\u5728\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u5b83\u7684\u5904\u7406\u903b\u8f91\u4f1a\u53d8\u4e3a\u5982\u4e0b\u56fe: \u5f53\u8bf7\u6c42\u8fdb\u6765\u540e\u4f1a\u5148\u7531Web\u6846\u67b6\u7684\u4e2d\u95f4\u4ef6\u5904\u7406\uff0c\u7136\u540eWeb\u6846\u67b6\u4f1a\u6267\u884c\u67e5\u627e\u8def\u7531\u7684\u529f\u80fd\uff0c\u5f53\u627e\u4e0d\u5230\u8def\u7531\u65f6\u5c31\u4f1a\u8fd4\u56de Not Found \u7684\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\uff0c\u5982\u679c\u627e\u5230\u4e86\u5bf9\u5e94\u7684\u8def\u7531\uff0c\u5c31\u4f1a\u628a\u8bf7\u6c42\u4f20\u5165\u5230\u5230 Pait \u7684\u5904\u7406\u903b\u8f91\u3002\u5728 Pait \u7684\u5904\u7406\u903b\u8f91\u4e2d\u8bf7\u6c42\u4f1a\u5148\u88ab\u524d\u7f6e\u63d2\u4ef6\u5904\u7406\uff0c \u8fd9\u65f6\u5019\u524d\u7f6e\u63d2\u4ef6\u53ea\u80fd\u5f97\u5230\u6846\u67b6\u5bf9\u5e94\u7684 request \u53c2\u6570(\u5982\u679c\u662f flask \u6846\u67b6\uff0c\u5219\u6ca1\u6709)\uff0c\u5f53\u524d\u7f6e\u63d2\u4ef6\u5904\u7406\u5b8c\u6bd5\u540e\u5c31\u4f1a\u628a\u8bf7\u6c42\u4f20\u5165\u5230\u6838\u5fc3\u63d2\u4ef6\u8fdb\u884c\u53c2\u6570\u63d0\u53d6\u548c\u6821\u9a8c\u8f6c\u6362\uff0c\u7ecf\u6838\u5fc3\u63d2\u4ef6\u5904\u7406\u5b8c\u540e\u4f1a\u628a\u63d0\u53d6\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u7f6e\u63d2\u4ef6\uff0c\u4ea4\u7531\u540e\u7f6e\u63d2\u4ef6\u8fdb\u884c\u5904\u7406\uff0c \u6700\u540e\u624d\u7ecf\u7531\u540e\u7f6e\u63d2\u4ef6\u628a\u53c2\u6570\u4ea4\u7ed9\u771f\u6b63\u7684\u8def\u7531\u51fd\u6570\u5904\u7406\u751f\u6210\u54cd\u5e94\u5e76\u4e00\u4e00\u8fd4\u56de\u3002","title":"\u7b80\u5355\u4ecb\u7ecd"},{"location":"5_1_introduction/#_2","text":"\u76ee\u524d Pait \u63d0\u4f9b plugin_list \u548c post_plugin_list \u6765\u4f9b\u5f00\u53d1\u8005\u4f20\u5165\u524d\u7f6e\u63d2\u4ef6\u548c\u540e\u7f6e\u63d2\u4ef6\uff0c\u5982\u4e0b\uff1a @pait ( post_plugin_list = [ PluginManager ( RequiredPlugin , required_dict = { \"email\" : [ \"username\" ]}) ] ) \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u5230\u7684\u662f\u4e00\u4e2a\u540d\u4e3a RequiredPlugin \u7684\u63d2\u4ef6\uff0c\u8fd9\u4e2a\u63d2\u4ef6\u5c5e\u4e8e\u540e\u7f6e\u5f62\u63d2\u4ef6\uff0c\u6240\u4ee5\u662f\u4ee5 post_plugin_list \u6765\u4f20\u5165\u63d2\u4ef6\u3002 \u540c\u65f6 Pait \u4e3a\u4e86\u9632\u6b62\u591a\u4e2a\u8bf7\u6c42\u5171\u4eab\u5230\u76f8\u540c\u7684\u63d2\u4ef6\u53d8\u91cf\uff0c\u6240\u4ee5\u4e0d\u652f\u6301\u76f4\u63a5\u5f15\u5165\u63d2\u4ef6\uff0c\u800c\u662f\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\u540d\u4e3a PluginManager \u7684\u7c7b\u6765\u6258\u7ba1\uff0c \u5176\u4e2d\uff0c RequiredPlugin \u63d2\u4ef6\u8981\u6c42\u4f20\u5165\u4e00\u4e2a required_dict \u53c2\u6570\uff0c\u9700\u8981\u628a\u8fd9\u4e2a\u53c2\u6570\u4e00\u5e76\u5199\u5165\u5230 PluginManager \u4e2d\uff0c\u7531 PluginManager \u6765\u521d\u59cb\u5316\u548c\u8fd0\u884c\u63d2\u4ef6\u3002 \u4e0d\u8fc7\u8fd9\u79cd\u5199\u6cd5\u6bd4\u8f83\u5570\u55e6\uff0c\u540c\u65f6\u65e0\u6cd5\u901a\u8fc7\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u6765\u68c0\u67e5\u4f20\u7684\u53c2\u6570\u662f\u5426\u6b63\u786e\uff0c\u5728 Pait 0.7.5\u7248\u672c\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 build \u65b9\u6cd5\u6765\u65b9\u4fbf\u7684\u4f7f\u7528\u63d2\u4ef6\uff0c\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a @pait ( post_plugin_list = [ RequiredPlugin . build ( required_dict = { \"email\" : [ \"username\" ]})]) \u8fd9\u6837\u4e00\u6765\u4e5f\u53ef\u4ee5\u901a\u8fc7 mypy , pyright \u7b49\u5de5\u5177\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\u3002","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"5_2_param_check_plugin/","text":"Pait \u57fa\u4e8e Pydantic \u5b9e\u73b0\u4e86\u5f88\u591a\u53c2\u6570\u6821\u9a8c\u548c\u8f6c\u6362\u7684\u529f\u80fd\uff0c\u4f46\u662f\u5728\u5f00\u53d1API\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f80\u5f80\u8fd8\u9700\u8981\u4e00\u4e9b\u53c2\u6570\u4f9d\u8d56\u76f8\u5173\u7684\u6821\u9a8c\u529f\u80fd\uff0c \u5728 Pait \u4e2d\u901a\u8fc7\u540e\u7f6e\u63d2\u4ef6 Required \u548c AtMostOneOf \u63d0\u4f9b\u4e24\u79cd\u53c2\u6570\u4f9d\u8d56\u6821\u9a8c\u529f\u80fd\u3002 Required\u63d2\u4ef6 \u5728\u7f16\u5199API\u63a5\u53e3\u65f6\uff0c\u7ecf\u5e38\u4f1a\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u6bd4\u5982\u67d0\u4e2a\u63a5\u53e3\u5b58\u5728\u8bf7\u6c42\u53c2\u6570A\uff0cB\uff0cC\uff0c\u4e00\u822c\u60c5\u51b5\u4e0bB\u548cC\u90fd\u662f\u9009\u586b\uff0c\u4f46\u662f\u53c2\u6570C\u4f9d\u8d56\u4e8e\u53c2\u6570B\uff0c\u4e5f\u5c31\u662f\u53c2\u6570B\u5b58\u5728\u65f6\uff0cC\u624d\u53ef\u4ee5\u5b58\u5728\uff0c \u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 Required \u63d2\u4ef6\u914d\u7f6e\u89c4\u5219\u6765\u6ee1\u8db3\u8fd9\u4e00\u4e2a\u6761\u4ef6\uff0c\u5982\u4e0b\u4ee3\u7801\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.plugin.required import AsyncRequiredPlugin from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( post_plugin_list = [ PluginManager ( AsyncRequiredPlugin , required_dict = { \"email\" : [ \"user_name\" ]}) ] ) async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u51fd\u6570\u672c\u610f\u4e0a\u8981\u6c42\u7684\u662f\u53c2\u6570 uid \u4e3a\u5fc5\u586b\u53c2\u6570\uff0c\u800c\u53c2\u6570 user_name \u548c email \u662f\u9009\u586b\u53c2\u6570\uff0c\u4f46\u662f\u901a\u8fc7\u4f7f\u7528 AsyncReuiredPlugin \u63d2\u4ef6\u540e\u5c31\u4f1a\u65b0\u589e\u4e00\u4e2a\u6821\u9a8c\u903b\u8f91\uff0c \u8fd9\u4e2a\u6821\u9a8c\u903b\u8f91\u662f\u7531\u53c2\u6570 required_dict \u5b9a\u4e49\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u53c2\u6570 email \u5fc5\u987b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u53c2\u6570\u96c6\u5408\u624d\u53ef\u4ee5\u5b58\u5728\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u96c6\u5408\u53ea\u6709\u4e00\u4e2a\u53c2\u6570-- user_name \u4f7f\u7528 curl \u53d1\u9001\u8bf7\u6c42\u540e\u53ef\u4ee5\u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53d1\u73b0\uff0c\u5982\u679c\u8bf7\u6c42\u7684\u53c2\u6570\u53ea\u6709 uid \u65f6\u80fd\u6b63\u5e38\u8fd4\u56de\uff0c\u4f46\u8bf7\u6c42\u7684\u53c2\u6570 user_name \u4e3a\u7a7a\u65f6\uff0c\u53c2\u6570 email \u5fc5\u987b\u4e3a\u7a7a\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519\u3002 \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 { \"uid\" : \"123\" , \"user_name\" :null, \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa { \"data\" : \"email requires param user_name, which if not none\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa \\& user_name \\= so1n { \"uid\" : \"123\" , \"user_name\" : \"so1n\" , \"email\" : \"aaa\" } % Note \u5bf9\u4e8e\u540c\u6b65\u51fd\u6570\uff0c\u8bf7\u9009\u7528 ReuiredPlugin \u63d2\u4ef6 AtMostOneOf\u63d2\u4ef6 \u9664\u4e86\u53c2\u6570\u7684\u4e92\u76f8\u4f9d\u8d56\u5916\uff0c\u8fd8\u5b58\u5728\u53c2\u6570\u4e92\u76f8\u6392\u65a5\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u67d0\u4e2a\u63a5\u53e3\u6709\u53c2\u6570A\uff0cB\uff0cC\u4e09\u4e2a\uff0c\u5f53B\u5b58\u5728\u65f6\uff0cC\u5c31\u4e0d\u80fd\u5b58\u5728\uff0cC\u5b58\u5728\u65f6\uff0cB\u5c31\u4e0d\u80fd\u5b58\u5728\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 AtMostOneOf \u63d2\u4ef6\u914d\u7f6e\u89c4\u5219\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.plugin.at_most_one_of import AsyncAtMostOneOfPlugin from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( post_plugin_list = [ PluginManager ( AsyncAtMostOneOfPlugin , at_most_one_of_list = [[ \"email\" , \"user_name\" ]] ) ] ) async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u51fd\u6570\u672c\u610f\u4e0a\u8981\u6c42\u7684\u662f\u53c2\u6570 uid \u4e3a\u5fc5\u586b\u53c2\u6570\uff0c\u800c\u53c2\u6570 user_name \u548c email \u662f\u9009\u586b\u53c2\u6570\uff0c\u4f46\u662f\u901a\u8fc7 AsyncAtMostOneOfPlugin \u63d2\u4ef6\u540e\u5c31\u4f1a\u65b0\u589e\u4e00\u4e2a\u6821\u9a8c\u903b\u8f91\uff0c \u8fd9\u4e2a\u6821\u9a8c\u903b\u8f91\u662f\u7531\u53c2\u6570 at_most_one_of_list \u5b9a\u4e49\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u67d0\u4e00\u7ec4\u53c2\u6570\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u662f\u53c2\u6570 email \u548c user_name \u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u3002 \u4f7f\u7528 curl \u53d1\u9001\u8bf7\u6c42\u540e\u53ef\u4ee5\u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53d1\u73b0\uff0c\u53c2\u6570 email \u548c user_name \u5171\u5b58\u65f6\u5019\u4f1a\u8fd4\u56de\u9519\u8bef\uff0c\u5176\u5b83\u60c5\u51b5\u90fd\u80fd\u6b63\u5e38\u8fd4\u56de\u54cd\u5e94\u3002 \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 { \"uid\" : \"123\" , \"user_name\" :null, \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa { \"uid\" : \"123\" , \"user_name\" :null, \"email\" : \"aaa\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n { \"uid\" : \"123\" , \"user_name\" : \"so1n\" , \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa \\& user_name \\= so1n { \"data\" : \"requires at most one of param email or user_name\" } % Note \u5bf9\u4e8e\u540c\u6b65\u51fd\u6570\uff0c\u8bf7\u9009\u7528 AtMostOneOfPlugin \u63d2\u4ef6","title":"\u53c2\u6570\u68c0\u67e5\u63d2\u4ef6"},{"location":"5_2_param_check_plugin/#required","text":"\u5728\u7f16\u5199API\u63a5\u53e3\u65f6\uff0c\u7ecf\u5e38\u4f1a\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u6bd4\u5982\u67d0\u4e2a\u63a5\u53e3\u5b58\u5728\u8bf7\u6c42\u53c2\u6570A\uff0cB\uff0cC\uff0c\u4e00\u822c\u60c5\u51b5\u4e0bB\u548cC\u90fd\u662f\u9009\u586b\uff0c\u4f46\u662f\u53c2\u6570C\u4f9d\u8d56\u4e8e\u53c2\u6570B\uff0c\u4e5f\u5c31\u662f\u53c2\u6570B\u5b58\u5728\u65f6\uff0cC\u624d\u53ef\u4ee5\u5b58\u5728\uff0c \u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 Required \u63d2\u4ef6\u914d\u7f6e\u89c4\u5219\u6765\u6ee1\u8db3\u8fd9\u4e00\u4e2a\u6761\u4ef6\uff0c\u5982\u4e0b\u4ee3\u7801\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.plugin.required import AsyncRequiredPlugin from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( post_plugin_list = [ PluginManager ( AsyncRequiredPlugin , required_dict = { \"email\" : [ \"user_name\" ]}) ] ) async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u51fd\u6570\u672c\u610f\u4e0a\u8981\u6c42\u7684\u662f\u53c2\u6570 uid \u4e3a\u5fc5\u586b\u53c2\u6570\uff0c\u800c\u53c2\u6570 user_name \u548c email \u662f\u9009\u586b\u53c2\u6570\uff0c\u4f46\u662f\u901a\u8fc7\u4f7f\u7528 AsyncReuiredPlugin \u63d2\u4ef6\u540e\u5c31\u4f1a\u65b0\u589e\u4e00\u4e2a\u6821\u9a8c\u903b\u8f91\uff0c \u8fd9\u4e2a\u6821\u9a8c\u903b\u8f91\u662f\u7531\u53c2\u6570 required_dict \u5b9a\u4e49\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u53c2\u6570 email \u5fc5\u987b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u53c2\u6570\u96c6\u5408\u624d\u53ef\u4ee5\u5b58\u5728\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u96c6\u5408\u53ea\u6709\u4e00\u4e2a\u53c2\u6570-- user_name \u4f7f\u7528 curl \u53d1\u9001\u8bf7\u6c42\u540e\u53ef\u4ee5\u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53d1\u73b0\uff0c\u5982\u679c\u8bf7\u6c42\u7684\u53c2\u6570\u53ea\u6709 uid \u65f6\u80fd\u6b63\u5e38\u8fd4\u56de\uff0c\u4f46\u8bf7\u6c42\u7684\u53c2\u6570 user_name \u4e3a\u7a7a\u65f6\uff0c\u53c2\u6570 email \u5fc5\u987b\u4e3a\u7a7a\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519\u3002 \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 { \"uid\" : \"123\" , \"user_name\" :null, \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa { \"data\" : \"email requires param user_name, which if not none\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa \\& user_name \\= so1n { \"uid\" : \"123\" , \"user_name\" : \"so1n\" , \"email\" : \"aaa\" } % Note \u5bf9\u4e8e\u540c\u6b65\u51fd\u6570\uff0c\u8bf7\u9009\u7528 ReuiredPlugin \u63d2\u4ef6","title":"Required\u63d2\u4ef6"},{"location":"5_2_param_check_plugin/#atmostoneof","text":"\u9664\u4e86\u53c2\u6570\u7684\u4e92\u76f8\u4f9d\u8d56\u5916\uff0c\u8fd8\u5b58\u5728\u53c2\u6570\u4e92\u76f8\u6392\u65a5\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u67d0\u4e2a\u63a5\u53e3\u6709\u53c2\u6570A\uff0cB\uff0cC\u4e09\u4e2a\uff0c\u5f53B\u5b58\u5728\u65f6\uff0cC\u5c31\u4e0d\u80fd\u5b58\u5728\uff0cC\u5b58\u5728\u65f6\uff0cB\u5c31\u4e0d\u80fd\u5b58\u5728\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 AtMostOneOf \u63d2\u4ef6\u914d\u7f6e\u89c4\u5219\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.plugin.at_most_one_of import AsyncAtMostOneOfPlugin from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( post_plugin_list = [ PluginManager ( AsyncAtMostOneOfPlugin , at_most_one_of_list = [[ \"email\" , \"user_name\" ]] ) ] ) async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u51fd\u6570\u672c\u610f\u4e0a\u8981\u6c42\u7684\u662f\u53c2\u6570 uid \u4e3a\u5fc5\u586b\u53c2\u6570\uff0c\u800c\u53c2\u6570 user_name \u548c email \u662f\u9009\u586b\u53c2\u6570\uff0c\u4f46\u662f\u901a\u8fc7 AsyncAtMostOneOfPlugin \u63d2\u4ef6\u540e\u5c31\u4f1a\u65b0\u589e\u4e00\u4e2a\u6821\u9a8c\u903b\u8f91\uff0c \u8fd9\u4e2a\u6821\u9a8c\u903b\u8f91\u662f\u7531\u53c2\u6570 at_most_one_of_list \u5b9a\u4e49\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u67d0\u4e00\u7ec4\u53c2\u6570\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u662f\u53c2\u6570 email \u548c user_name \u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u3002 \u4f7f\u7528 curl \u53d1\u9001\u8bf7\u6c42\u540e\u53ef\u4ee5\u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53d1\u73b0\uff0c\u53c2\u6570 email \u548c user_name \u5171\u5b58\u65f6\u5019\u4f1a\u8fd4\u56de\u9519\u8bef\uff0c\u5176\u5b83\u60c5\u51b5\u90fd\u80fd\u6b63\u5e38\u8fd4\u56de\u54cd\u5e94\u3002 \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 { \"uid\" : \"123\" , \"user_name\" :null, \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa { \"uid\" : \"123\" , \"user_name\" :null, \"email\" : \"aaa\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n { \"uid\" : \"123\" , \"user_name\" : \"so1n\" , \"email\" :null } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& email \\= aaa \\& user_name \\= so1n { \"data\" : \"requires at most one of param email or user_name\" } % Note \u5bf9\u4e8e\u540c\u6b65\u51fd\u6570\uff0c\u8bf7\u9009\u7528 AtMostOneOfPlugin \u63d2\u4ef6","title":"AtMostOneOf\u63d2\u4ef6"},{"location":"5_3_json_response_plugin/","text":"\u76ee\u524dAPI\u63a5\u53e3\u7528\u7684\u6700\u591a\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u5c31\u662fJson\uff0c\u6240\u4ee5\u57fa\u4e8eJson\u54cd\u5e94\u6709\u5f88\u591a\u7279\u522b\u7684\u9700\u6c42\uff0c\u76ee\u524d\uff0c Pait \u81ea\u5e26\u4e86\u4e24\u4e2a\u4e0eJson\u54cd\u5e94\u76f8\u5173\u7684\u63d2\u4ef6\uff0c\u4ed6\u4eec\u90fd\u7528\u5230\u4e86 Pait \u88c5\u9970\u5668\u586b\u5199\u7684 response_model_list \u3002 Note 1.\u7531\u4e8e\u8981\u83b7\u53d6\u5230\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u63d2\u4ef6\u90fd\u4f1a\u4fb5\u5165\u5230\u539f\u6709\u6846\u67b6\uff0c\u5bfc\u81f4\u4f7f\u7528\u65b9\u6cd5\u4e0e\u539f\u6709\u6846\u67b6\u6709\u4e9b\u4e0d\u540c\u3002 2.\u8fd9\u4e24\u4e2a\u63d2\u4ef6\u90fd\u8981\u5355\u72ec\u6839\u636e\u4e0d\u540c\u7684Web\u6846\u67b6\u8fdb\u884c\u517c\u5bb9\uff0c\u6240\u4ee5\u8bf7\u4f7f\u7528 from pait.app.{web framework name}.plugin.{plugin name} import xxx \u5f15\u5165\u5bf9\u5e94\u7684\u63d2\u4ef6\u3002 \u6821\u9a8cJson\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6 \u6821\u9a8cJson\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5728\u6536\u5230\u8fd4\u56de\u54cd\u5e94\u7ed3\u679c\u65f6\uff0c\u5bf9\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u6821\u9a8c\u6210\u529f\uff0c\u624d\u4f1a\u8fd4\u56de\u54cd\u5e94\uff0c\u5426\u5219\u5c31\u4f1a\u62a5\u9519\u3002 \u4ee5 example.param_verify.starlette_example.async_check_json_plugin_route \u4e3a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 from typing import Optional from typing_extensions import TypedDict # \u5bf9\u4e8ePython3.8\u4ee5\u4e0b\u7684\u53ea\u80fd\u901a\u8fc7typing_extensions\u5f15\u5165 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.app.starlette.plugin.check_json_resp import AsyncCheckJsonRespPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d2\u4ef6\u6821\u9a8c\u4e0d\u901a\u8fc7\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\uff0c\u8be5\u51fd\u6570\u4f1a\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c\u5e76\u4ee5\u8fd4\u56de\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) _sub_typed_dict = TypedDict ( \"_sub_typed_dict\" , { \"uid\" : int , \"user_name\" : str , \"email\" : str , }, ) _typed_dict = TypedDict ( \"_typed_dict\" , { \"code\" : int , \"msg\" : str , \"data\" : _sub_typed_dict , }, ) @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ PluginManager ( AsyncCheckJsonRespPlugin )]) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> _typed_dict : \"\"\"Test json plugin by resp type is typed dict\"\"\" return_dict : dict = { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } if display_age == 1 : return_dict [ \"data\" ][ \"age\" ] = age return return_dict # type: ignore app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5728\u8fd9\u4e2a\u4ee3\u7801\u4e2d\uff0c\u9996\u5148\u662f\u572824-39\u884c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a _typed_dict \u7c7b\u578b\uff0c\u4ed6\u7684\u7ed3\u6784\u4e0e UserSuccessRespModel3.response_data \u4e00\u6837\uff0c \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4f1a\u5728 demo \u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u5b9a\u4e49 demo \u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e3a _typed_dict \u3002 Note \u5982\u679c\u89c9\u5f97\u91cd\u590d\u5b9a\u4e49\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u53ef\u4ee5\u76f4\u63a5\u586b\u5199\u4e3a dict \uff0c \u4f46\u662f\u8fd9\u6837\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u5c31\u6ca1\u529e\u6cd5\u68c0\u67e5\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u662f\u5426\u6b63\u786e\u4e86\u3002 \u7136\u540e\u572842\u884c\u4e2d\u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a AsyncCheckJsonRespPlugin \u7684\u63d2\u4ef6\uff0c\u8be5\u63d2\u4ef6\u4f1a\u5728\u542f\u52a8\u7684\u65f6\u5019\u68c0\u67e5\u5b9a\u4e49\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e UserSuccessRespModel3.response_data \u662f\u5426\u4e00\u81f4\uff0c\u4e0d\u4e00\u81f4\u5219\u4f1a\u62a5\u9519\u3002 \u7136\u540e\u5b83\u5728\u8fd0\u884c\u65f6\u6821\u9a8c\u8def\u7531\u51fd\u6570\u54cd\u5e94\u7684\u5b57\u5178\u7ed3\u6784\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5426\u4e0e UserSuccessRespModel3.response_data \u4e00\u81f4\uff0c\u5982\u679c\u6821\u9a8c\u5931\u8d25\u5219\u8fd4\u56de\u9519\u8bef\uff0c\u6821\u9a8c\u6210\u529f\u5219\u8c03\u7528\u6846\u67b6\u5bf9\u5e94\u7684Json\u54cd\u5e94\u5bf9\u8c61\u628a\u6570\u636e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u5177\u4f53\u793a\u4f8b\u5982\u4e0b\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"data\" : \"1 validation error for ResponseModel\\ndata -> age\\n field required (type=value_error.missing)\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"email\" : \"example@xxx.com\" , \"age\" :18 }} % \u901a\u8fc7\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u54cd\u5e94\u7ed3\u679c\u4e0e\u5b9a\u4e49\u7684\u54cd\u5e94Model\u4e0d\u5339\u914d\u65f6\uff0c\u4f1a\u76f4\u63a5\u629b\u51fa\u9519\u8bef\uff0c\u5339\u914d\u5219\u6b63\u5e38\u54cd\u5e94\u3002 \u81ea\u52a8\u8865\u5168Json\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6 \u5728\u7f16\u5199API\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u63a5\u53e3\u8fd4\u56de\u7684\u54cd\u5e94\u7ed3\u679c\u5e94\u8be5\u4f1a\u4e0e\u6587\u6863\u63cf\u8ff0\u7684\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u7b5b\u9009\u6761\u4ef6\u7684\u4e0d\u540c\u7ecf\u5e38\u5bfc\u81f4\u8fd4\u56de\u7684\u54cd\u5e94\u7ed3\u679c\u662f\u6587\u6863\u63cf\u8ff0\u7684\u54cd\u5e94\u7ed3\u679c\u7684\u5b50\u96c6\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u505a\u7279\u6b8a\u5904\u7406\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u81ea\u52a8\u8865\u5168Json\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6\uff0c\u81ea\u52a8\u4e3a\u90a3\u4e9b\u7f3a\u5c11\u7684\u5b57\u6bb5\u8865\u4e0a\u9ed8\u8ba4\u503c\u3002 \u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u53bb\u6389\u53d8\u91cf _typed_dict \uff0c\u518d\u628a\u63d2\u4ef6 AsyncCheckJsonRespPlugin \u66ff\u6362\u4e3a AsyncAutoCompleteJsonRespPlugin \uff0c\u4ee3\u7801\u5982\u4e0b: from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.app.starlette.plugin.auto_complete_json_resp import AsyncAutoCompleteJsonRespPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ PluginManager ( AsyncAutoCompleteJsonRespPlugin )] ) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> dict : \"\"\"Test json plugin by resp type is typed dict\"\"\" return_dict : dict = { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } if display_age == 1 : return_dict [ \"data\" ][ \"age\" ] = age return return_dict # type: ignore app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u63a5\u7740\u5728\u8fd0\u884c\u4e0e\u4e0a\u9762\u4f8b\u5b50\u76f8\u540c\u7684\u8bf7\u6c42: \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"example@xxx.com\" }} % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :0, \"email\" : \"example@xxx.com\" }} % \u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u54cd\u5e94\u7ed3\u679c\u7684 age \u503c\u4e3a\u8c03\u7528\u547d\u4ee4\u65f6\u586b\u5199\u768418\uff0c\u800c\u7b2c\u4e8c\u4e2a\u54cd\u5e94\u7ed3\u679c\u4e2d\u672c\u6765\u662f\u6ca1\u6709 age \u5b57\u6bb5\u7684\uff0c\u8be5\u5b57\u6bb5\u503c\u662f\u7531\u63d2\u4ef6 AsyncAutoCompleteJsonRespPlugin \u6839\u636e age \u7684\u7c7b\u578b\u81ea\u52a8\u586b\u4e0a\u7684,2k\u9ed8\u8ba4\u503c0\u3002 AsyncAutoCompleteJsonRespPlugin \u81ea\u52a8\u8865\u5168\u7684\u539f\u7406\u4ece response_model_list \u4e2d\u9009\u51fa\u5f00\u53d1\u8005\u586b\u5199\u7684\u7b2c\u4e00\u4e2a ResponseModel \uff0c\u6bd4\u5982\u4ee3\u7801\u4e2d\u7684\u4f8b\u5b50\u5c31\u662f UserSuccessRespModel3 \uff0c \u7136\u540e\u901a\u8fc7\u8c03\u7528 UserSuccessRespModel3 \u7684 get_default_dict \u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u9ed8\u8ba4\u503c\uff0c\u518d\u4e0e\u8def\u7531\u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u53d1\u73b0\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u7f3a\u5c11\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u5c31\u4f1a\u81ea\u52a8\u8865\u4e0a\u3002 \u5982\u679c\u5f00\u53d1\u8005\u89c9\u5f97\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4\u503c\u4e0d\u559c\u6b22\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u5b57\u6bb5\u5bf9\u5e94\u7684 Field \u6765\u6307\u5b9a\u81ea\u5df1\u60f3\u8981\u7684\u9ed8\u8ba4\u503c\uff0c\u6bd4\u5982\u5bf9 UserSuccessRespModel3 \u8fdb\u884c\u66f4\u6539: class UserSuccessRespModel3 ( PaitJsonResponseModel ): is_core : bool = True class ResponseModel ( ResponseModel ): # type: ignore class DataModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 ) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) age : int = Field ( default = 10 , description = \"age\" , gt = 1 , lt = 100 ) email : str = Field ( description = \"user email\" ) data : DataModel description : str = \"success response\" response_data : Type [ BaseModel ] = ResponseModel \u901a\u8fc7 Field \u5b9a\u4e49 age \u7684\u9ed8\u8ba4\u503c\u4e3a10,\u518d\u8fd0\u884c\u4e00\u6837\u7684\u8bf7\u6c42\u540e\u53ef\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7684 age \u9ed8\u8ba4\u503c\u53d8\u4e3a10\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"example@xxx.com\" }} % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :10, \"email\" : \"example@xxx.com\" }} %","title":"Json\u54cd\u5e94\u63d2\u4ef6"},{"location":"5_3_json_response_plugin/#json","text":"\u6821\u9a8cJson\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5728\u6536\u5230\u8fd4\u56de\u54cd\u5e94\u7ed3\u679c\u65f6\uff0c\u5bf9\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u6821\u9a8c\uff0c\u5982\u679c\u6821\u9a8c\u6210\u529f\uff0c\u624d\u4f1a\u8fd4\u56de\u54cd\u5e94\uff0c\u5426\u5219\u5c31\u4f1a\u62a5\u9519\u3002 \u4ee5 example.param_verify.starlette_example.async_check_json_plugin_route \u4e3a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 from typing import Optional from typing_extensions import TypedDict # \u5bf9\u4e8ePython3.8\u4ee5\u4e0b\u7684\u53ea\u80fd\u901a\u8fc7typing_extensions\u5f15\u5165 import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.app.starlette.plugin.check_json_resp import AsyncCheckJsonRespPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d2\u4ef6\u6821\u9a8c\u4e0d\u901a\u8fc7\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\uff0c\u8be5\u51fd\u6570\u4f1a\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c\u5e76\u4ee5\u8fd4\u56de\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) _sub_typed_dict = TypedDict ( \"_sub_typed_dict\" , { \"uid\" : int , \"user_name\" : str , \"email\" : str , }, ) _typed_dict = TypedDict ( \"_typed_dict\" , { \"code\" : int , \"msg\" : str , \"data\" : _sub_typed_dict , }, ) @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ PluginManager ( AsyncCheckJsonRespPlugin )]) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> _typed_dict : \"\"\"Test json plugin by resp type is typed dict\"\"\" return_dict : dict = { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } if display_age == 1 : return_dict [ \"data\" ][ \"age\" ] = age return return_dict # type: ignore app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u5728\u8fd9\u4e2a\u4ee3\u7801\u4e2d\uff0c\u9996\u5148\u662f\u572824-39\u884c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a _typed_dict \u7c7b\u578b\uff0c\u4ed6\u7684\u7ed3\u6784\u4e0e UserSuccessRespModel3.response_data \u4e00\u6837\uff0c \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4f1a\u5728 demo \u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u5b9a\u4e49 demo \u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e3a _typed_dict \u3002 Note \u5982\u679c\u89c9\u5f97\u91cd\u590d\u5b9a\u4e49\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u53ef\u4ee5\u76f4\u63a5\u586b\u5199\u4e3a dict \uff0c \u4f46\u662f\u8fd9\u6837\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u5c31\u6ca1\u529e\u6cd5\u68c0\u67e5\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u662f\u5426\u6b63\u786e\u4e86\u3002 \u7136\u540e\u572842\u884c\u4e2d\u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a AsyncCheckJsonRespPlugin \u7684\u63d2\u4ef6\uff0c\u8be5\u63d2\u4ef6\u4f1a\u5728\u542f\u52a8\u7684\u65f6\u5019\u68c0\u67e5\u5b9a\u4e49\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e UserSuccessRespModel3.response_data \u662f\u5426\u4e00\u81f4\uff0c\u4e0d\u4e00\u81f4\u5219\u4f1a\u62a5\u9519\u3002 \u7136\u540e\u5b83\u5728\u8fd0\u884c\u65f6\u6821\u9a8c\u8def\u7531\u51fd\u6570\u54cd\u5e94\u7684\u5b57\u5178\u7ed3\u6784\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5426\u4e0e UserSuccessRespModel3.response_data \u4e00\u81f4\uff0c\u5982\u679c\u6821\u9a8c\u5931\u8d25\u5219\u8fd4\u56de\u9519\u8bef\uff0c\u6821\u9a8c\u6210\u529f\u5219\u8c03\u7528\u6846\u67b6\u5bf9\u5e94\u7684Json\u54cd\u5e94\u5bf9\u8c61\u628a\u6570\u636e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u5177\u4f53\u793a\u4f8b\u5982\u4e0b\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"data\" : \"1 validation error for ResponseModel\\ndata -> age\\n field required (type=value_error.missing)\" } % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"email\" : \"example@xxx.com\" , \"age\" :18 }} % \u901a\u8fc7\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u54cd\u5e94\u7ed3\u679c\u4e0e\u5b9a\u4e49\u7684\u54cd\u5e94Model\u4e0d\u5339\u914d\u65f6\uff0c\u4f1a\u76f4\u63a5\u629b\u51fa\u9519\u8bef\uff0c\u5339\u914d\u5219\u6b63\u5e38\u54cd\u5e94\u3002","title":"\u6821\u9a8cJson\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6"},{"location":"5_3_json_response_plugin/#json_1","text":"\u5728\u7f16\u5199API\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u63a5\u53e3\u8fd4\u56de\u7684\u54cd\u5e94\u7ed3\u679c\u5e94\u8be5\u4f1a\u4e0e\u6587\u6863\u63cf\u8ff0\u7684\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u7b5b\u9009\u6761\u4ef6\u7684\u4e0d\u540c\u7ecf\u5e38\u5bfc\u81f4\u8fd4\u56de\u7684\u54cd\u5e94\u7ed3\u679c\u662f\u6587\u6863\u63cf\u8ff0\u7684\u54cd\u5e94\u7ed3\u679c\u7684\u5b50\u96c6\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u505a\u7279\u6b8a\u5904\u7406\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u81ea\u52a8\u8865\u5168Json\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6\uff0c\u81ea\u52a8\u4e3a\u90a3\u4e9b\u7f3a\u5c11\u7684\u5b57\u6bb5\u8865\u4e0a\u9ed8\u8ba4\u503c\u3002 \u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u53bb\u6389\u53d8\u91cf _typed_dict \uff0c\u518d\u628a\u63d2\u4ef6 AsyncCheckJsonRespPlugin \u66ff\u6362\u4e3a AsyncAutoCompleteJsonRespPlugin \uff0c\u4ee3\u7801\u5982\u4e0b: from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.app.starlette.plugin.auto_complete_json_resp import AsyncAutoCompleteJsonRespPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ PluginManager ( AsyncAutoCompleteJsonRespPlugin )] ) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> dict : \"\"\"Test json plugin by resp type is typed dict\"\"\" return_dict : dict = { \"code\" : 0 , \"msg\" : \"\" , \"data\" : { \"uid\" : uid , \"user_name\" : user_name , \"email\" : email , }, } if display_age == 1 : return_dict [ \"data\" ][ \"age\" ] = age return return_dict # type: ignore app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u63a5\u7740\u5728\u8fd0\u884c\u4e0e\u4e0a\u9762\u4f8b\u5b50\u76f8\u540c\u7684\u8bf7\u6c42: \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"example@xxx.com\" }} % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :0, \"email\" : \"example@xxx.com\" }} % \u901a\u8fc7\u54cd\u5e94\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u54cd\u5e94\u7ed3\u679c\u7684 age \u503c\u4e3a\u8c03\u7528\u547d\u4ee4\u65f6\u586b\u5199\u768418\uff0c\u800c\u7b2c\u4e8c\u4e2a\u54cd\u5e94\u7ed3\u679c\u4e2d\u672c\u6765\u662f\u6ca1\u6709 age \u5b57\u6bb5\u7684\uff0c\u8be5\u5b57\u6bb5\u503c\u662f\u7531\u63d2\u4ef6 AsyncAutoCompleteJsonRespPlugin \u6839\u636e age \u7684\u7c7b\u578b\u81ea\u52a8\u586b\u4e0a\u7684,2k\u9ed8\u8ba4\u503c0\u3002 AsyncAutoCompleteJsonRespPlugin \u81ea\u52a8\u8865\u5168\u7684\u539f\u7406\u4ece response_model_list \u4e2d\u9009\u51fa\u5f00\u53d1\u8005\u586b\u5199\u7684\u7b2c\u4e00\u4e2a ResponseModel \uff0c\u6bd4\u5982\u4ee3\u7801\u4e2d\u7684\u4f8b\u5b50\u5c31\u662f UserSuccessRespModel3 \uff0c \u7136\u540e\u901a\u8fc7\u8c03\u7528 UserSuccessRespModel3 \u7684 get_default_dict \u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u9ed8\u8ba4\u503c\uff0c\u518d\u4e0e\u8def\u7531\u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u53d1\u73b0\u54cd\u5e94\u7684\u6570\u636e\u7ed3\u6784\u7f3a\u5c11\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u5c31\u4f1a\u81ea\u52a8\u8865\u4e0a\u3002 \u5982\u679c\u5f00\u53d1\u8005\u89c9\u5f97\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4\u503c\u4e0d\u559c\u6b22\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u5b57\u6bb5\u5bf9\u5e94\u7684 Field \u6765\u6307\u5b9a\u81ea\u5df1\u60f3\u8981\u7684\u9ed8\u8ba4\u503c\uff0c\u6bd4\u5982\u5bf9 UserSuccessRespModel3 \u8fdb\u884c\u66f4\u6539: class UserSuccessRespModel3 ( PaitJsonResponseModel ): is_core : bool = True class ResponseModel ( ResponseModel ): # type: ignore class DataModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 ) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 ) age : int = Field ( default = 10 , description = \"age\" , gt = 1 , lt = 100 ) email : str = Field ( description = \"user email\" ) data : DataModel description : str = \"success response\" response_data : Type [ BaseModel ] = ResponseModel \u901a\u8fc7 Field \u5b9a\u4e49 age \u7684\u9ed8\u8ba4\u503c\u4e3a10,\u518d\u8fd0\u884c\u4e00\u6837\u7684\u8bf7\u6c42\u540e\u53ef\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7684 age \u9ed8\u8ba4\u503c\u53d8\u4e3a10\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"example@xxx.com\" }} % \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 { \"code\" :0, \"msg\" : \"\" , \"data\" : { \"uid\" :123, \"user_name\" : \"so1n\" , \"age\" :10, \"email\" : \"example@xxx.com\" }} %","title":"\u81ea\u52a8\u8865\u5168Json\u54cd\u5e94\u7ed3\u679c\u63d2\u4ef6"},{"location":"5_4_mock_json_response_check_plugin/","text":"\u5728\u5bf9\u63a5\u4e86\u9700\u6c42\u540e\uff0c\u6211\u4eec\u9700\u8981\u5148\u51fa\u4e00\u4efd\u63a5\u53e3\u6587\u6863\u7ed9\u5ba2\u6237\u7aef\u540e\u518d\u7f16\u5199\u63a5\u53e3\u5bf9\u5e94\u7684\u903b\u8f91\u4ee3\u7801\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 Pait \u6765\u88c5\u9970\u4e00\u4e2a\u6ca1\u6709\u903b\u8f91\u529f\u80fd\u7684\u8def\u7531\u51fd\u6570\uff0c \u5e76\u901a\u8fc7 Pait \u81ea\u52a8\u751f\u6210\u4e00\u4efdAPI\u6587\u6863\u7ed9\u5ba2\u6237\u7aef\u4f7f\u7528\uff0c\u7136\u540e\u53cc\u65b9\u518d\u4e00\u8d77\u5f00\u53d1\u529f\u80fd\u3002 \u4f46\u662f\u5728\u6ca1\u8fbe\u5230\u8054\u8c03\u4e4b\u524d\u5ba2\u6237\u7aef\u5f00\u53d1\u8005\u4e5f\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u6d4b\u8bd5\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u5ba2\u6237\u7aef\u9700\u8981\u5148\u6839\u636e\u54cd\u5e94Model\u6765\u7f16\u5199\u5bf9\u5e94\u7684Mock\u6570\u636e\uff0c \u8fd9\u6837\u4f1a\u589e\u52a0\u524d\u7aef\u7684\u5de5\u4f5c\u91cf\uff0c\u540c\u65f6\u524d\u7aefMock\u7684\u6570\u636e\u5e76\u4e0d\u4e00\u5b9a\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 MockPlugin \u63d2\u4ef6\u6765\u8ba9\u63a5\u53e3\u63d0\u4f9bMock\u6570\u636e\u3002 MockPlugin \u63d2\u4ef6\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u4ee3\u7801\u5982\u4e0b: from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.plugin import PluginManager from pait.app.starlette.plugin.mock_response import AsyncMockPlugin from example.param_verify.model import UserSuccessRespModel3 from pait.app.starlette import pait from pait import field @pait ( response_model_list = [ UserSuccessRespModel3 ], plugin_list = [ PluginManager ( AsyncMockPlugin )] ) async def demo ( uid : int = field . Query . i ( description = \"user id\" , gt = 10 , lt = 1000 ), email : Optional [ str ] = field . Query . i ( default = \"example@xxx.com\" , description = \"user email\" ), user_name : str = field . Query . i ( description = \"user name\" , min_length = 2 , max_length = 4 ), age : int = field . Query . i ( description = \"age\" , gt = 1 , lt = 100 ), display_age : int = field . Query . i ( 0 , description = \"display_age\" ), ) -> dict : pass app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) uvicorn . run ( app ) \u8fd9\u4efd\u4ee3\u7801\u4e2d\uff0c\u5f00\u53d1\u8005\u5b9e\u73b0\u4e86\u4e00\u4e2a\u8def\u7531\u51fd\u6570\u7b7e\u540d\uff0c\u8be5\u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u903b\u8f91\uff0c\u7136\u540e\u901a\u8fc7 pait \u88c5\u9970\u5668\u586b\u5199 AsyncMockPlugin \u548cResponseModel\uff0c \u5982\u679c\u6709\u591a\u4e2aResponseModel\u7684\u8bdd MockPlugin \u4f1a\u9ed8\u8ba4\u4f7f\u7528\u7b2c\u4e00\u4e2aResponseModel\uff0c\u8fd0\u884c\u8fd9\u4efd\u4ee3\u7801\u540e\u6267\u884c\u5bf9\u5e94\u7684\u8bf7\u6c42\u547d\u4ee4\u53ef\u4ee5\u5f97\u5230\u9ed8\u8ba4\u7684Mock\u54cd\u5e94\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"success\" , \"data\" : { \"uid\" :0, \"user_name\" : \"\" , \"age\" :0, \"email\" : \"\" }} % \u8fd9\u4efd\u9ed8\u8ba4\u7684\u54cd\u5e94\u6570\u636e\u662f AsyncMockPlugin \u901a\u8fc7\u8c03\u7528 UserSuccessRespModel3.get_example_value \u751f\u6210\u7684\uff0c\u5982\u679c\u5bf9\u4e8e\u751f\u6210\u7684\u9ed8\u8ba4\u503c\u4e0d\u6ee1\u610f\uff0c \u53ef\u4ee5\u901a\u8fc7 Field \u7684 example \u6765\u5b9a\u4e49\u4e0d\u540c\u7684\u54cd\u5e94\u503c\uff0c\u6bd4\u5982\u628a UserSuccessRespModel3 \u6539\u6210\u4e0b\u9762\u7684\u6837\u5b50\uff1a import random # \u5f15\u5165faker\u5e93 from faker import Faker fake = Faker () class UserSuccessRespModel3 ( PaitJsonResponseModel ): is_core : bool = True class ResponseModel ( ResponseModel ): # type: ignore class DataModel ( BaseModel ): uid : int = Field ( description = \"user id\" , gt = 10 , lt = 1000 , example = lambda : random . randint ( 100000 , 900000 )) user_name : str = Field ( description = \"user name\" , min_length = 2 , max_length = 4 , example = \"so1n\" ) age : int = Field ( description = \"age\" , gt = 1 , lt = 100 , example = 18 ) email : str = Field ( description = \"user email\" , example = fake . email ) data : DataModel description : str = \"success response\" response_data : Type [ BaseModel ] = ResponseModel \u8fd9\u6837\u4e00\u6765\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u5957\u751f\u6210\u793a\u4f8b\u503c\u7684\u89c4\u5219\uff0c\u6bd4\u5982\u5b57\u6bb5uid\u5c31\u662f\u968f\u673a\u4ece100000-900000\u4e2d\u6311\u9009\u4e00\u4e2a\u503c\uff0c\u5b57\u6bb5eamil\u5c31\u662f\u901a\u8fc7fake.email\u751f\u6210\u7684\uff0c\u800c\u5b57\u6bb5user_name\u548cage\u5219\u6709\u6307\u5b9a\u7684\u56fa\u5b9a\u503c\uff0c \u901a\u8fc7\u8fd0\u884c\u4ee3\u7801\u540e\u6267\u884c\u8bf7\u6c42\u547d\u4ee4\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7684\u793a\u4f8b\u503c\u7b26\u5408\u6211\u4eec\u7684\u5b9a\u4e49: \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"success\" , \"data\" : { \"uid\" :835740, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"warnold@example.net\" }} \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"success\" , \"data\" : { \"uid\" :203363, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"nathanthomas@example.net\" }} \u279c ~ curl http://127.0.0.1:8000/api/demo \\? uid \\= 123 \\& user_name \\= so1n \\& age \\= 18 \\& display_age \\= 1 { \"code\" :0, \"msg\" : \"success\" , \"data\" : { \"uid\" :508769, \"user_name\" : \"so1n\" , \"age\" :18, \"email\" : \"reynoldslisa@example.com\" }}","title":"Mock\u54cd\u5e94\u63d2\u4ef6"},{"location":"5_5_how_tp_customize_the_plugin/","text":"Pait \u81ea\u5e26\u662f\u63d2\u4ef6\u5e76\u4e0d\u591a\uff0c\u4f46\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u5b9e\u73b0\u63d2\u4ef6\uff0c\u4e0b\u9762\u4ee5\u5f02\u5e38\u6355\u83b7\u63d2\u4ef6\u4e3a\u4f8b\u5b50\u9610\u8ff0\u5982\u4f55\u5236\u4f5c\u4e00\u4e2a\u63d2\u4ef6\u3002 \u4e0b\u9762\u6240\u793a\u4ee3\u7801\u662f\u4e00\u4e2a\u7b80\u5355\u7684API\u63a5\u53e3\uff1a from typing import Optional import uvicorn # type: ignore from starlette.applications import Starlette from starlette.requests import Request from starlette.responses import JSONResponse from starlette.routing import Route from pait.exceptions import TipException from pait.app.starlette import pait from pait import field async def api_exception ( request : Request , exc : Exception ) -> JSONResponse : \"\"\"\u63d0\u53d6\u5f02\u5e38\u4fe1\u606f\uff0c \u5e76\u4ee5\u54cd\u5e94\u8fd4\u56de\"\"\" if isinstance ( exc , TipException ): exc = exc . exc return JSONResponse ({ \"data\" : str ( exc )}) @pait () async def demo ( uid : str = field . Query . i (), user_name : Optional [ str ] = field . Query . i ( default = None ), email : Optional [ str ] = field . Query . i ( default = None ) ) -> JSONResponse : return JSONResponse ({ \"uid\" : uid , \"user_name\" : user_name , \"email\" : email }) app = Starlette ( routes = [ Route ( \"/api/demo\" , demo , methods = [ \"GET\" ])]) app . add_exception_handler ( Exception , api_exception ) uvicorn . run ( app ) \u8fd9\u4e2a\u63a5\u53e3\u7531 Pait \u63d0\u4f9b\u53c2\u6570\u6821\u9a8c\u529f\u80fd\uff0c\u5982\u679c\u8c03\u7528\u65b9\u53d1\u8d77\u7684\u53c2\u6570\u6709\u9519\uff0c\u5219\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u5e76\u6700\u7ec8\u88ab starlette \u6355\u83b7\u518d\u5206\u53d1\u5230 api_exception \u51fd\u6570\u5904\u7406\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u8bf7\u6c42\uff0c Pait \u5728\u6821\u9a8c\u53d1\u73b0\u7f3a\u5c11\u53c2\u6570uid\u65f6\u4f1a\u629b\u51fa\u9519\u8bef\uff0c\u6700\u540e\u88ab api_exception \u6355\u83b7\u5e76\u628a\u5f02\u5e38\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo { \"data\" : \"Can not found uid value\" } \u73b0\u5728\u8be5\u63a5\u53e3\u591a\u4e86\u4e00\u4e2a\u9700\u6c42\uff0c\u9700\u8981\u5bf9\u8be5\u8def\u7531\u51fd\u6570\u7684\u5f02\u5e38\u7684\u5904\u7406\u5b9a\u5236\u5316\uff0c\u751f\u6210\u4e0d\u4e00\u6837\u7684\u8fd4\u56de\u683c\u5f0f\uff0c\u4f46\u662f api_exception \u662f\u7edf\u4e00\u5904\u7406\u6240\u6709\u63a5\u53e3\u51fd\u6570\u7684\u5f02\u5e38\uff0c \u5b83\u4e0d\u53ef\u80fd\u4e3a\u6bcf\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e00\u4e2a\u5355\u72ec\u7684\u51fd\u6570\u5904\u7406\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u5b9a\u5236\u4e00\u4e2a\u6355\u83b7\u5f02\u5e38\u7684\u63d2\u4ef6\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u4e0b\u662f\u4e00\u4e2a\u5355\u72ec\u9488\u5bf9\u8fd9\u4e2a\u63a5\u53e3\u5b9a\u5236\u7684\u63d2\u4ef6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from typing import Any , Dict from pait.plugin.base import BaseAsyncPlugin from pait.model.core import PaitCoreModel from pydantic import ValidationError from pait.exceptions import PaitBaseException class DemoExceptionPlugin ( BaseAsyncPlugin ): is_pre_core : bool = True @classmethod def cls_hook_by_core_model ( cls , pait_core_model : \"PaitCoreModel\" , kwargs : Dict ) -> Dict : if pait_core_model . func . __name__ != \"demo\" : raise RuntimeError ( f \"The { cls . __name__ } is only used for demo func\" ) return super () . cls_hook_by_core_model ( pait_core_model , kwargs ) async def __call__ ( self , * args : Any , ** kwargs : Any ) -> Any : try : return await self . call_next ( args , kwargs ) except ( ValidationError , PaitBaseException ) as e : return JSONResponse ({ \"plugin exc info\" : str ( e )}) \u5728\u8fd9\u4e2a\u793a\u4f8b\u63d2\u4ef6\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u6709\u51e0\u4e2a\u5730\u65b9\uff1a 0.\u7531\u4e8e\u8be5\u8def\u7531\u51fd\u6570\u662f async \u7684\uff0c\u6240\u4ee5\u8be5\u51fd\u6570\u53ea\u80fd\u88ab\u57fa\u4e8e BaseAsyncPlugin \u63d2\u4ef6\u6302\u8f7d\u3002 1.\u7b2c9\u884c\u7684 is_pre_core = True \u662f\u8bbe\u7f6e\u8be5\u63d2\u4ef6\u4e3a\u524d\u7f6e\u63d2\u4ef6\uff0c\u8fd9\u6837\u5c31\u80fd\u62e6\u622a Pait \u548c\u8def\u7531\u51fd\u6570\u7684\u5f02\u5e38\u4e86\u3002 2.\u7b2c12\u884c\u7684 cls_hook_by_core_model \u65b9\u6cd5\u4f1a\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u68c0\u67e5\uff0c\u8be5\u68c0\u67e5\u53ea\u4f1a\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u8fd0\u884c\uff0c\u8fd9\u4e2a\u68c0\u67e5\u7684\u903b\u8f91\u662f\u5982\u679c\u5224\u5b9a\u8be5\u63d2\u4ef6\u5e76\u4e0d\u662f\u6302\u5728 demo \u51fd\u6570\u4e0a\u5c31\u4f1a\u629b\u9519\uff0c \u5176\u4e2d pait_core_model \u662f Pait \u4e3a\u8def\u7531\u51fd\u6570\u751f\u6210\u7684\u4e00\u4e9b\u5c5e\u6027\u3002 3.\u7b2c17\u884c\u7684 __call__ \u65b9\u6cd5\u662f\u8be5\u63d2\u4ef6\u7684\u4e3b\u8981\u5904\u7406\u903b\u8f91\uff0c\u5f53\u6709\u8bf7\u6c42\u8fdb\u6765\u65f6\uff0c Pait \u4f1a\u901a\u8fc7 __call__ \u65b9\u6cd5\u8c03\u7528\u63d2\u4ef6\uff0c\u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7 call_next \u6765\u8c03\u7528\u4e0b\u4e00\u4e2a\u63d2\u4ef6\uff0c \u8be5\u63d2\u4ef6\u901a\u8fc7 try...except \u6765\u6355\u83b7\u540e\u7eed\u6240\u6709\u8c03\u7528\u6bb5\u5f02\u5e38\uff0c\u5982\u679c\u662f\u7b26\u5408\u6761\u4ef6\u7684\u5f02\u5e38\u5c31\u4f1a\u88ab\u6355\u83b7\uff0c\u5e76\u751f\u6210\u4e0d\u4e00\u6837\u7684\u54cd\u5e94\u7ed3\u679c\u3002 \u7f16\u5199\u5b8c\u6bd5\u63d2\u4ef6\u540e\uff0c\u901a\u8fc7 PluginManager \u6258\u7ba1\u6302\u8f7d\u63d2\u4ef6: from pait.plugin import PluginManager @pait ( plugin_list = [ PluginManager ( DemoExceptionPlugin )]) async def demo ( ... ): pass \u6700\u540e\u91cd\u542f\u7a0b\u5e8f\u5e76\u8fd0\u884c\u540c\u6837\u7684\u8bf7\u6c42\uff0c\u53ef\u4ee5\u53d1\u73b0\u54cd\u5e94\u7ed3\u679c\u5df2\u7ecf\u53d8\u4e3a\u63d2\u4ef6\u81ea\u5df1\u629b\u51fa\u7684\u7ed3\u679c\uff1a \u279c ~ curl http://127.0.0.1:8000/api/demo { \"plugin exc info\" : \"File \\\"/home/so1n/demo.py\\\", line 48, in demo.\\nerror:Can not found uid value\" }","title":"\u5982\u4f55\u81ea\u5b9a\u4e49\u63d2\u4ef6"},{"location":"6_other/","text":"\u9690\u5f0f\u5f15\u5165\u4e0e\u663e\u5f0f\u5f15\u5165 pait \u5bf9\u591a\u4e2a\u6846\u67b6\u90fd\u63d0\u4f9b\u652f\u6301, \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u4e2d\u53ea\u5b89\u88c5\u4e86\u5176\u4e2d\u7684\u4e00\u4e2a\u6846\u67b6, \u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u9690\u5f0f\u5f15\u5165: from pait.app import add_doc_route , load_app , pait \u4f46\u662f\u5982\u679c\u540c\u65f6\u5b89\u88c5\u4e86\u591a\u4e2a\u6846\u67b6, \u90a3\u4e48\u4e0a\u9762\u7684\u5f15\u5165\u4f1a\u629b\u51fa\u9519\u8bef, \u5efa\u8bae\u4f7f\u7528\u663e\u793a\u5f15\u5165, \u5982: from pait.app.starlette import add_doc_route , load_app , pait config, data\u4e0eload_app data \u7531\u4e8e pait \u7684\u901a\u8fc7\u4e00\u4e2a\u88c5\u9970\u5668\u6765\u63d0\u4f9b\u529f\u80fd\u652f\u6301, \u6240\u4ee5\u5728\u7f16\u8bd1\u5668\u542f\u52a8\u65f6, \u6240\u6709\u6570\u636e\u90fd\u6ce8\u5165\u5230data\u4e2d, \u4e3a\u540e\u7eed\u7684\u6587\u6863\u751f\u6210\u7b49\u529f\u80fd\u63d0\u4f9b\u652f\u3002 load_app data\u91cc\u9762\u6709\u5f88\u591a\u8def\u7531\u51fd\u6570\u7684\u4fe1\u606f, \u4f46\u662f\u4f1a\u7f3a\u5c11\u5173\u952e\u7684\u53c2\u6570\u5982 url , method \u7b49\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u4f7f\u7528load_app\u628a\u76f8\u5173\u53c2\u6570\u4e0e pait \u88c5\u9970\u5668\u88c5\u9970\u7684\u8def\u7531\u51fd\u6570\u6570\u636e\u5728data\u4e2d\u7ed1\u5b9a, \u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355, \u4e0d\u8fc7\u8981\u8bb0\u4f4f, \u4e00\u5b9a\u8981\u5728\u6ce8\u518c\u6240\u6709\u8def\u7531\u540e\u518d\u8c03\u7528: from starlette.applications import Starlette from pait.app.starlette import load_app app : Starlette = Starlette () # \u9519\u8bef\u7684 load_app ( app ) # -------- # app.add_route # -------- # \u6210\u529f\u7684 load_app ( app ) config config\u80fd\u4e3a pait \u63d0\u4f9b\u4e00\u4e9b\u914d\u7f6e\u652f\u6301, \u5b83\u9700\u8981\u5c3d\u5feb\u7684\u521d\u59cb\u5316, \u6700\u4f73\u7684\u521d\u59cb\u5316\u4f4d\u7f6e\u5c31\u662f\u5728app\u521d\u59cb\u5316\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316, \u540c\u65f6\u6574\u4e2a\u8fd0\u884c\u65f6\u53ea\u5141\u8bb8\u521d\u59cb\u5316\u4e00\u6b21 from starlette.applications import Starlette from pait.app.starlette import load_app from pait.g import config config . init_config ( author = \"so1n\" ) app : Starlette = Starlette () # -------- # app.add_route # -------- load_app ( app ) \u53c2\u6570\u4ecb\u7ecd: author: \u5168\u5c40\u7684\u9ed8\u8ba4API\u4f5c\u8005, \u5982\u679c @pait \u4e2d\u6ca1\u6709\u586b\u5199author, \u4f1a\u9ed8\u8ba4\u8c03\u7528\u5230 config.author status: \u5168\u5c40\u7684\u9ed8\u8ba4API\u72b6\u6001, \u5982\u679c @pait \u4e2d\u6ca1\u6709\u586b\u5199status, \u4f1a\u9ed8\u8ba4\u8c03\u7528\u5230 config.status enable_mock_response: \u51b3\u5b9a\u8fd9\u6b21\u8fd0\u884c\u662f\u8fd4\u56de\u6b63\u5e38\u7684\u54cd\u5e94\u8fd8\u662f\u6839\u636e response_model \u8fd4\u56demock\u54cd\u5e94 enable_mock_response_filter_fn: \u9ed8\u8ba4\u652f\u6301\u591a\u4e2a response_model , mock\u54cd\u5e94\u9ed8\u8ba4\u53ea\u53d6\u7b2c\u4e00\u4e2a response_model , \u5982\u679c\u89c9\u5f97\u8fd9\u4e2a\u4e0d\u7b26\u5408\u81ea\u5df1\u60f3\u8981\u7684 response_model , \u5219\u53ef\u4ee5\u914d\u7f6e\u8be5\u51fd\u6570\u6765\u8fd4\u56de\u81ea\u5df1\u60f3\u8981\u7684\u7ed3\u679c block_http_method_set: \u6709\u4e00\u4e9bweb\u6846\u67b6\u4f1a\u81ea\u52a8\u5e2e\u5fd9\u628a\u4e00\u4e9b\u8def\u7531\u51fd\u6570\u6dfb\u52a0 HEAD \u7b49\u8bf7\u6c42\u65b9\u6cd5, pait \u662f\u65e0\u6cd5\u8bc6\u522b\u54ea\u4e9b\u662f\u6846\u67b6\u6dfb\u52a0, \u54ea\u4e9b\u662f\u7528\u6237\u81ea\u5df1\u6dfb\u52a0\u7684, \u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7\u8be5\u53c2\u6570\u5c4f\u853d\u4e00\u4e9b method default_response_model_list: \u5728\u8bbe\u8ba1\u4e00\u4e9bAPI\u63a5\u53e3\u65f6, \u901a\u5e38\u6709\u4e00\u4e9b\u9ed8\u8ba4\u7684\u5f02\u5e38\u54cd\u5e94, \u53ea\u9700\u8981\u914d\u7f6e\u8be5\u53c2\u6570\u5373\u53ef\u5e94\u7528\u5230\u5168\u5c40 json_type_default_value_dict: \u914d\u7f6ejson\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c \u5982\u4f55\u5728\u5176\u5b83Web\u6846\u67b6\u4f7f\u7528Pait \u5982\u679c\u8981\u5728\u5176\u4ed6\u5c1a\u672a\u652f\u6301\u7684\u6846\u67b6\u4e2d\u4f7f\u7528pait, \u6216\u8005\u8981\u5bf9\u529f\u80fd\u8fdb\u884c\u62d3\u5c55, \u53ef\u4ee5\u67e5\u7167\u4e24\u4e2a\u6846\u67b6\u8fdb\u884c\u7b80\u5355\u7684\u9002\u914d\u5373\u53ef. \u540c\u6b65\u7c7b\u578b\u7684web\u6846\u67b6\u8bf7\u53c2\u7167 pait.app.flask \u5f02\u6b65\u7c7b\u578b\u7684web\u6846\u67b6\u8bf7\u53c2\u7167 pait.app.starlette IDE\u652f\u6301 pait\u7684\u7c7b\u578b\u6821\u9a8c\u548c\u8f6c\u6362\u4ee5\u53ca\u7c7b\u578b\u62d3\u5c55\u5f97\u76ca\u4e8e Pydantic ,\u540c\u65f6\u4e5f\u4ece pydantic \u6216\u5f97\u5230IDE\u7684\u652f\u6301,\u76ee\u524d\u652f\u6301 Pycharm \u548c Mypy - PyCharm plugin - Mypy plugin \u793a\u4f8b\u4ee3\u7801 \u66f4\u591a\u5b8c\u6574\u793a\u4f8b\u8bf7\u53c2\u8003 example \u53d1\u884c\u8bf4\u660e \u8be6\u7ec6\u7684\u53d1\u7248\u8bf4\u660e\u89c1 CHANGELOG","title":"\u5176\u5b83"},{"location":"6_other/#_1","text":"pait \u5bf9\u591a\u4e2a\u6846\u67b6\u90fd\u63d0\u4f9b\u652f\u6301, \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u4e2d\u53ea\u5b89\u88c5\u4e86\u5176\u4e2d\u7684\u4e00\u4e2a\u6846\u67b6, \u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u9690\u5f0f\u5f15\u5165: from pait.app import add_doc_route , load_app , pait \u4f46\u662f\u5982\u679c\u540c\u65f6\u5b89\u88c5\u4e86\u591a\u4e2a\u6846\u67b6, \u90a3\u4e48\u4e0a\u9762\u7684\u5f15\u5165\u4f1a\u629b\u51fa\u9519\u8bef, \u5efa\u8bae\u4f7f\u7528\u663e\u793a\u5f15\u5165, \u5982: from pait.app.starlette import add_doc_route , load_app , pait","title":"\u9690\u5f0f\u5f15\u5165\u4e0e\u663e\u5f0f\u5f15\u5165"},{"location":"6_other/#config-dataload_app","text":"data \u7531\u4e8e pait \u7684\u901a\u8fc7\u4e00\u4e2a\u88c5\u9970\u5668\u6765\u63d0\u4f9b\u529f\u80fd\u652f\u6301, \u6240\u4ee5\u5728\u7f16\u8bd1\u5668\u542f\u52a8\u65f6, \u6240\u6709\u6570\u636e\u90fd\u6ce8\u5165\u5230data\u4e2d, \u4e3a\u540e\u7eed\u7684\u6587\u6863\u751f\u6210\u7b49\u529f\u80fd\u63d0\u4f9b\u652f\u3002 load_app data\u91cc\u9762\u6709\u5f88\u591a\u8def\u7531\u51fd\u6570\u7684\u4fe1\u606f, \u4f46\u662f\u4f1a\u7f3a\u5c11\u5173\u952e\u7684\u53c2\u6570\u5982 url , method \u7b49\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u4f7f\u7528load_app\u628a\u76f8\u5173\u53c2\u6570\u4e0e pait \u88c5\u9970\u5668\u88c5\u9970\u7684\u8def\u7531\u51fd\u6570\u6570\u636e\u5728data\u4e2d\u7ed1\u5b9a, \u4f7f\u7528\u65b9\u6cd5\u5f88\u7b80\u5355, \u4e0d\u8fc7\u8981\u8bb0\u4f4f, \u4e00\u5b9a\u8981\u5728\u6ce8\u518c\u6240\u6709\u8def\u7531\u540e\u518d\u8c03\u7528: from starlette.applications import Starlette from pait.app.starlette import load_app app : Starlette = Starlette () # \u9519\u8bef\u7684 load_app ( app ) # -------- # app.add_route # -------- # \u6210\u529f\u7684 load_app ( app ) config config\u80fd\u4e3a pait \u63d0\u4f9b\u4e00\u4e9b\u914d\u7f6e\u652f\u6301, \u5b83\u9700\u8981\u5c3d\u5feb\u7684\u521d\u59cb\u5316, \u6700\u4f73\u7684\u521d\u59cb\u5316\u4f4d\u7f6e\u5c31\u662f\u5728app\u521d\u59cb\u5316\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316, \u540c\u65f6\u6574\u4e2a\u8fd0\u884c\u65f6\u53ea\u5141\u8bb8\u521d\u59cb\u5316\u4e00\u6b21 from starlette.applications import Starlette from pait.app.starlette import load_app from pait.g import config config . init_config ( author = \"so1n\" ) app : Starlette = Starlette () # -------- # app.add_route # -------- load_app ( app ) \u53c2\u6570\u4ecb\u7ecd: author: \u5168\u5c40\u7684\u9ed8\u8ba4API\u4f5c\u8005, \u5982\u679c @pait \u4e2d\u6ca1\u6709\u586b\u5199author, \u4f1a\u9ed8\u8ba4\u8c03\u7528\u5230 config.author status: \u5168\u5c40\u7684\u9ed8\u8ba4API\u72b6\u6001, \u5982\u679c @pait \u4e2d\u6ca1\u6709\u586b\u5199status, \u4f1a\u9ed8\u8ba4\u8c03\u7528\u5230 config.status enable_mock_response: \u51b3\u5b9a\u8fd9\u6b21\u8fd0\u884c\u662f\u8fd4\u56de\u6b63\u5e38\u7684\u54cd\u5e94\u8fd8\u662f\u6839\u636e response_model \u8fd4\u56demock\u54cd\u5e94 enable_mock_response_filter_fn: \u9ed8\u8ba4\u652f\u6301\u591a\u4e2a response_model , mock\u54cd\u5e94\u9ed8\u8ba4\u53ea\u53d6\u7b2c\u4e00\u4e2a response_model , \u5982\u679c\u89c9\u5f97\u8fd9\u4e2a\u4e0d\u7b26\u5408\u81ea\u5df1\u60f3\u8981\u7684 response_model , \u5219\u53ef\u4ee5\u914d\u7f6e\u8be5\u51fd\u6570\u6765\u8fd4\u56de\u81ea\u5df1\u60f3\u8981\u7684\u7ed3\u679c block_http_method_set: \u6709\u4e00\u4e9bweb\u6846\u67b6\u4f1a\u81ea\u52a8\u5e2e\u5fd9\u628a\u4e00\u4e9b\u8def\u7531\u51fd\u6570\u6dfb\u52a0 HEAD \u7b49\u8bf7\u6c42\u65b9\u6cd5, pait \u662f\u65e0\u6cd5\u8bc6\u522b\u54ea\u4e9b\u662f\u6846\u67b6\u6dfb\u52a0, \u54ea\u4e9b\u662f\u7528\u6237\u81ea\u5df1\u6dfb\u52a0\u7684, \u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7\u8be5\u53c2\u6570\u5c4f\u853d\u4e00\u4e9b method default_response_model_list: \u5728\u8bbe\u8ba1\u4e00\u4e9bAPI\u63a5\u53e3\u65f6, \u901a\u5e38\u6709\u4e00\u4e9b\u9ed8\u8ba4\u7684\u5f02\u5e38\u54cd\u5e94, \u53ea\u9700\u8981\u914d\u7f6e\u8be5\u53c2\u6570\u5373\u53ef\u5e94\u7528\u5230\u5168\u5c40 json_type_default_value_dict: \u914d\u7f6ejson\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c","title":"config, data\u4e0eload_app"},{"location":"6_other/#webpait","text":"\u5982\u679c\u8981\u5728\u5176\u4ed6\u5c1a\u672a\u652f\u6301\u7684\u6846\u67b6\u4e2d\u4f7f\u7528pait, \u6216\u8005\u8981\u5bf9\u529f\u80fd\u8fdb\u884c\u62d3\u5c55, \u53ef\u4ee5\u67e5\u7167\u4e24\u4e2a\u6846\u67b6\u8fdb\u884c\u7b80\u5355\u7684\u9002\u914d\u5373\u53ef. \u540c\u6b65\u7c7b\u578b\u7684web\u6846\u67b6\u8bf7\u53c2\u7167 pait.app.flask \u5f02\u6b65\u7c7b\u578b\u7684web\u6846\u67b6\u8bf7\u53c2\u7167 pait.app.starlette","title":"\u5982\u4f55\u5728\u5176\u5b83Web\u6846\u67b6\u4f7f\u7528Pait"},{"location":"6_other/#ide","text":"pait\u7684\u7c7b\u578b\u6821\u9a8c\u548c\u8f6c\u6362\u4ee5\u53ca\u7c7b\u578b\u62d3\u5c55\u5f97\u76ca\u4e8e Pydantic ,\u540c\u65f6\u4e5f\u4ece pydantic \u6216\u5f97\u5230IDE\u7684\u652f\u6301,\u76ee\u524d\u652f\u6301 Pycharm \u548c Mypy - PyCharm plugin - Mypy plugin","title":"IDE\u652f\u6301"},{"location":"6_other/#_2","text":"\u66f4\u591a\u5b8c\u6574\u793a\u4f8b\u8bf7\u53c2\u8003 example","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"6_other/#_3","text":"\u8be6\u7ec6\u7684\u53d1\u7248\u8bf4\u660e\u89c1 CHANGELOG","title":"\u53d1\u884c\u8bf4\u660e"}]}