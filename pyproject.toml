[tool.poetry]
name = "pait"
version = "0.0.0"
description = "Pait is a Python api tool. Pait enables your Python web framework to have type checking, parameter type conversion, interface document generation and can display your documents through Redoc or Swagger (power by inspect, pydantic)"
authors = ["So1n <so1n897046026@gmail.com>"]
license = "Apache Software License"
readme = "./README.md"
repository = "https://github.com/so1n/pait"
homepage = "https://github.com/so1n/pait"

[tool.poetry.dependencies]
python = "^3.8.1"
any-api = "0.1.0.11"
redis = { version = "^4.2.2", optional = true }
multipart = {version = "^1.1.0", optional = true}
streaming_form_data = {version = "^1.16.0", optional = true}

[tool.poetry.urls]
"Source" = "https://github.com/so1n/pait"
"Tracker" = "https://github.com/so1n/pait/issues"
"Changelog" = "https://github.com/so1n/pait/blob/master/CHANGELOG.md"
"Documentation" = "https://so1n.me/pait/"

[tool.poetry.extras]
redis = ["redis"]
multipart = ["multipart"]
streaming_form_data = ["streaming_form_data"]
all = ["redis"]

[tool.poetry.group.framework.dependencies]
# werkzeug = "1.0.1"
Flask = "2.0.0"
werkzeug="2.0.0"
jinja2 = "^3.0.0"
sanic = "21.3.4"
sanic-testing = "0.3.0"
tornado = "6.1"
uvicorn = "0.13.4"
starlette = "0.14.1"
# markupsafe = "2.0.1"
# itsdangerous = "1.1.0"

[tool.poetry.group.test.dependencies]
pytest = "6.2.5"
coverage = "7.2"
requests = "2.26"
pytest-mock = "3.5.1"
python-multipart = "0.0.5"
pytest-asyncio = "0.14.0"
pytest-profiling = "1.7.0"
aiofiles = "0.8.0"
pytest-benchmark = "^4.0.0"
pyyaml = "6.0"
# During development, if it is found that the project cannot be started, please specify the following dependencies forcibly
importlib-metadata = "4.11.4"

[tool.poetry.group.dev.dependencies]
black = "20.8b1"
isort = "5.6.4"
autoflake = "1.4"
pre-commit = "3.5"

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.4.2"
mkdocs-material-extensions = "^1.2"
termynal = "^0.11.0"

[tool.protobuf-to-pydantic.format]
black = true
isort = true
autoflake = true

[tool.autoflake]
in-place = true
remove-all-unused-imports = true
remove-unused-variables = true
ignore-init-module-imports = true

[tool.black]
line-length = 120
target-version = ['py37']

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
python_executable = ".venv/bin/python"
exclude = [
    "^pait/extra/field/stream/_multipart.py"
]


[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
branch = true
source = ["pait"]
omit = [
    # ignore multipart
    "pait/extra/field/stream/_multipart.py"
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "continue",

    # type hints
    "if TYPE_CHECKING:",
    "pass",
]

[tool.poetry-dynamic-versioning]
enable = true
metadata=false
vcs = "git"
# format = "v{base}-{stage}.{revision}"
format = "v{base}"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
