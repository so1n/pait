syntax = "proto3";
package book_manager_by_option;
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "example_proto_by_option/common/p2p_validate.proto";
import "example_proto_by_option/common/api.proto";


// create book by admin
message CreateBookRequest {
  string isbn = 1;
  string book_name = 2;
  string book_author = 3;
  string book_desc = 4;
  string book_url = 5;
}

// delete book by admin
message DeleteBookRequest {
  string isbn = 1;
}

// get book by user
message GetBookRequest {
  string isbn = 1 [(p2p_validate.rules).string.field = "pait@field|Query"];
  string not_use_field1 = 2;
  string not_use_field2 = 3;
}

message GetBookResult {
  string isbn = 1;
  string book_name = 2;
  string book_author = 3;
  string book_desc = 4;
  string book_url = 5;
  google.protobuf.Timestamp create_time = 6;
  google.protobuf.Timestamp update_time = 7;

}

// get book list by user
message GetBookListRequest {
  optional google.protobuf.Timestamp next_create_time = 1;
  int32 limit = 2;
}

message GetBookListResult {
  repeated GetBookResult result = 1;
}

service BookManager {
  rpc create_book (CreateBookRequest) returns (google.protobuf.Empty);
  rpc delete_book (DeleteBookRequest) returns (google.protobuf.Empty);
  rpc get_book (GetBookRequest) returns (GetBookResult){
    option (pait.api.http) = {
     post: {url: "/book/get"},
     request_message: {exclude_column_name: "not_use_field1,not_use_field2"}
   };
  };
  rpc get_book_list (GetBookListRequest) returns (GetBookListResult){
   option (pait.api.http) = {
     post: {url: "/book/get-list"},
     response_message: {nested: "/result"}
   };
  };
}
