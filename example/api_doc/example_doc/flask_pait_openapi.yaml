openapi: 3.0.0
info:
  title: Pait Doc
  version: 0.0.1
servers:
- url: http://127.0.0.1
tags:
- name: test
  description: test api
- name: user
  description: user api
- name: check resp
  description: check route response
- name: check param
  description: check route request param
- name: links
  description: openapi links route
- name: plugin
  description: test pait plugin route
- name: raise
  description: raise route
- name: user
  description: user data route
- name: post
  description: post method route
- name: depend
  description: depend route
- name: same alias
  description: have same alias field route
- name: field
  description: field route
- name: mock
  description: mock response route
- name: cbv
  description: cbv route
- name: pait_doc
  description: pait default doc route
paths:
  /api/pre-depend-contextmanager:
    get:
      group: other
      tags:
      - depend
      summary: ''
      description: ''
      operationId: GET.pre_depend_contextmanager_route
      parameters:
      - name: is_raise
        in: query
        required: false
        description: ''
        schema:
          title: Is Raise
          default: false
          type: boolean
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      responses:
        200:
          description: success response|fail response
          headers: &id001 {}
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: &id002
            GET.get_user_route/header/token:
              description: test links model
              operationId: GET.get_user_route
              parameters:
                token: $response.body#/data/token
  /api/depend-contextmanager:
    get:
      group: other
      tags:
      - depend
      summary: ''
      description: ''
      operationId: GET.depend_contextmanager_route
      parameters:
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: is_raise
        in: query
        required: false
        description: ''
        schema:
          title: Is Raise
          default: false
          type: boolean
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/same-alias:
    get:
      group: other
      tags:
      - same alias
      summary: ''
      description: Test different request types, but they have the same alias and
        different parameter names
      operationId: GET.same_alias_route
      parameters:
      - name: token
        in: header
        required: false
        description: ''
        schema:
          title: Token
          default: ''
          type: string
      - name: token
        in: query
        required: false
        description: ''
        schema:
          title: Token
          default: ''
          type: string
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/pait-model:
    post:
      group: other
      tags:
      - field
      summary: ''
      description: Test pait model
      operationId: POST.pait_model_route
      requestBody:
        content:
          application/json:
            schema:
              title: PaitModelRouteDynamicModel
              type: object
              properties:
                user_info:
                  $ref: '#/definitions/example__param_verify__model__TestPaitModel__UserInfo'
              required:
              - user_info
      parameters:
      - name: user-agent
        in: header
        required: true
        description: user agent
        schema:
          title: User-Agent
          description: user agent
          type: string
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/raise-tip:
    post:
      group: other
      tags:
      - raise
      deprecated: true
      summary: ''
      description: test pait raise tip
      operationId: POST.raise_tip_route
      parameters:
      - name: content__type
        in: header
        required: true
        description: Content-Type
        schema:
          title: Content  Type
          description: Content-Type
          type: string
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/depend:
    post:
      group: other
      tags:
      - user
      - depend
      summary: ''
      description: Testing depend and using request parameters
      operationId: POST.depend_route
      requestBody:
        content:
          application/json:
            schema:
              title: DependRouteDynamicModel
              type: object
              properties:
                age:
                  title: Age
                  description: age
                  exclusiveMinimum: 1
                  exclusiveMaximum: 100
                  type: integer
              required:
              - age
      parameters:
      - name: user-agent
        in: header
        required: true
        description: user agent
        schema:
          title: User-Agent
          description: user agent
          type: string
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/field-default-factory:
    post:
      group: user
      tags:
      - field
      summary: ''
      description: ''
      operationId: POST.field_default_factory_route
      requestBody:
        content:
          application/json:
            schema:
              title: FieldDefaultFactoryRouteDynamicModel
              type: object
              properties:
                demo_value:
                  title: Demo Value
                  description: Json body value not empty
                  type: integer
                data_list:
                  title: Data List
                  description: test default factory
                  type: array
                  items:
                    type: string
                data_dict:
                  title: Data Dict
                  description: test default factory
                  type: object
              required:
              - demo_value
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/check-param:
    get:
      group: user
      tags:
      - check param
      summary: ''
      description: Test check param
      operationId: GET.check_param_route
      parameters:
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: email
        in: query
        required: false
        description: user email
        schema:
          title: Email
          description: user email
          default: example@xxx.com
          type: string
      - name: user_name
        in: query
        required: false
        description: user name
        schema:
          title: User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
      - name: alias_user_name
        in: query
        required: false
        description: user name
        schema:
          title: Alias User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
      - name: age
        in: query
        required: true
        description: age
        schema:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
      - name: birthday
        in: query
        required: false
        description: birthday
        schema:
          title: Birthday
          description: birthday
          type: string
      - name: sex
        in: query
        required: false
        description: sex
        schema:
          title: SexEnum
          description: An enumeration.
          enum:
          - man
          - woman
          type: string
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel2__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/check-resp:
    get:
      group: user
      tags:
      - check resp
      summary: ''
      description: Test test-helper check response
      operationId: GET.check_response_route
      parameters:
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: email
        in: query
        required: false
        description: user email
        schema:
          title: Email
          description: user email
          default: example@xxx.com
          type: string
      - name: user_name
        in: query
        required: true
        description: user name
        schema:
          title: User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
      - name: age
        in: query
        required: true
        description: age
        schema:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
      - name: display_age
        in: query
        required: false
        description: display_age
        schema:
          title: Display Age
          description: display_age
          default: 0
          type: integer
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/post:
    post:
      group: user
      tags:
      - user
      - post
      summary: ''
      description: Test Method:Post Pydantic Model
      operationId: POST.post_route
      requestBody:
        content:
          application/json:
            schema:
              title: PostRouteDynamicModel
              type: object
              properties:
                uid:
                  title: Uid
                  description: user id
                  exclusiveMinimum: 10
                  exclusiveMaximum: 1000
                  example: '123'
                  type: integer
                user_name:
                  title: User Name
                  description: user name
                  maxLength: 4
                  minLength: 2
                  example: so1n
                  type: string
                age:
                  title: Age
                  description: age
                  exclusiveMinimum: 1
                  exclusiveMaximum: 100
                  example: 25
                  type: integer
                sex:
                  description: sex
                  allOf:
                  - $ref: '#/definitions/example__param_verify__model__SexEnum'
              required:
              - uid
              - user_name
              - age
              - sex
      parameters:
      - name: Content-Type
        in: header
        required: true
        description: Content-Type
        schema:
          title: Content-Type
          description: Content-Type
          type: string
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/cbv:
    get:
      group: user
      tags:
      - cbv
      summary: ''
      description: Text cbv route get
      operationId: get.test_cbv.get
      parameters:
      - name: Content-Type
        in: header
        required: true
        description: ''
        schema:
          title: Content-Type
          type: string
      - name: age
        in: query
        required: true
        description: age
        schema:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          example: 25
          type: integer
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: user_name
        in: query
        required: true
        description: user name
        schema:
          title: User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
      - name: sex
        in: query
        required: false
        description: sex
        schema:
          title: SexEnum
          description: An enumeration.
          enum:
          - man
          - woman
          type: string
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
    post:
      group: user
      tags:
      - cbv
      summary: ''
      description: test cbv post method
      operationId: post.test_cbv.post
      requestBody:
        content:
          application/json:
            schema:
              title: TestCbv.postDynamicModel
              type: object
              properties:
                age:
                  title: Age
                  description: age
                  exclusiveMinimum: 1
                  exclusiveMaximum: 100
                  example: 25
                  type: integer
                uid:
                  title: Uid
                  description: user id
                  exclusiveMinimum: 10
                  exclusiveMaximum: 1000
                  type: integer
                user_name:
                  title: User Name
                  description: user name
                  maxLength: 4
                  minLength: 2
                  type: string
                sex:
                  description: sex
                  allOf:
                  - $ref: '#/definitions/example__param_verify__model__SexEnum'
              required:
              - age
              - uid
              - user_name
              - sex
      parameters:
      - name: Content-Type
        in: header
        required: true
        description: ''
        schema:
          title: Content-Type
          type: string
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/pait-base-field/{age}:
    post:
      group: user
      tags:
      - field
      summary: ''
      description: Test the use of all BaseField-based
      operationId: POST.pait_base_field_route
      parameters:
      - name: cookie
        in: cookie
        required: true
        description: "cookie \n>Note for Swagger UI and Swagger Editor users:  \n\
          >Cookie authentication iscurrently not supported for \"try it out\" requests\
          \ due to browser securityrestrictions. See [this issue](https://github.com/swagger-api/swagger-js/issues/1163)for\
          \ more information. [SwaggerHub](https://swagger.io/tools/swaggerhub/)does\
          \ not have this limitation. "
        schema:
          title: Cookie
          description: cookie
          type: string
      - name: multi_user_name
        in: multiquery
        required: true
        description: user name
        schema:
          title: Multi User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: array
          items:
            type: string
            minLength: 2
            maxLength: 4
      - name: age
        in: path
        required: true
        description: age
        schema:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: user_name
        in: query
        required: true
        description: user name
        schema:
          title: User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
      - name: email
        in: query
        required: false
        description: user email
        schema:
          title: Email
          description: user email
          default: example@xxx.com
          type: string
      - name: sex
        in: query
        required: false
        description: sex
        schema:
          title: SexEnum
          description: An enumeration.
          enum:
          - man
          - woman
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                upload_file:
                  title: Upload_file
                  type: string
                  format: binary
              required:
              - upload_file
          application/x-www-form-urlencoded:
            schema:
              title: PaitBaseFieldRouteDynamicModel
              type: object
              properties:
                a:
                  title: A
                  description: form data
                  type: string
                b:
                  title: B
                  description: form data
                  type: string
                c:
                  title: C
                  description: "form data  \n>Swagger UI could not support, when media_type\
                    \ is multipart/form-data"
                  type: array
                  items:
                    type: string
              required:
              - a
              - b
              - c
            encoding:
              c:
                style: form
                explode: true
        required: true
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/mock/{age}:
    get:
      group: user
      tags:
      - mock
      summary: ''
      description: Test gen mock response
      operationId: GET.mock_route
      parameters:
      - name: multi_user_name
        in: multiquery
        required: true
        description: user name
        schema:
          title: Multi User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: array
          items:
            type: string
            minLength: 2
            maxLength: 4
      - name: age
        in: path
        required: true
        description: age
        schema:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: user_name
        in: query
        required: true
        description: user name
        schema:
          title: User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
      - name: email
        in: query
        required: false
        description: user email
        schema:
          title: Email
          description: user email
          default: example@xxx.com
          type: string
      - name: sex
        in: query
        required: false
        description: sex
        schema:
          title: SexEnum
          description: An enumeration.
          enum:
          - man
          - woman
          type: string
      responses:
        200:
          description: success response|fail response
          headers: *id001
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel2__ResponseModel'
                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'
          links: *id002
  /api/check-json-plugin-1:
    get:
      group: plugin
      tags:
      - plugin
      summary: ''
      description: Test json plugin by resp type is typed dict
      operationId: GET.check_json_plugin_route1
      parameters:
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: email
        in: query
        required: false
        description: user email
        schema:
          title: Email
          description: user email
          default: example@xxx.com
          type: string
      - name: user_name
        in: query
        required: true
        description: user name
        schema:
          title: User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
      - name: age
        in: query
        required: true
        description: age
        schema:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
      - name: display_age
        in: query
        required: false
        description: display_age
        schema:
          title: Display Age
          description: display_age
          default: 0
          type: integer
      responses:
        200:
          description: success response
          headers: *id001
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'
          links: *id002
  /api/check-json-plugin:
    get:
      group: plugin
      tags:
      - plugin
      summary: ''
      description: Test json plugin by resp type is dict
      operationId: GET.check_json_plugin_route
      parameters:
      - name: uid
        in: query
        required: true
        description: user id
        schema:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: email
        in: query
        required: false
        description: user email
        schema:
          title: Email
          description: user email
          default: example@xxx.com
          type: string
      - name: user_name
        in: query
        required: true
        description: user name
        schema:
          title: User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
      - name: age
        in: query
        required: true
        description: age
        schema:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
      - name: display_age
        in: query
        required: false
        description: display_age
        schema:
          title: Display Age
          description: display_age
          default: 0
          type: integer
      responses:
        200:
          description: success response
          headers: *id001
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'
          links: *id002
  /api/text-resp:
    get:
      group: check_resp
      tags:
      - check resp
      summary: ''
      description: test return test response
      operationId: GET.async_text_response_route
      responses:
        200:
          description: text response
          headers:
            X-Example-Type: text
          content:
            text/plain:
              type: string
              example: pait example data
          links: *id002
  /api/html-resp:
    get:
      group: check_resp
      tags:
      - check resp
      summary: ''
      description: test return html response
      operationId: GET.html_response_route
      responses:
        200:
          description: html response
          headers:
            X-Example-Type: html
          content:
            text/html:
              type: string
              example: <h1>Pait example html</h1>
          links: *id002
  /api/file-resp:
    get:
      group: check_resp
      tags:
      - check resp
      summary: ''
      description: test return file response
      operationId: GET.file_response_route
      responses:
        200:
          description: file response
          headers:
            X-Example-Type: file
          content:
            application/octet-stream:
              type: string
              format: binary
          links: *id002
  /api/login:
    post:
      group: links
      tags:
      - links
      summary: ''
      description: ''
      operationId: POST.login_route
      requestBody:
        content:
          application/json:
            schema:
              title: LoginRouteDynamicModel
              type: object
              properties:
                uid:
                  title: Uid
                  description: user id
                  type: string
                password:
                  title: Password
                  description: password
                  type: string
              required:
              - uid
              - password
      responses:
        200:
          description: login response
          headers: *id001
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/example__param_verify__model__LoginRespModel__ResponseModel'
          links: *id002
  /api/user:
    get:
      group: links
      tags:
      - links
      summary: ''
      description: ''
      operationId: GET.get_user_route
      parameters:
      - name: token
        in: header
        required: false
        description: token
        schema:
          title: Token
          description: token
          default: ''
          type: string
      responses:
        200:
          description: success response
          headers: *id001
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/example__param_verify__model__ResponseModel'
          links: *id002
  /openapi.json:
    get:
      group: pait_doc
      tags:
      - pait_doc
      summary: ''
      description: ''
      operationId: GET.api doc.openapi_route
      parameters:
      - name: pin_code
        in: query
        required: false
        description: ''
        schema:
          title: Pin Code
          default: ''
          type: string
  /swagger:
    get:
      group: pait_doc
      tags:
      - pait_doc
      summary: ''
      description: ''
      operationId: GET.api doc.get_swagger_ui_html
      parameters:
      - name: pin_code
        in: query
        required: false
        description: ''
        schema:
          title: Pin Code
          default: ''
          type: string
  /redoc:
    get:
      group: pait_doc
      tags:
      - pait_doc
      summary: ''
      description: ''
      operationId: GET.api doc.get_redoc_html
      parameters:
      - name: pin_code
        in: query
        required: false
        description: ''
        schema:
          title: Pin Code
          default: ''
          type: string
components:
  schemas:
    example__param_verify__model__ResponseModel:
      title: ResponseModel
      type: object
      properties:
        code:
          title: Code
          description: api code
          default: 0
          type: integer
        msg:
          title: Msg
          description: api status msg
          default: success
          type: string
    example__param_verify__model__ResponseFailModel:
      title: ResponseFailModel
      type: object
      properties:
        code:
          title: Code
          description: api code
          default: 1
          type: integer
        msg:
          title: Msg
          description: api status msg
          default: fail
          type: string
    example__param_verify__model__SimpleRespModel__ResponseModel:
      title: ResponseModel
      type: object
      properties:
        code:
          title: Code
          description: api code
          default: 0
          type: integer
        msg:
          title: Msg
          description: api status msg
          default: success
          type: string
        data:
          title: Data
          description: success result
          type: object
      required:
      - data
    example__param_verify__model__UserSuccessRespModel2__ResponseModel__DataModel:
      title: DataModel
      type: object
      properties:
        uid:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          example: 666
          type: integer
        user_name:
          title: User Name
          description: user name
          maxLength: 10
          minLength: 2
          example: mock_name
          type: string
        multi_user_name:
          title: Multi User Name
          description: user name
          maxLength: 4
          minLength: 2
          example: !!python/tuple
          - mock_name
          type: array
          items:
            type: string
            minLength: 2
            maxLength: 4
        sex:
          description: sex
          example: !!python/object/apply:example.param_verify.model.SexEnum
          - man
          allOf:
          - $ref: '#/components/schemas/example__param_verify__model__SexEnum'
        age:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          example: 99
          type: integer
        email:
          title: Email
          description: user email
          example: example@so1n.me
          type: string
      required:
      - uid
      - user_name
      - multi_user_name
      - sex
      - age
      - email
    example__param_verify__model__SexEnum:
      title: SexEnum
      description: An enumeration.
      enum:
      - man
      - woman
      type: string
    example__param_verify__model__UserSuccessRespModel2__ResponseModel:
      title: ResponseModel
      type: object
      properties:
        code:
          title: Code
          description: api code
          default: 0
          type: integer
        msg:
          title: Msg
          description: api status msg
          default: success
          type: string
        data:
          $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel2__ResponseModel__DataModel'
      required:
      - data
    example__param_verify__model__UserSuccessRespModel3__ResponseModel__DataModel:
      title: DataModel
      type: object
      properties:
        uid:
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
        user_name:
          title: User Name
          description: user name
          maxLength: 4
          minLength: 2
          type: string
        age:
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
        email:
          title: Email
          description: user email
          type: string
      required:
      - uid
      - user_name
      - age
      - email
    example__param_verify__model__UserSuccessRespModel3__ResponseModel:
      title: ResponseModel
      type: object
      properties:
        code:
          title: Code
          description: api code
          default: 0
          type: integer
        msg:
          title: Msg
          description: api status msg
          default: success
          type: string
        data:
          $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel__DataModel'
      required:
      - data
    example__param_verify__model__UserSuccessRespModel__ResponseModel__DataModel:
      title: DataModel
      type: object
      properties:
        uid:
          title: Uid
          description: user id
          default: 666
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
        user_name:
          title: User Name
          description: user name
          default: mock_name
          maxLength: 10
          minLength: 2
          type: string
        age:
          title: Age
          description: age
          default: 99
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
        sex:
          description: sex
          default: !!python/object/apply:example.param_verify.model.SexEnum
          - man
          allOf:
          - $ref: '#/components/schemas/example__param_verify__model__SexEnum'
        content_type:
          title: Content Type
          description: content-type
          type: string
      required:
      - content_type
    example__param_verify__model__UserSuccessRespModel__ResponseModel:
      title: ResponseModel
      type: object
      properties:
        code:
          title: Code
          description: api code
          default: 0
          type: integer
        msg:
          title: Msg
          description: api status msg
          default: success
          type: string
        data:
          $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel__ResponseModel__DataModel'
      required:
      - data
    example__param_verify__model__LoginRespModel__ResponseModel__DataModel:
      title: DataModel
      type: object
      properties:
        token:
          title: Token
          type: string
      required:
      - token
    example__param_verify__model__LoginRespModel__ResponseModel:
      title: ResponseModel
      type: object
      properties:
        code:
          title: Code
          description: api code
          default: 0
          type: integer
        msg:
          title: Msg
          description: api status msg
          default: success
          type: string
        data:
          $ref: '#/components/schemas/example__param_verify__model__LoginRespModel__ResponseModel__DataModel'
      required:
      - data
